/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var n={1198:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=m(t(7294)),r=m(t(3921)),o=d(t(3805)),i=d(t(2146)),l=d(t(8340)),c=d(t(2879)),s=d(t(805)),u=t(1752),f=d(t(5706)),p=t(662);function d(n){return n&&n.__esModule?n:{default:n}}function v(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(v=function(n){return n?t:e})(n)}function m(n,e){if(!e&&n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=v(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}e.default=()=>{const[n,e]=a.default.useReducer(r.default,(0,r.initialState)());return(0,a.useEffect)((()=>{!function(n){(0,u.setErrorCallback)((e=>{n({type:"setError",payload:e})})),(0,u.init)();const e=+localStorage.getItem("renderer_id");e&&((0,u.setRenderer)(e),n({type:"setShader",payload:e}))}(e)}),[]),a.default.createElement(c.default.Provider,{value:[n,e]},a.default.createElement(f.default,null,n.page===p.PAGES.PAGE_LIST?a.default.createElement(o.default,null):null,n.page===p.PAGES.PAGE_DETAILS?a.default.createElement(i.default,null):null),a.default.createElement(l.default,null),a.default.createElement(s.default,null))}},6523:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a,r=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=i(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var l=r?Object.getOwnPropertyDescriptor(n,o):null;l&&(l.get||l.set)?Object.defineProperty(a,o,l):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),o=(a=t(3743))&&a.__esModule?a:{default:a};function i(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(i=function(n){return n?t:e})(n)}e.default=({onClick:n,label:e})=>{const[t,a]=(0,r.useState)(!0),i=[o.default.collapseButton];return t&&i.push(o.default.toggle),r.default.createElement("button",{className:i.join(" "),onClick:function(e){a(!t),n(e)}},r.default.createElement("i",{className:o.default.arrowIcon}),r.default.createElement("label",null,e))}},8340:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=l(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),r=i(t(2879)),o=i(t(4779));function i(n){return n&&n.__esModule?n:{default:n}}function l(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(l=function(n){return n?t:e})(n)}e.default=()=>{const[{error:n}]=(0,a.useContext)(r.default);return n?a.default.createElement("div",{className:o.default.container},a.default.createElement("div",{className:o.default.inner},a.default.createElement("h3",null,"Shader error"),n.toString())):null}},2189:(n,e)=>{"use strict";let t;Object.defineProperty(e,"__esModule",{value:!0}),e.init=e.getMouseControl=e.animate=void 0;let a=0,r=0,o=0,i=0,l=0,c=0,s=1,u=0,f=1;const p=function(n){t=!0,a=n.screenX,r=n.screenY},d=function(){t=!1},v=function(n){if(t){const e=.01;l+=(n.screenX-a)*e,c+=(n.screenY-r)*e,a=n.screenX,r=n.screenY}},m=function(n){return Math.abs(n)>.1?.99*n:0},y=function(n){const e=n.deltaY;e>0&&f<1?f+=.125:e<0&&f>0&&(f-=.125)};e.getMouseControl=function(){return[o,i,s]},e.init=function(){window.addEventListener("mousemove",v),window.addEventListener("mousedown",p),window.addEventListener("mouseup",d),document.addEventListener("wheel",y)};const h=function(){t||(l=m(l),c=m(c)),o+=l,i+=c,o<-2e3&&(o=-2e3),o>2e3&&(o=2e3),i<-2e3&&(i=-2e3),i>2e3&&(i=2e3),Math.abs(s-f)<.01?u=0:(u+=.001*(f-s)-.08*u,s+=u),requestAnimationFrame(h)};e.animate=h},5722:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a,r=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=l(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),o=t(1752),i=(a=t(2695))&&a.__esModule?a:{default:a};function l(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(l=function(n){return n?t:e})(n)}e.default=({item:n})=>{const[e,t]=(0,r.useState)(0),a=n.label;return(0,r.useEffect)((()=>{t(n.default)}),[]),r.default.createElement("div",{className:i.default.container},r.default.createElement("div",{className:i.default.header},r.default.createElement("div",{className:i.default.title},a),r.default.createElement("div",{className:i.default.value},e)),r.default.createElement("div",{className:i.default.header},r.default.createElement("input",{type:"range",min:"0",max:"1",step:"0.01",value:e,className:i.default.slider,onChange:e=>{e.preventDefault();const a=e.target.value||0;t(a),(0,o.setParameter)(n.id,a)}})))}},9629:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=c(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),r=l(t(2879)),o=l(t(5722)),i=l(t(8350));function l(n){return n&&n.__esModule?n:{default:n}}function c(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(c=function(n){return n?t:e})(n)}e.default=()=>{const[{shaderList:n,selectedShader:e}]=(0,a.useContext)(r.default),t=n.find((({id:n})=>n===e));if(t.parameters){const n=t.parameters.map((n=>a.default.createElement(o.default,{item:n,key:n.id})));return a.default.createElement("div",{className:i.default.container},n)}return null}},2146:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=s(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),r=c(t(2879)),o=c(t(9629)),i=t(662),l=c(t(5115));function c(n){return n&&n.__esModule?n:{default:n}}function s(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(s=function(n){return n?t:e})(n)}e.default=()=>{const[{shaderList:n,selectedShader:e},t]=(0,a.useContext)(r.default),c=n.find((({id:n})=>n===e));return c?a.default.createElement("div",{className:l.default.container},a.default.createElement("div",null,a.default.createElement("button",{className:l.default.backButton,onClick:()=>{t({type:"setPage",payload:i.PAGES.PAGE_LIST})}},a.default.createElement("i",null),a.default.createElement("label",null,"To gallery"))),a.default.createElement("div",{className:l.default.header},a.default.createElement("h2",{className:l.default.title},c.name)),a.default.createElement("div",{className:l.default.controlContainer},a.default.createElement(o.default,null))):null}},805:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a,r=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=l(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),o=t(1752),i=(a=t(3774))&&a.__esModule?a:{default:a};function l(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(l=function(n){return n?t:e})(n)}e.default=()=>{const[n,e]=(0,r.useState)(0);let t;return(0,r.useEffect)((()=>(t=setInterval((()=>{const n=(0,o.getFps)();e(n)}),500),()=>{clearInterval(t)}))),r.default.createElement("div",{className:i.default.container},r.default.createElement("div",{className:i.default.label},"FPS"),r.default.createElement("div",{className:i.default.value},n.toString()))}},1410:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=c(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),r=l(t(2879)),o=t(1752),i=l(t(3537));function l(n){return n&&n.__esModule?n:{default:n}}function c(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(c=function(n){return n?t:e})(n)}e.default=({item:n})=>{const[{selectedShader:e},t]=(0,a.useContext)(r.default),l=e===n.id;return a.default.createElement("div",{className:i.default.container,onClick:()=>{(0,o.setRenderer)(n.id),t({type:"setShader",payload:n.id})}},a.default.createElement("h2",{className:`${i.default.title} ${l?i.default.selected:""}`},n.name),a.default.createElement("article",{className:i.default.description},n.description))}},3805:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=c(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),r=l(t(2879)),o=l(t(1410)),i=l(t(6044));function l(n){return n&&n.__esModule?n:{default:n}}function c(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(c=function(n){return n?t:e})(n)}e.default=()=>{const[{shaderList:n,menuVisible:e},t]=(0,a.useContext)(r.default),l=n.map((n=>a.default.createElement(o.default,{item:n,key:n.id})));return a.default.createElement("div",{className:i.default.container},a.default.createElement("h3",{className:i.default.header},"Shader gallery"),a.default.createElement("div",{className:i.default.list},a.default.createElement("ul",null,l)))}},5706:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(n,e){if(n&&n.__esModule)return n;if(null===n||"object"!=typeof n&&"function"!=typeof n)return{default:n};var t=l(e);if(t&&t.has(n))return t.get(n);var a={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in n)if("default"!==o&&Object.prototype.hasOwnProperty.call(n,o)){var i=r?Object.getOwnPropertyDescriptor(n,o):null;i&&(i.get||i.set)?Object.defineProperty(a,o,i):a[o]=n[o]}return a.default=n,t&&t.set(n,a),a}(t(7294)),r=i(t(189)),o=i(t(6523));function i(n){return n&&n.__esModule?n:{default:n}}function l(n){if("function"!=typeof WeakMap)return null;var e=new WeakMap,t=new WeakMap;return(l=function(n){return n?t:e})(n)}const c=n=>{n.stopPropagation()};e.default=({children:n})=>{const[e,t]=(0,a.useState)(!1),i=(0,a.useRef)();return(0,a.useEffect)((()=>{i.current.addEventListener("mousedown",c),i.current.addEventListener("wheel",c)}),[]),a.default.createElement("div",{className:`${r.default.sidebar} ${e?"":r.default.collapsed}`,ref:i},n,a.default.createElement("div",{className:r.default.button},a.default.createElement(o.default,{label:"Expand",direction:1,onClick:()=>{t(!e)},labelPos:1,big:!0,dark:!0})))}},662:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PAGES=void 0,e.PAGES={PAGE_LIST:0,PAGE_DETAILS:1}},3921:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialState=e.default=void 0;var a=t(4066),r=t(662);e.initialState=function(){const n=(0,a.getShaderList)();return{shaderList:n,selectedShader:n[0].id,error:null,page:r.PAGES.PAGE_LIST}},e.default=(n,e)=>{console.log("reduce",e);const{type:t,payload:a}=e;switch(t){case"setShader":n={...n,selectedShader:a,page:r.PAGES.PAGE_DETAILS};break;case"setPage":n={...n,page:a};break;case"setError":n={...n,error:a}}return console.log("state",n),n}},1752:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setRenderer=e.setParameter=e.setErrorCallback=e.init=e.getFps=void 0;var a=t(4066),r=l(t(1917)),o=l(t(4906)),i=l(t(881));function l(n){return n&&n.__esModule?n:{default:n}}let c,s,u=null,f=n=>console.error(n);const p={type:"single"};e.setRenderer=function(n){if(!s)return;let e=s.find((({id:e})=>e===n));if(e={...p,...e},e&&(u&&u.options.id!==n&&(u.destroy(),u=null),!u))try{localStorage.setItem("renderer_id",n+"");const t=function(n){switch(n.type){case"single":default:return r.default;case"bg":return o.default;case"tex":return i.default}}(e);u=new t(c,e),u.init(),u.animate()}catch(n){f(n),console.error(n)}},e.setParameter=function(n,e){u.parameters[n]=e},e.setErrorCallback=function(n){f=n},e.getFps=function(){return u?.fps?u.fps:NaN},e.init=function(){s=(0,a.getShaderList)(),c=document.getElementById("canvas-container")}},1917:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a,r=(a=t(8058))&&a.__esModule?a:{default:a},o=t(2189);e.default=class{constructor(n,e){this.width=0,this.height=0,this.vertexSource="",this.fragmentSource="",this.root=null,this.gl=null,this.canvas=null,this.proj=null,this.options=null,this.animId=null,this.startTime=Date.now(),this.time=this.startTime,this.fpsHistory=[],this.fps=0,this.fpsTime=Date.now(),this.mainShader=void 0,this.parameters={},this.options=e,this.root=n,this.canvas=document.createElement("canvas"),this.root.appendChild(this.canvas),this.canvas.id="canvas",this.gl=this.canvas.getContext("webgl2"),this.setCanvasSize(),window.addEventListener("resize",this.setCanvasSize.bind(this)),(0,o.init)(),(0,o.animate)()}init(){this.vertexSource=this.options.vertexSource,this.fragmentSource=this.options.fragmentSource,this.mainShader=new r.default(this.gl),this.mainShader.createProgram(this.vertexSource,this.fragmentSource),this.createSquarePositions(),this.mainShader.useProgram(),this.mainShader.setPositions("aPos"),this.addUniforms()}addUniforms(){this.mainShader.addUniform("u_MVP","4fv"),this.mainShader.addUniform("u_time","1f"),this.mainShader.addUniform("u_mouseX","1f"),this.mainShader.addUniform("u_mouseY","1f"),this.mainShader.addUniform("u_scrollValue","1f"),this.mainShader.addUniform("u_quality","1f"),this.addUniformParameters()}addUniformParameters(){this.options.parameters.forEach((n=>{this.mainShader.addUniform(`u_${n.id}`,"1f"),this.parameters[n.id]=n.default}))}createSquarePositions(){const n=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,1,1,-1,1]),this.gl.STATIC_DRAW);const e=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,e),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,2,3,0]),this.gl.STATIC_DRAW)}destroy(){this.root.removeChild(this.canvas),window.removeEventListener("resize",this.setCanvasSize.bind(this)),cancelAnimationFrame(this.animId)}renderFrame(){this.proj=this.calculateMVP(this.width,this.height),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null),this.setUniforms(),this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.drawElements(this.gl.TRIANGLES,6,this.gl.UNSIGNED_SHORT,0)}setUniforms(){const[n,e,t]=(0,o.getMouseControl)();this.time=(Date.now()-this.startTime)/1e3,this.mainShader.setUniform("u_MVP",this.proj),this.mainShader.setUniform("u_time",this.time),this.mainShader.setUniform("u_mouseX",n),this.mainShader.setUniform("u_mouseY",e),this.mainShader.setUniform("u_scrollValue",t),this.mainShader.setUniform("u_quality",1),this.setUniformParameters()}setUniformParameters(){this.options.parameters.forEach((({id:n})=>{const e=this.parameters[n];this.mainShader.setUniform(`u_${n}`,e)}))}animate(){this.renderFrame(),this.updateFps(),this.animId=requestAnimationFrame(this.animate.bind(this))}setCanvasSize(){this.width=this.root.clientWidth,this.height=this.root.clientHeight,this.canvas.width=this.width,this.canvas.height=this.height,this.canvas.style.width=`${this.width}px`,this.canvas.style.height=`${this.height}px`,this.gl.viewport(0,0,this.width,this.height)}calculateMVP(n,e){const t=-n/e,a=n/e;return[2/(a-t),0,0,-(a+t)/(a-t),0,1,0,-0,0,0,1,-0,0,0,0,1]}updateFps(){const n=Date.now();n!==this.fpsTime&&(this.fpsHistory.push(1e3/(n-this.fpsTime)),this.fpsTime=n,this.fpsHistory.length<10||(this.fps=Math.floor(100*this.fpsHistory.reduce(((n,e)=>(n+e)/2)))/100,this.fpsHistory.unshift()))}}},4906:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=l(t(1917)),r=l(t(8058)),o=l(t(5288)),i=t(2189);function l(n){return n&&n.__esModule?n:{default:n}}class c extends a.default{constructor(...n){super(...n),this.textureHeight=4048,this.textureWidth=4048,this.texture=void 0,this.frameBuffer=void 0,this.renderSkyTexture=function(){this.bgVertexSource=this.options.bgVertexSource,this.bgFragmentSource=this.options.bgFragmentSource,this.environmentShader=new r.default(this.gl),this.environmentShader.createProgram(this.bgVertexSource,this.bgFragmentSource),this.environmentShader.setPositions("aPos"),this.environmentShader.addUniform("u_MVP","4fv"),this.environmentShader.setUniform("u_quality","1f"),this.environmentShader.setUniform("u_control4","1f"),this.texture=new o.default(this.gl),this.texture.empty(this.textureWidth,this.textureHeight),this.frameBuffer=this.gl.createFramebuffer(),this.gl.viewport(0,0,this.textureWidth,this.textureHeight),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture.texture),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.frameBuffer),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this.texture.texture,0),this.canvas.width=this.textureHeight,this.canvas.height=this.textureWidth,this.proj=this.calculateMVP(this.width,this.height),this.environmentShader.useProgram(),this.environmentShader.setUniform("u_MVP",this.proj),this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.drawElements(this.gl.TRIANGLES,6,this.gl.UNSIGNED_SHORT,0),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null),this.gl.bindTexture(this.gl.TEXTURE_2D,null)},this.renderFrame=function(){this.proj=this.calculateMVP(this.width,this.height),this.mainShader.useProgram(),this.mainShader.setUniform("u_MVP",this.proj);const[n,e,t]=(0,i.getMouseControl)();this.time=(Date.now()-this.startTime)/1e3,this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture.texture),this.mainShader.setUniform("u_Sampler",1),this.mainShader.setUniform("u_time",this.time),this.mainShader.setUniform("u_mouseX",n),this.mainShader.setUniform("u_mouseY",e),this.mainShader.setUniform("u_scrollValue",t),this.setUniformParameters(),this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.drawElements(this.gl.TRIANGLES,6,this.gl.UNSIGNED_SHORT,0)}}init(){this.vertexSource=this.options.vertexSource,this.fragmentSource=this.options.fragmentSource,this.createSquarePositions(),this.renderSkyTexture(),this.mainShader=new r.default(this.gl),this.mainShader.createProgram(this.vertexSource,this.fragmentSource),this.mainShader.useProgram(),this.mainShader.setPositions("aPos"),this.mainShader.addUniform("u_MVP","4fv"),this.mainShader.addUniform("u_time","1f"),this.mainShader.addUniform("u_mouseX","1f"),this.mainShader.addUniform("u_mouseY","1f"),this.mainShader.addUniform("u_scrollValue","1f"),this.mainShader.addUniform("u_quality","1f"),this.mainShader.addUniform("u_Sampler","1i"),this.addUniformParameters()}}e.default=c},881:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=i(t(5288)),r=i(t(1917)),o=i(t(9895));function i(n){return n&&n.__esModule?n:{default:n}}class l extends r.default{constructor(...n){super(...n),this.texture=null,this.textureCube=null}init(){super.init(),this.options.texture&&(this.texture=new a.default(this.gl),this.texture.fromUrl(this.options.texture.src)),this.options.textureCube&&(this.textureCube=new o.default(this.gl),this.textureCube.fromSources(this.options.textureCube.src))}addUniforms(){super.addUniforms(),this.mainShader.addUniform("u_Sampler","1i"),this.mainShader.addUniform("u_Sampler2","1i")}setUniforms(){super.setUniforms(),this.options.texture&&(this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture.texture),this.mainShader.setUniform("u_Sampler",0)),this.options.textureCube&&(this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,this.textureCube.texture),this.mainShader.setUniform("u_Sampler2",1))}}e.default=l},4066:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getShaderList=void 0;var a=k(t(2919)),r=k(t(8146)),o=k(t(8510)),i=k(t(8453)),l=k(t(1726)),c=k(t(7134)),s=k(t(6333)),u=k(t(4199)),f=k(t(8685)),p=k(t(7795)),d=k(t(7412)),v=k(t(1190)),m=k(t(2851)),y=k(t(5406)),h=k(t(5160)),x=k(t(1027)),g=k(t(1134)),b=k(t(6526)),_=k(t(1646)),S=k(t(2024)),z=k(t(5246)),w=k(t(3420)),E=k(t(1863)),P=k(t(7437)),T=k(t(5959)),C=k(t(3102)),D=k(t(6093));function k(n){return n&&n.__esModule?n:{default:n}}const O=[],I=n=>{O.push({...n,id:O.length+1})};e.getShaderList=()=>O,I({name:"Shiny gyroid",description:"Cubemap sampling techniques",vertexSource:a.default,fragmentSource:r.default,type:"tex",parameters:[{id:"gyrdens1",label:"Gyroid density",default:.5},{id:"control1",label:"Control1",default:.5},{id:"control2",label:"Fresnel",default:.5}],texture:{src:o.default},textureCube:{src:{posX:i.default,negX:l.default,posY:c.default,negY:s.default,posZ:u.default,negZ:f.default}}}),I({name:"Burning filament strings",description:"Volumetric raymarcher, researching glow",vertexSource:a.default,fragmentSource:p.default,parameters:[{id:"spiraNoise",label:"Spiral noise",default:.5},{id:"gyroidOffset",label:"Gyroid offset",default:.5},{id:"pixelate",label:"Pixelate",default:.5}]}),I({name:"Balloon with lights",description:"Playing with reflections",vertexSource:a.default,fragmentSource:d.default,parameters:[{id:"gamma",label:"Gamma",default:.5}]}),I({name:"Strings with color splash",description:"Lorem, ipsum dolor sit amet consectetur adipisicing elit.",vertexSource:a.default,fragmentSource:v.default,parameters:[{id:"pixelate",label:"Pixelate",default:.5}]}),I({name:"Twisted gyroid spheres",description:"Ray marched gyroid spheres with twist",vertexSource:a.default,fragmentSource:m.default,parameters:[{id:"control1",label:"Radius",default:.5},{id:"control2",label:"Glow",default:.5},{id:"control3",label:"Gyroid density",default:.5},{id:"control4",label:"Twist space",default:.5}]}),I({name:"String gyroid",description:"infinite gyroid space",vertexSource:a.default,fragmentSource:y.default,parameters:[]}),I({name:"Sphere + gyroid",description:"Basic raymarcher",vertexSource:a.default,fragmentSource:h.default,parameters:[{id:"control1",label:"Radius",default:.5},{id:"control2",label:"Gyroid density",default:.5},{id:"control3",label:"Stretch",default:.5},{id:"control5",label:"Twist",default:.5}]}),I({name:"Nebula",description:"Volumetric nebula",vertexSource:a.default,fragmentSource:x.default,parameters:[{id:"control3",label:"Volume",default:.5},{id:"control4",label:"Volume2",default:.5},{id:"control1",label:"Volume3",default:.5},{id:"control5",label:"Light",default:.5}]}),I({name:"Nebula: twisted mess",description:"",vertexSource:a.default,fragmentSource:g.default,parameters:[]}),I({name:"Nebula 3",description:"Nice volumetric effect. Warning! Very slow shader.",vertexSource:a.default,fragmentSource:b.default,bgVertexSource:a.default,bgFragmentSource:_.default,type:"bg",parameters:[{id:"control1",label:"Pulse",default:.5},{id:"control2",label:"Вздръжне эффект",default:.5},{id:"quality",label:"Quality",default:.5}]}),I({name:"Bubbles 1",description:"",vertexSource:a.default,fragmentSource:S.default,parameters:[{id:"control1",label:"Pixelate",default:.5}]}),I({name:"Bubbles 2",description:"Translucent bubbles",vertexSource:a.default,fragmentSource:z.default,parameters:[]}),I({name:"Emissive gyroid",description:"Work in progress",vertexSource:a.default,fragmentSource:w.default,type:"tex",parameters:[{id:"control1",label:"Control1",default:.5}],texture:{src:o.default},textureCube:{src:{posX:i.default,negX:l.default,posY:c.default,negY:s.default,posZ:u.default,negZ:f.default}}}),I({name:"Smoke ball",description:"Volumetric ray march",vertexSource:a.default,fragmentSource:E.default,parameters:[]}),I({name:"Smoke ball 2",description:"With lights",vertexSource:a.default,fragmentSource:P.default,parameters:[{id:"control1",label:"Control1",default:.5},{id:"control2",label:"Control2",default:.5},{id:"control3",label:"Control3",default:.5},{id:"control4",label:"Control4",default:.5},{id:"control5",label:"Control5",default:.5},{id:"control6",label:"Control6",default:.5},{id:"control7",label:"Control7",default:.5},{id:"control8",label:"Control8",default:.5}]}),I({name:"Sphere fractal",description:"Stolen from shadertoy",vertexSource:a.default,fragmentSource:T.default,parameters:[{id:"control1",label:"Control1",default:.5},{id:"control2",label:"Control2",default:.5},{id:"control3",label:"Control3",default:.5},{id:"control4",label:"Control4",default:.5},{id:"control5",label:"Control5",default:.5},{id:"control6",label:"Control6",default:.5},{id:"control7",label:"Control7",default:.5},{id:"control8",label:"Control8",default:.5}]}),I({name:"Pillars",description:"Infinite bars, simple raymarcher",vertexSource:a.default,fragmentSource:C.default,parameters:[{id:"thick",label:"Thickness",default:.2}]}),I({name:"Crazy reflections",description:"",vertexSource:a.default,fragmentSource:D.default,parameters:[]})},2879:(n,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=(0,t(7294).createContext)(null);e.default=a},8058:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default=class{constructor(n){this.gl=void 0,this.uniforms=[],this.positionLocation=null,this.program=null,this.gl=n}createProgram(n,e){const t=this.gl,a=t.createShader(t.VERTEX_SHADER),r=t.createShader(t.FRAGMENT_SHADER),o=t.shaderSource(a,n),i=t.shaderSource(r,e);t.compileShader(a,o),t.getShaderParameter(a,t.COMPILE_STATUS)||this.throwError(a,n,"vertex"),t.compileShader(r,i),t.getShaderParameter(r,t.COMPILE_STATUS)||this.throwError(r,e,"fragment");const l=t.createProgram();t.attachShader(l,a),t.attachShader(l,r),t.linkProgram(l),t.validateProgram(l),t.getProgramParameter(l,t.VALIDATE_STATUS)?this.program=l:console.log("Error validating program ",t.getProgramInfoLog(l))}useProgram(){this.gl.useProgram(this.program)}addUniform(n,e){const t={name:n,type:e,uniform:this.gl.getUniformLocation(this.program,n)};this.uniforms.push(t)}setUniform(n,...e){const t=this.uniforms.find((e=>e.name===n));if(t)switch(t.type){case"4fv":return void this.gl.uniformMatrix4fv(t.uniform,!1,e[0]);case"1f":return void this.gl.uniform1f(t.uniform,e[0]);case"2f":return void this.gl.uniform2f(t.uniform,e[0],e[1]);case"4f":return void this.gl.uniform4f(t.uniform,e[0],e[1],e[2],e[3]);case"1i":return void this.gl.uniform1i(t.uniform,e[0])}}setPositions(n){this.positionLocation=this.gl.getAttribLocation(this.program,n),this.gl.enableVertexAttribArray(this.positionLocation),this.gl.vertexAttribPointer(this.positionLocation,2,this.gl.FLOAT,!1,0,0)}throwError(n,e,t){const a=RegExp("ERROR:\\s+\\d+:(\\d+)","g"),r=this.gl.getShaderInfoLog(n).replace(/\x00/g,"").trim();let o,i=`Error compiling ${t} shader: \n${r}\non:`;const l={};for(;o=a.exec(r);)if(o&&o[1]){const n=parseInt(o[1],10)-1;isNaN(n)||(l[n]=!0)}throw Object.keys(l).forEach((n=>{const t=e.split("\n");t[n]&&(i+=`\n${n}: ${t[n].trim()}`)})),new Error(i)}}},9895:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default=class{get texture(){return this._texture}constructor(n){this._texture=null,this.gl=null,this.level=0,this.internalFormat=0,this.border=0,this.format=0,this.srcFormat=0,this.type=0,this.data=null,this.srcType=0,this.pixel=null,this.width=0,this.height=0,this.targetTextureWidth=0,this.targetTextureHeight=0,this.gl=n,this.pixel=new Uint8Array([106,163,149,255]),this.internalFormat=this.gl.RGBA,this.format=this.gl.RGBA,this.srcFormat=this.gl.RGBA,this.type=this.gl.UNSIGNED_BYTE,this.srcType=this.gl.UNSIGNED_BYTE}fromSources(n){const e=this.gl;this._texture=e.createTexture(),e.bindTexture(e.TEXTURE_CUBE_MAP,this._texture);const t=this.getFaceInfos(),a=[];return t.forEach((({target:t,key:r})=>{e.texImage2D(t,this.level,this.internalFormat,this.width,this.height,this.border,this.srcFormat,this.srcType,this.pixel),a.push(this.loadImage(n[r],t))})),Promise.all(a).then((n=>{e.bindTexture(e.TEXTURE_CUBE_MAP,this._texture),n.forEach((({image:n,target:t})=>{e.texImage2D(t,this.level,this.internalFormat,this.width,this.height,this.border,this.srcFormat,this.srcType,n)})),e.generateMipmap(e.TEXTURE_CUBE_MAP),e.texParameteri(e.TEXTURE_CUBE_MAP,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR)})),this._texture}loadImage(n,e){return new Promise((t=>{const a=new Image;a.onload=()=>{this.width=a.width,this.height=a.height,t({image:a,target:e})},a.src=n}))}empty(n,e){const t=this.gl;return this._texture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this._texture),this.data=null,this.targetTextureWidth=n,this.targetTextureHeight=e,t.texImage2D(t.TEXTURE_2D,this.level,this.internalFormat,this.targetTextureWidth,this.targetTextureHeight,this.border,this.srcFormat,this.srcType,this.data),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),this._texture}getFaceInfos(){return[{target:this.gl.TEXTURE_CUBE_MAP_POSITIVE_X,key:"posX"},{target:this.gl.TEXTURE_CUBE_MAP_NEGATIVE_X,key:"negX"},{target:this.gl.TEXTURE_CUBE_MAP_POSITIVE_Y,key:"posY"},{target:this.gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,key:"negY"},{target:this.gl.TEXTURE_CUBE_MAP_POSITIVE_Z,key:"posZ"},{target:this.gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,key:"negZ"}]}}},5288:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default=class{get texture(){return this._texture}constructor(n){this._texture=null,this.gl=null,this.level=0,this.internalFormat=0,this.border=0,this.format=0,this.srcFormat=0,this.type=0,this.data=null,this.srcType=0,this.pixel=null,this.width=0,this.height=0,this.targetTextureWidth=0,this.targetTextureHeight=0,this.gl=n,this.pixel=new Uint8Array([106,163,149,255]),this.internalFormat=this.gl.RGBA,this.format=this.gl.RGBA,this.srcFormat=this.gl.RGBA,this.type=this.gl.UNSIGNED_BYTE,this.srcType=this.gl.UNSIGNED_BYTE}fromUrl(n){const e=this.gl;this._texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this._texture),e.texImage2D(e.TEXTURE_2D,this.level,this.internalFormat,this.width,this.height,this.border,this.srcFormat,this.srcType,this.pixel);const t=new Image;return t.onload=()=>{e.bindTexture(e.TEXTURE_2D,this._texture),e.texImage2D(e.TEXTURE_2D,this.level,this.internalFormat,this.srcFormat,this.srcType,t),this.width=t.width,this.height=t.height,e.generateMipmap(e.TEXTURE_2D),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR)},t.src=n,this._texture}empty(n,e){const t=this.gl;return this._texture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this._texture),this.data=null,this.targetTextureWidth=n,this.targetTextureHeight=e,t.texImage2D(t.TEXTURE_2D,this.level,this.internalFormat,this.targetTextureWidth,this.targetTextureHeight,this.border,this.srcFormat,this.srcType,this.data),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),this._texture}}},3928:(n,e,t)=>{"use strict";t.r(e)},8369:(n,e,t)=>{"use strict";t.r(e)},6253:(n,e,t)=>{"use strict";t.r(e)},3743:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={collapseButton:"collapseButton--GT188",arrowIcon:"arrowIcon--iQk+6",toggle:"toggle--HTFJ2"}},4779:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container---WPdi",inner:"inner--tv6WH"}},2695:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container--cA+s3",header:"header--pNSzZ",title:"title--9XUnQ",value:"value--fNczJ",slider:"slider--hHVHl"}},8350:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container---s1OM"}},5115:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container--2vkvA",title:"title--FEdBW",header:"header--yk+RL",controls:"controls--QcmOR",controlContainer:"controlContainer--Il9RX",backButton:"backButton--gi6Bn"}},3774:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container--ufxm9",value:"value--WirZ-"}},3537:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container--YSnQ2",title:"title--D5qka",description:"description--FwPhC",selected:"selected--1+lE8"}},6044:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={container:"container--ktGur",list:"list--kgy6z",header:"header--DI7xJ"}},189:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});const a={sidebar:"sidebar--+Zb5F",collapsed:"collapsed--rqbuw",button:"button--wrMTs"}},4448:(n,e,t)=>{"use strict";var a=t(7294),r=t(3840);function o(n){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+n,t=1;t<arguments.length;t++)e+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+n+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function c(n,e){s(n,e),s(n+"Capture",e)}function s(n,e){for(l[n]=e,n=0;n<e.length;n++)i.add(e[n])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},v={};function m(n,e,t,a,r,o,i){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=a,this.attributeNamespace=r,this.mustUseProperty=t,this.propertyName=n,this.type=e,this.sanitizeURL=o,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(n){y[n]=new m(n,0,!1,n,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(n){var e=n[0];y[e]=new m(e,1,!1,n[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(n){y[n]=new m(n,2,!1,n.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(n){y[n]=new m(n,2,!1,n,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(n){y[n]=new m(n,3,!1,n.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(n){y[n]=new m(n,3,!0,n,null,!1,!1)})),["capture","download"].forEach((function(n){y[n]=new m(n,4,!1,n,null,!1,!1)})),["cols","rows","size","span"].forEach((function(n){y[n]=new m(n,6,!1,n,null,!1,!1)})),["rowSpan","start"].forEach((function(n){y[n]=new m(n,5,!1,n.toLowerCase(),null,!1,!1)}));var h=/[\-:]([a-z])/g;function x(n){return n[1].toUpperCase()}function g(n,e,t,a){var r=y.hasOwnProperty(e)?y[e]:null;(null!==r?0!==r.type:a||!(2<e.length)||"o"!==e[0]&&"O"!==e[0]||"n"!==e[1]&&"N"!==e[1])&&(function(n,e,t,a){if(null==e||function(n,e,t,a){if(null!==t&&0===t.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!a&&(null!==t?!t.acceptsBooleans:"data-"!==(n=n.toLowerCase().slice(0,5))&&"aria-"!==n);default:return!1}}(n,e,t,a))return!0;if(a)return!1;if(null!==t)switch(t.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,t,r,a)&&(t=null),a||null===r?function(n){return!!f.call(v,n)||!f.call(d,n)&&(p.test(n)?v[n]=!0:(d[n]=!0,!1))}(e)&&(null===t?n.removeAttribute(e):n.setAttribute(e,""+t)):r.mustUseProperty?n[r.propertyName]=null===t?3!==r.type&&"":t:(e=r.attributeName,a=r.attributeNamespace,null===t?n.removeAttribute(e):(t=3===(r=r.type)||4===r&&!0===t?"":""+t,a?n.setAttributeNS(a,e,t):n.setAttribute(e,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(n){var e=n.replace(h,x);y[e]=new m(e,1,!1,n,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(n){var e=n.replace(h,x);y[e]=new m(e,1,!1,n,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(n){var e=n.replace(h,x);y[e]=new m(e,1,!1,n,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(n){y[n]=new m(n,1,!1,n.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(n){y[n]=new m(n,1,!1,n.toLowerCase(),null,!0,!0)}));var b=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=Symbol.for("react.element"),S=Symbol.for("react.portal"),z=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),T=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),D=Symbol.for("react.suspense"),k=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),I=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var N=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var A=Symbol.iterator;function M(n){return null===n||"object"!=typeof n?null:"function"==typeof(n=A&&n[A]||n["@@iterator"])?n:null}var q,R=Object.assign;function F(n){if(void 0===q)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);q=e&&e[1]||""}return"\n"+q+n}var V=!1;function L(n,e){if(!n||V)return"";V=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(n){var a=n}Reflect.construct(n,[],e)}else{try{e.call()}catch(n){a=n}n.call(e.prototype)}else{try{throw Error()}catch(n){a=n}n()}}catch(e){if(e&&a&&"string"==typeof e.stack){for(var r=e.stack.split("\n"),o=a.stack.split("\n"),i=r.length-1,l=o.length-1;1<=i&&0<=l&&r[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(r[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||r[i]!==o[l]){var c="\n"+r[i].replace(" at new "," at ");return n.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",n.displayName)),c}}while(1<=i&&0<=l);break}}}finally{V=!1,Error.prepareStackTrace=t}return(n=n?n.displayName||n.name:"")?F(n):""}function U(n){switch(n.tag){case 5:return F(n.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return L(n.type,!1);case 11:return L(n.type.render,!1);case 1:return L(n.type,!0);default:return""}}function j(n){if(null==n)return null;if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n;switch(n){case z:return"Fragment";case S:return"Portal";case E:return"Profiler";case w:return"StrictMode";case D:return"Suspense";case k:return"SuspenseList"}if("object"==typeof n)switch(n.$$typeof){case T:return(n.displayName||"Context")+".Consumer";case P:return(n._context.displayName||"Context")+".Provider";case C:var e=n.render;return(n=n.displayName)||(n=""!==(n=e.displayName||e.name||"")?"ForwardRef("+n+")":"ForwardRef"),n;case O:return null!==(e=n.displayName||null)?e:j(n.type)||"Memo";case I:e=n._payload,n=n._init;try{return j(n(e))}catch(n){}}return null}function X(n){var e=n.type;switch(n.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return n=(n=e.render).displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(e);case 8:return e===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e}return null}function G(n){switch(typeof n){case"boolean":case"number":case"string":case"undefined":case"object":return n;default:return""}}function B(n){var e=n.type;return(n=n.nodeName)&&"input"===n.toLowerCase()&&("checkbox"===e||"radio"===e)}function H(n){n._valueTracker||(n._valueTracker=function(n){var e=B(n)?"checked":"value",t=Object.getOwnPropertyDescriptor(n.constructor.prototype,e),a=""+n[e];if(!n.hasOwnProperty(e)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var r=t.get,o=t.set;return Object.defineProperty(n,e,{configurable:!0,get:function(){return r.call(this)},set:function(n){a=""+n,o.call(this,n)}}),Object.defineProperty(n,e,{enumerable:t.enumerable}),{getValue:function(){return a},setValue:function(n){a=""+n},stopTracking:function(){n._valueTracker=null,delete n[e]}}}}(n))}function W(n){if(!n)return!1;var e=n._valueTracker;if(!e)return!0;var t=e.getValue(),a="";return n&&(a=B(n)?n.checked?"true":"false":n.value),(n=a)!==t&&(e.setValue(n),!0)}function Y(n){if(void 0===(n=n||("undefined"!=typeof document?document:void 0)))return null;try{return n.activeElement||n.body}catch(e){return n.body}}function $(n,e){var t=e.checked;return R({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:n._wrapperState.initialChecked})}function Q(n,e){var t=null==e.defaultValue?"":e.defaultValue,a=null!=e.checked?e.checked:e.defaultChecked;t=G(null!=e.value?e.value:t),n._wrapperState={initialChecked:a,initialValue:t,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function K(n,e){null!=(e=e.checked)&&g(n,"checked",e,!1)}function Z(n,e){K(n,e);var t=G(e.value),a=e.type;if(null!=t)"number"===a?(0===t&&""===n.value||n.value!=t)&&(n.value=""+t):n.value!==""+t&&(n.value=""+t);else if("submit"===a||"reset"===a)return void n.removeAttribute("value");e.hasOwnProperty("value")?nn(n,e.type,t):e.hasOwnProperty("defaultValue")&&nn(n,e.type,G(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(n.defaultChecked=!!e.defaultChecked)}function J(n,e,t){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var a=e.type;if(!("submit"!==a&&"reset"!==a||void 0!==e.value&&null!==e.value))return;e=""+n._wrapperState.initialValue,t||e===n.value||(n.value=e),n.defaultValue=e}""!==(t=n.name)&&(n.name=""),n.defaultChecked=!!n._wrapperState.initialChecked,""!==t&&(n.name=t)}function nn(n,e,t){"number"===e&&Y(n.ownerDocument)===n||(null==t?n.defaultValue=""+n._wrapperState.initialValue:n.defaultValue!==""+t&&(n.defaultValue=""+t))}var en=Array.isArray;function tn(n,e,t,a){if(n=n.options,e){e={};for(var r=0;r<t.length;r++)e["$"+t[r]]=!0;for(t=0;t<n.length;t++)r=e.hasOwnProperty("$"+n[t].value),n[t].selected!==r&&(n[t].selected=r),r&&a&&(n[t].defaultSelected=!0)}else{for(t=""+G(t),e=null,r=0;r<n.length;r++){if(n[r].value===t)return n[r].selected=!0,void(a&&(n[r].defaultSelected=!0));null!==e||n[r].disabled||(e=n[r])}null!==e&&(e.selected=!0)}}function an(n,e){if(null!=e.dangerouslySetInnerHTML)throw Error(o(91));return R({},e,{value:void 0,defaultValue:void 0,children:""+n._wrapperState.initialValue})}function rn(n,e){var t=e.value;if(null==t){if(t=e.children,e=e.defaultValue,null!=t){if(null!=e)throw Error(o(92));if(en(t)){if(1<t.length)throw Error(o(93));t=t[0]}e=t}null==e&&(e=""),t=e}n._wrapperState={initialValue:G(t)}}function on(n,e){var t=G(e.value),a=G(e.defaultValue);null!=t&&((t=""+t)!==n.value&&(n.value=t),null==e.defaultValue&&n.defaultValue!==t&&(n.defaultValue=t)),null!=a&&(n.defaultValue=""+a)}function ln(n){var e=n.textContent;e===n._wrapperState.initialValue&&""!==e&&null!==e&&(n.value=e)}function cn(n){switch(n){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function sn(n,e){return null==n||"http://www.w3.org/1999/xhtml"===n?cn(e):"http://www.w3.org/2000/svg"===n&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":n}var un,fn,pn=(fn=function(n,e){if("http://www.w3.org/2000/svg"!==n.namespaceURI||"innerHTML"in n)n.innerHTML=e;else{for((un=un||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=un.firstChild;n.firstChild;)n.removeChild(n.firstChild);for(;e.firstChild;)n.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(n,e,t,a){MSApp.execUnsafeLocalFunction((function(){return fn(n,e)}))}:fn);function dn(n,e){if(e){var t=n.firstChild;if(t&&t===n.lastChild&&3===t.nodeType)return void(t.nodeValue=e)}n.textContent=e}var vn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},mn=["Webkit","ms","Moz","O"];function yn(n,e,t){return null==e||"boolean"==typeof e||""===e?"":t||"number"!=typeof e||0===e||vn.hasOwnProperty(n)&&vn[n]?(""+e).trim():e+"px"}function hn(n,e){for(var t in n=n.style,e)if(e.hasOwnProperty(t)){var a=0===t.indexOf("--"),r=yn(t,e[t],a);"float"===t&&(t="cssFloat"),a?n.setProperty(t,r):n[t]=r}}Object.keys(vn).forEach((function(n){mn.forEach((function(e){e=e+n.charAt(0).toUpperCase()+n.substring(1),vn[e]=vn[n]}))}));var xn=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function gn(n,e){if(e){if(xn[n]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(o(137,n));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(o(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(o(62))}}function bn(n,e){if(-1===n.indexOf("-"))return"string"==typeof e.is;switch(n){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _n=null;function Sn(n){return(n=n.target||n.srcElement||window).correspondingUseElement&&(n=n.correspondingUseElement),3===n.nodeType?n.parentNode:n}var zn=null,wn=null,En=null;function Pn(n){if(n=yr(n)){if("function"!=typeof zn)throw Error(o(280));var e=n.stateNode;e&&(e=xr(e),zn(n.stateNode,n.type,e))}}function Tn(n){wn?En?En.push(n):En=[n]:wn=n}function Cn(){if(wn){var n=wn,e=En;if(En=wn=null,Pn(n),e)for(n=0;n<e.length;n++)Pn(e[n])}}function Dn(n,e){return n(e)}function kn(){}var On=!1;function In(n,e,t){if(On)return n(e,t);On=!0;try{return Dn(n,e,t)}finally{On=!1,(null!==wn||null!==En)&&(kn(),Cn())}}function Nn(n,e){var t=n.stateNode;if(null===t)return null;var a=xr(t);if(null===a)return null;t=a[e];n:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(a=!("button"===(n=n.type)||"input"===n||"select"===n||"textarea"===n)),n=!a;break n;default:n=!1}if(n)return null;if(t&&"function"!=typeof t)throw Error(o(231,e,typeof t));return t}var An=!1;if(u)try{var Mn={};Object.defineProperty(Mn,"passive",{get:function(){An=!0}}),window.addEventListener("test",Mn,Mn),window.removeEventListener("test",Mn,Mn)}catch(fn){An=!1}function qn(n,e,t,a,r,o,i,l,c){var s=Array.prototype.slice.call(arguments,3);try{e.apply(t,s)}catch(n){this.onError(n)}}var Rn=!1,Fn=null,Vn=!1,Ln=null,Un={onError:function(n){Rn=!0,Fn=n}};function jn(n,e,t,a,r,o,i,l,c){Rn=!1,Fn=null,qn.apply(Un,arguments)}function Xn(n){var e=n,t=n;if(n.alternate)for(;e.return;)e=e.return;else{n=e;do{0!=(4098&(e=n).flags)&&(t=e.return),n=e.return}while(n)}return 3===e.tag?t:null}function Gn(n){if(13===n.tag){var e=n.memoizedState;if(null===e&&null!==(n=n.alternate)&&(e=n.memoizedState),null!==e)return e.dehydrated}return null}function Bn(n){if(Xn(n)!==n)throw Error(o(188))}function Hn(n){return null!==(n=function(n){var e=n.alternate;if(!e){if(null===(e=Xn(n)))throw Error(o(188));return e!==n?null:n}for(var t=n,a=e;;){var r=t.return;if(null===r)break;var i=r.alternate;if(null===i){if(null!==(a=r.return)){t=a;continue}break}if(r.child===i.child){for(i=r.child;i;){if(i===t)return Bn(r),n;if(i===a)return Bn(r),e;i=i.sibling}throw Error(o(188))}if(t.return!==a.return)t=r,a=i;else{for(var l=!1,c=r.child;c;){if(c===t){l=!0,t=r,a=i;break}if(c===a){l=!0,a=r,t=i;break}c=c.sibling}if(!l){for(c=i.child;c;){if(c===t){l=!0,t=i,a=r;break}if(c===a){l=!0,a=i,t=r;break}c=c.sibling}if(!l)throw Error(o(189))}}if(t.alternate!==a)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?n:e}(n))?Wn(n):null}function Wn(n){if(5===n.tag||6===n.tag)return n;for(n=n.child;null!==n;){var e=Wn(n);if(null!==e)return e;n=n.sibling}return null}var Yn=r.unstable_scheduleCallback,$n=r.unstable_cancelCallback,Qn=r.unstable_shouldYield,Kn=r.unstable_requestPaint,Zn=r.unstable_now,Jn=r.unstable_getCurrentPriorityLevel,ne=r.unstable_ImmediatePriority,ee=r.unstable_UserBlockingPriority,te=r.unstable_NormalPriority,ae=r.unstable_LowPriority,re=r.unstable_IdlePriority,oe=null,ie=null,le=Math.clz32?Math.clz32:function(n){return 0==(n>>>=0)?32:31-(ce(n)/se|0)|0},ce=Math.log,se=Math.LN2,ue=64,fe=4194304;function pe(n){switch(n&-n){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&n;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&n;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return n}}function de(n,e){var t=n.pendingLanes;if(0===t)return 0;var a=0,r=n.suspendedLanes,o=n.pingedLanes,i=268435455&t;if(0!==i){var l=i&~r;0!==l?a=pe(l):0!=(o&=i)&&(a=pe(o))}else 0!=(i=t&~r)?a=pe(i):0!==o&&(a=pe(o));if(0===a)return 0;if(0!==e&&e!==a&&0==(e&r)&&((r=a&-a)>=(o=e&-e)||16===r&&0!=(4194240&o)))return e;if(0!=(4&a)&&(a|=16&t),0!==(e=n.entangledLanes))for(n=n.entanglements,e&=a;0<e;)r=1<<(t=31-le(e)),a|=n[t],e&=~r;return a}function ve(n,e){switch(n){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;default:return-1}}function me(n){return 0!=(n=-1073741825&n.pendingLanes)?n:1073741824&n?1073741824:0}function ye(n){for(var e=[],t=0;31>t;t++)e.push(n);return e}function he(n,e,t){n.pendingLanes|=e,536870912!==e&&(n.suspendedLanes=0,n.pingedLanes=0),(n=n.eventTimes)[e=31-le(e)]=t}function xe(n,e){var t=n.entangledLanes|=e;for(n=n.entanglements;t;){var a=31-le(t),r=1<<a;r&e|n[a]&e&&(n[a]|=e),t&=~r}}var ge=0;function be(n){return 1<(n&=-n)?4<n?0!=(268435455&n)?16:536870912:4:1}var _e,Se,ze,we,Ee,Pe=!1,Te=[],Ce=null,De=null,ke=null,Oe=new Map,Ie=new Map,Ne=[],Ae="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Me(n,e){switch(n){case"focusin":case"focusout":Ce=null;break;case"dragenter":case"dragleave":De=null;break;case"mouseover":case"mouseout":ke=null;break;case"pointerover":case"pointerout":Oe.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ie.delete(e.pointerId)}}function qe(n,e,t,a,r,o){return null===n||n.nativeEvent!==o?(n={blockedOn:e,domEventName:t,eventSystemFlags:a,nativeEvent:o,targetContainers:[r]},null!==e&&null!==(e=yr(e))&&Se(e),n):(n.eventSystemFlags|=a,e=n.targetContainers,null!==r&&-1===e.indexOf(r)&&e.push(r),n)}function Re(n){var e=mr(n.target);if(null!==e){var t=Xn(e);if(null!==t)if(13===(e=t.tag)){if(null!==(e=Gn(t)))return n.blockedOn=e,void Ee(n.priority,(function(){ze(t)}))}else if(3===e&&t.stateNode.current.memoizedState.isDehydrated)return void(n.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}n.blockedOn=null}function Fe(n){if(null!==n.blockedOn)return!1;for(var e=n.targetContainers;0<e.length;){var t=Ye(n.domEventName,n.eventSystemFlags,e[0],n.nativeEvent);if(null!==t)return null!==(e=yr(t))&&Se(e),n.blockedOn=t,!1;var a=new(t=n.nativeEvent).constructor(t.type,t);_n=a,t.target.dispatchEvent(a),_n=null,e.shift()}return!0}function Ve(n,e,t){Fe(n)&&t.delete(e)}function Le(){Pe=!1,null!==Ce&&Fe(Ce)&&(Ce=null),null!==De&&Fe(De)&&(De=null),null!==ke&&Fe(ke)&&(ke=null),Oe.forEach(Ve),Ie.forEach(Ve)}function Ue(n,e){n.blockedOn===e&&(n.blockedOn=null,Pe||(Pe=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Le)))}function je(n){function e(e){return Ue(e,n)}if(0<Te.length){Ue(Te[0],n);for(var t=1;t<Te.length;t++){var a=Te[t];a.blockedOn===n&&(a.blockedOn=null)}}for(null!==Ce&&Ue(Ce,n),null!==De&&Ue(De,n),null!==ke&&Ue(ke,n),Oe.forEach(e),Ie.forEach(e),t=0;t<Ne.length;t++)(a=Ne[t]).blockedOn===n&&(a.blockedOn=null);for(;0<Ne.length&&null===(t=Ne[0]).blockedOn;)Re(t),null===t.blockedOn&&Ne.shift()}var Xe=b.ReactCurrentBatchConfig;function Ge(n,e,t,a){var r=ge,o=Xe.transition;Xe.transition=null;try{ge=1,He(n,e,t,a)}finally{ge=r,Xe.transition=o}}function Be(n,e,t,a){var r=ge,o=Xe.transition;Xe.transition=null;try{ge=4,He(n,e,t,a)}finally{ge=r,Xe.transition=o}}function He(n,e,t,a){var r=Ye(n,e,t,a);if(null===r)ja(n,e,a,We,t),Me(n,a);else if(function(n,e,t,a,r){switch(e){case"focusin":return Ce=qe(Ce,n,e,t,a,r),!0;case"dragenter":return De=qe(De,n,e,t,a,r),!0;case"mouseover":return ke=qe(ke,n,e,t,a,r),!0;case"pointerover":var o=r.pointerId;return Oe.set(o,qe(Oe.get(o)||null,n,e,t,a,r)),!0;case"gotpointercapture":return o=r.pointerId,Ie.set(o,qe(Ie.get(o)||null,n,e,t,a,r)),!0}return!1}(r,n,e,t,a))a.stopPropagation();else if(Me(n,a),4&e&&-1<Ae.indexOf(n)){for(;null!==r;){var o=yr(r);if(null!==o&&_e(o),null===(o=Ye(n,e,t,a))&&ja(n,e,a,We,t),o===r)break;r=o}null!==r&&a.stopPropagation()}else ja(n,e,a,null,t)}var We=null;function Ye(n,e,t,a){if(We=null,null!==(n=mr(n=Sn(a))))if(null===(e=Xn(n)))n=null;else if(13===(t=e.tag)){if(null!==(n=Gn(e)))return n;n=null}else if(3===t){if(e.stateNode.current.memoizedState.isDehydrated)return 3===e.tag?e.stateNode.containerInfo:null;n=null}else e!==n&&(n=null);return We=n,null}function $e(n){switch(n){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Jn()){case ne:return 1;case ee:return 4;case te:case ae:return 16;case re:return 536870912;default:return 16}default:return 16}}var Qe=null,Ke=null,Ze=null;function Je(){if(Ze)return Ze;var n,e,t=Ke,a=t.length,r="value"in Qe?Qe.value:Qe.textContent,o=r.length;for(n=0;n<a&&t[n]===r[n];n++);var i=a-n;for(e=1;e<=i&&t[a-e]===r[o-e];e++);return Ze=r.slice(n,1<e?1-e:void 0)}function nt(n){var e=n.keyCode;return"charCode"in n?0===(n=n.charCode)&&13===e&&(n=13):n=e,10===n&&(n=13),32<=n||13===n?n:0}function et(){return!0}function tt(){return!1}function at(n){function e(e,t,a,r,o){for(var i in this._reactName=e,this._targetInst=a,this.type=t,this.nativeEvent=r,this.target=o,this.currentTarget=null,n)n.hasOwnProperty(i)&&(e=n[i],this[i]=e?e(r):r[i]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?et:tt,this.isPropagationStopped=tt,this}return R(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():"unknown"!=typeof n.returnValue&&(n.returnValue=!1),this.isDefaultPrevented=et)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():"unknown"!=typeof n.cancelBubble&&(n.cancelBubble=!0),this.isPropagationStopped=et)},persist:function(){},isPersistent:et}),e}var rt,ot,it,lt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(n){return n.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=at(lt),st=R({},lt,{view:0,detail:0}),ut=at(st),ft=R({},st,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zt,button:0,buttons:0,relatedTarget:function(n){return void 0===n.relatedTarget?n.fromElement===n.srcElement?n.toElement:n.fromElement:n.relatedTarget},movementX:function(n){return"movementX"in n?n.movementX:(n!==it&&(it&&"mousemove"===n.type?(rt=n.screenX-it.screenX,ot=n.screenY-it.screenY):ot=rt=0,it=n),rt)},movementY:function(n){return"movementY"in n?n.movementY:ot}}),pt=at(ft),dt=at(R({},ft,{dataTransfer:0})),vt=at(R({},st,{relatedTarget:0})),mt=at(R({},lt,{animationName:0,elapsedTime:0,pseudoElement:0})),yt=R({},lt,{clipboardData:function(n){return"clipboardData"in n?n.clipboardData:window.clipboardData}}),ht=at(yt),xt=at(R({},lt,{data:0})),gt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},bt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function St(n){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(n):!!(n=_t[n])&&!!e[n]}function zt(){return St}var wt=R({},st,{key:function(n){if(n.key){var e=gt[n.key]||n.key;if("Unidentified"!==e)return e}return"keypress"===n.type?13===(n=nt(n))?"Enter":String.fromCharCode(n):"keydown"===n.type||"keyup"===n.type?bt[n.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zt,charCode:function(n){return"keypress"===n.type?nt(n):0},keyCode:function(n){return"keydown"===n.type||"keyup"===n.type?n.keyCode:0},which:function(n){return"keypress"===n.type?nt(n):"keydown"===n.type||"keyup"===n.type?n.keyCode:0}}),Et=at(wt),Pt=at(R({},ft,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tt=at(R({},st,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zt})),Ct=at(R({},lt,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dt=R({},ft,{deltaX:function(n){return"deltaX"in n?n.deltaX:"wheelDeltaX"in n?-n.wheelDeltaX:0},deltaY:function(n){return"deltaY"in n?n.deltaY:"wheelDeltaY"in n?-n.wheelDeltaY:"wheelDelta"in n?-n.wheelDelta:0},deltaZ:0,deltaMode:0}),kt=at(Dt),Ot=[9,13,27,32],It=u&&"CompositionEvent"in window,Nt=null;u&&"documentMode"in document&&(Nt=document.documentMode);var At=u&&"TextEvent"in window&&!Nt,Mt=u&&(!It||Nt&&8<Nt&&11>=Nt),qt=String.fromCharCode(32),Rt=!1;function Ft(n,e){switch(n){case"keyup":return-1!==Ot.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vt(n){return"object"==typeof(n=n.detail)&&"data"in n?n.data:null}var Lt=!1,Ut={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function jt(n){var e=n&&n.nodeName&&n.nodeName.toLowerCase();return"input"===e?!!Ut[n.type]:"textarea"===e}function Xt(n,e,t,a){Tn(a),0<(e=Ga(e,"onChange")).length&&(t=new ct("onChange","change",null,t,a),n.push({event:t,listeners:e}))}var Gt=null,Bt=null;function Ht(n){qa(n,0)}function Wt(n){if(W(hr(n)))return n}function Yt(n,e){if("change"===n)return e}var $t=!1;if(u){var Qt;if(u){var Kt="oninput"in document;if(!Kt){var Zt=document.createElement("div");Zt.setAttribute("oninput","return;"),Kt="function"==typeof Zt.oninput}Qt=Kt}else Qt=!1;$t=Qt&&(!document.documentMode||9<document.documentMode)}function Jt(){Gt&&(Gt.detachEvent("onpropertychange",na),Bt=Gt=null)}function na(n){if("value"===n.propertyName&&Wt(Bt)){var e=[];Xt(e,Bt,n,Sn(n)),In(Ht,e)}}function ea(n,e,t){"focusin"===n?(Jt(),Bt=t,(Gt=e).attachEvent("onpropertychange",na)):"focusout"===n&&Jt()}function ta(n){if("selectionchange"===n||"keyup"===n||"keydown"===n)return Wt(Bt)}function aa(n,e){if("click"===n)return Wt(e)}function ra(n,e){if("input"===n||"change"===n)return Wt(e)}var oa="function"==typeof Object.is?Object.is:function(n,e){return n===e&&(0!==n||1/n==1/e)||n!=n&&e!=e};function ia(n,e){if(oa(n,e))return!0;if("object"!=typeof n||null===n||"object"!=typeof e||null===e)return!1;var t=Object.keys(n),a=Object.keys(e);if(t.length!==a.length)return!1;for(a=0;a<t.length;a++){var r=t[a];if(!f.call(e,r)||!oa(n[r],e[r]))return!1}return!0}function la(n){for(;n&&n.firstChild;)n=n.firstChild;return n}function ca(n,e){var t,a=la(n);for(n=0;a;){if(3===a.nodeType){if(t=n+a.textContent.length,n<=e&&t>=e)return{node:a,offset:e-n};n=t}n:{for(;a;){if(a.nextSibling){a=a.nextSibling;break n}a=a.parentNode}a=void 0}a=la(a)}}function sa(n,e){return!(!n||!e)&&(n===e||(!n||3!==n.nodeType)&&(e&&3===e.nodeType?sa(n,e.parentNode):"contains"in n?n.contains(e):!!n.compareDocumentPosition&&!!(16&n.compareDocumentPosition(e))))}function ua(){for(var n=window,e=Y();e instanceof n.HTMLIFrameElement;){try{var t="string"==typeof e.contentWindow.location.href}catch(n){t=!1}if(!t)break;e=Y((n=e.contentWindow).document)}return e}function fa(n){var e=n&&n.nodeName&&n.nodeName.toLowerCase();return e&&("input"===e&&("text"===n.type||"search"===n.type||"tel"===n.type||"url"===n.type||"password"===n.type)||"textarea"===e||"true"===n.contentEditable)}function pa(n){var e=ua(),t=n.focusedElem,a=n.selectionRange;if(e!==t&&t&&t.ownerDocument&&sa(t.ownerDocument.documentElement,t)){if(null!==a&&fa(t))if(e=a.start,void 0===(n=a.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var r=t.textContent.length,o=Math.min(a.start,r);a=void 0===a.end?o:Math.min(a.end,r),!n.extend&&o>a&&(r=a,a=o,o=r),r=ca(t,o);var i=ca(t,a);r&&i&&(1!==n.rangeCount||n.anchorNode!==r.node||n.anchorOffset!==r.offset||n.focusNode!==i.node||n.focusOffset!==i.offset)&&((e=e.createRange()).setStart(r.node,r.offset),n.removeAllRanges(),o>a?(n.addRange(e),n.extend(i.node,i.offset)):(e.setEnd(i.node,i.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var da=u&&"documentMode"in document&&11>=document.documentMode,va=null,ma=null,ya=null,ha=!1;function xa(n,e,t){var a=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;ha||null==va||va!==Y(a)||(a="selectionStart"in(a=va)&&fa(a)?{start:a.selectionStart,end:a.selectionEnd}:{anchorNode:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset},ya&&ia(ya,a)||(ya=a,0<(a=Ga(ma,"onSelect")).length&&(e=new ct("onSelect","select",null,e,t),n.push({event:e,listeners:a}),e.target=va)))}function ga(n,e){var t={};return t[n.toLowerCase()]=e.toLowerCase(),t["Webkit"+n]="webkit"+e,t["Moz"+n]="moz"+e,t}var ba={animationend:ga("Animation","AnimationEnd"),animationiteration:ga("Animation","AnimationIteration"),animationstart:ga("Animation","AnimationStart"),transitionend:ga("Transition","TransitionEnd")},_a={},Sa={};function za(n){if(_a[n])return _a[n];if(!ba[n])return n;var e,t=ba[n];for(e in t)if(t.hasOwnProperty(e)&&e in Sa)return _a[n]=t[e];return n}u&&(Sa=document.createElement("div").style,"AnimationEvent"in window||(delete ba.animationend.animation,delete ba.animationiteration.animation,delete ba.animationstart.animation),"TransitionEvent"in window||delete ba.transitionend.transition);var wa=za("animationend"),Ea=za("animationiteration"),Pa=za("animationstart"),Ta=za("transitionend"),Ca=new Map,Da="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function ka(n,e){Ca.set(n,e),c(e,[n])}for(var Oa=0;Oa<Da.length;Oa++){var Ia=Da[Oa];ka(Ia.toLowerCase(),"on"+(Ia[0].toUpperCase()+Ia.slice(1)))}ka(wa,"onAnimationEnd"),ka(Ea,"onAnimationIteration"),ka(Pa,"onAnimationStart"),ka("dblclick","onDoubleClick"),ka("focusin","onFocus"),ka("focusout","onBlur"),ka(Ta,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Na="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Aa=new Set("cancel close invalid load scroll toggle".split(" ").concat(Na));function Ma(n,e,t){var a=n.type||"unknown-event";n.currentTarget=t,function(n,e,t,a,r,i,l,c,s){if(jn.apply(this,arguments),Rn){if(!Rn)throw Error(o(198));var u=Fn;Rn=!1,Fn=null,Vn||(Vn=!0,Ln=u)}}(a,e,void 0,n),n.currentTarget=null}function qa(n,e){e=0!=(4&e);for(var t=0;t<n.length;t++){var a=n[t],r=a.event;a=a.listeners;n:{var o=void 0;if(e)for(var i=a.length-1;0<=i;i--){var l=a[i],c=l.instance,s=l.currentTarget;if(l=l.listener,c!==o&&r.isPropagationStopped())break n;Ma(r,l,s),o=c}else for(i=0;i<a.length;i++){if(c=(l=a[i]).instance,s=l.currentTarget,l=l.listener,c!==o&&r.isPropagationStopped())break n;Ma(r,l,s),o=c}}}if(Vn)throw n=Ln,Vn=!1,Ln=null,n}function Ra(n,e){var t=e[pr];void 0===t&&(t=e[pr]=new Set);var a=n+"__bubble";t.has(a)||(Ua(e,n,2,!1),t.add(a))}function Fa(n,e,t){var a=0;e&&(a|=4),Ua(t,n,a,e)}var Va="_reactListening"+Math.random().toString(36).slice(2);function La(n){if(!n[Va]){n[Va]=!0,i.forEach((function(e){"selectionchange"!==e&&(Aa.has(e)||Fa(e,!1,n),Fa(e,!0,n))}));var e=9===n.nodeType?n:n.ownerDocument;null===e||e[Va]||(e[Va]=!0,Fa("selectionchange",!1,e))}}function Ua(n,e,t,a){switch($e(e)){case 1:var r=Ge;break;case 4:r=Be;break;default:r=He}t=r.bind(null,e,t,n),r=void 0,!An||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(r=!0),a?void 0!==r?n.addEventListener(e,t,{capture:!0,passive:r}):n.addEventListener(e,t,!0):void 0!==r?n.addEventListener(e,t,{passive:r}):n.addEventListener(e,t,!1)}function ja(n,e,t,a,r){var o=a;if(0==(1&e)&&0==(2&e)&&null!==a)n:for(;;){if(null===a)return;var i=a.tag;if(3===i||4===i){var l=a.stateNode.containerInfo;if(l===r||8===l.nodeType&&l.parentNode===r)break;if(4===i)for(i=a.return;null!==i;){var c=i.tag;if((3===c||4===c)&&((c=i.stateNode.containerInfo)===r||8===c.nodeType&&c.parentNode===r))return;i=i.return}for(;null!==l;){if(null===(i=mr(l)))return;if(5===(c=i.tag)||6===c){a=o=i;continue n}l=l.parentNode}}a=a.return}In((function(){var a=o,r=Sn(t),i=[];n:{var l=Ca.get(n);if(void 0!==l){var c=ct,s=n;switch(n){case"keypress":if(0===nt(t))break n;case"keydown":case"keyup":c=Et;break;case"focusin":s="focus",c=vt;break;case"focusout":s="blur",c=vt;break;case"beforeblur":case"afterblur":c=vt;break;case"click":if(2===t.button)break n;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=pt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=dt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=Tt;break;case wa:case Ea:case Pa:c=mt;break;case Ta:c=Ct;break;case"scroll":c=ut;break;case"wheel":c=kt;break;case"copy":case"cut":case"paste":c=ht;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=Pt}var u=0!=(4&e),f=!u&&"scroll"===n,p=u?null!==l?l+"Capture":null:l;u=[];for(var d,v=a;null!==v;){var m=(d=v).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==p&&null!=(m=Nn(v,p))&&u.push(Xa(v,m,d))),f)break;v=v.return}0<u.length&&(l=new c(l,s,null,t,r),i.push({event:l,listeners:u}))}}if(0==(7&e)){if(c="mouseout"===n||"pointerout"===n,(!(l="mouseover"===n||"pointerover"===n)||t===_n||!(s=t.relatedTarget||t.fromElement)||!mr(s)&&!s[fr])&&(c||l)&&(l=r.window===r?r:(l=r.ownerDocument)?l.defaultView||l.parentWindow:window,c?(c=a,null!==(s=(s=t.relatedTarget||t.toElement)?mr(s):null)&&(s!==(f=Xn(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(c=null,s=a),c!==s)){if(u=pt,m="onMouseLeave",p="onMouseEnter",v="mouse","pointerout"!==n&&"pointerover"!==n||(u=Pt,m="onPointerLeave",p="onPointerEnter",v="pointer"),f=null==c?l:hr(c),d=null==s?l:hr(s),(l=new u(m,v+"leave",c,t,r)).target=f,l.relatedTarget=d,m=null,mr(r)===a&&((u=new u(p,v+"enter",s,t,r)).target=d,u.relatedTarget=f,m=u),f=m,c&&s)n:{for(p=s,v=0,d=u=c;d;d=Ba(d))v++;for(d=0,m=p;m;m=Ba(m))d++;for(;0<v-d;)u=Ba(u),v--;for(;0<d-v;)p=Ba(p),d--;for(;v--;){if(u===p||null!==p&&u===p.alternate)break n;u=Ba(u),p=Ba(p)}u=null}else u=null;null!==c&&Ha(i,l,c,u,!1),null!==s&&null!==f&&Ha(i,f,s,u,!0)}if("select"===(c=(l=a?hr(a):window).nodeName&&l.nodeName.toLowerCase())||"input"===c&&"file"===l.type)var y=Yt;else if(jt(l))if($t)y=ra;else{y=ta;var h=ea}else(c=l.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=aa);switch(y&&(y=y(n,a))?Xt(i,y,t,r):(h&&h(n,l,a),"focusout"===n&&(h=l._wrapperState)&&h.controlled&&"number"===l.type&&nn(l,"number",l.value)),h=a?hr(a):window,n){case"focusin":(jt(h)||"true"===h.contentEditable)&&(va=h,ma=a,ya=null);break;case"focusout":ya=ma=va=null;break;case"mousedown":ha=!0;break;case"contextmenu":case"mouseup":case"dragend":ha=!1,xa(i,t,r);break;case"selectionchange":if(da)break;case"keydown":case"keyup":xa(i,t,r)}var x;if(It)n:{switch(n){case"compositionstart":var g="onCompositionStart";break n;case"compositionend":g="onCompositionEnd";break n;case"compositionupdate":g="onCompositionUpdate";break n}g=void 0}else Lt?Ft(n,t)&&(g="onCompositionEnd"):"keydown"===n&&229===t.keyCode&&(g="onCompositionStart");g&&(Mt&&"ko"!==t.locale&&(Lt||"onCompositionStart"!==g?"onCompositionEnd"===g&&Lt&&(x=Je()):(Ke="value"in(Qe=r)?Qe.value:Qe.textContent,Lt=!0)),0<(h=Ga(a,g)).length&&(g=new xt(g,n,null,t,r),i.push({event:g,listeners:h}),(x||null!==(x=Vt(t)))&&(g.data=x))),(x=At?function(n,e){switch(n){case"compositionend":return Vt(e);case"keypress":return 32!==e.which?null:(Rt=!0,qt);case"textInput":return(n=e.data)===qt&&Rt?null:n;default:return null}}(n,t):function(n,e){if(Lt)return"compositionend"===n||!It&&Ft(n,e)?(n=Je(),Ze=Ke=Qe=null,Lt=!1,n):null;switch(n){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Mt&&"ko"!==e.locale?null:e.data}}(n,t))&&0<(a=Ga(a,"onBeforeInput")).length&&(r=new xt("onBeforeInput","beforeinput",null,t,r),i.push({event:r,listeners:a}),r.data=x)}qa(i,e)}))}function Xa(n,e,t){return{instance:n,listener:e,currentTarget:t}}function Ga(n,e){for(var t=e+"Capture",a=[];null!==n;){var r=n,o=r.stateNode;5===r.tag&&null!==o&&(r=o,null!=(o=Nn(n,t))&&a.unshift(Xa(n,o,r)),null!=(o=Nn(n,e))&&a.push(Xa(n,o,r))),n=n.return}return a}function Ba(n){if(null===n)return null;do{n=n.return}while(n&&5!==n.tag);return n||null}function Ha(n,e,t,a,r){for(var o=e._reactName,i=[];null!==t&&t!==a;){var l=t,c=l.alternate,s=l.stateNode;if(null!==c&&c===a)break;5===l.tag&&null!==s&&(l=s,r?null!=(c=Nn(t,o))&&i.unshift(Xa(t,c,l)):r||null!=(c=Nn(t,o))&&i.push(Xa(t,c,l))),t=t.return}0!==i.length&&n.push({event:e,listeners:i})}var Wa=/\r\n?/g,Ya=/\u0000|\uFFFD/g;function $a(n){return("string"==typeof n?n:""+n).replace(Wa,"\n").replace(Ya,"")}function Qa(n,e,t){if(e=$a(e),$a(n)!==e&&t)throw Error(o(425))}function Ka(){}var Za=null;function Ja(n,e){return"textarea"===n||"noscript"===n||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var nr="function"==typeof setTimeout?setTimeout:void 0,er="function"==typeof clearTimeout?clearTimeout:void 0,tr="function"==typeof Promise?Promise:void 0,ar="function"==typeof queueMicrotask?queueMicrotask:void 0!==tr?function(n){return tr.resolve(null).then(n).catch(rr)}:nr;function rr(n){setTimeout((function(){throw n}))}function or(n,e){var t=e,a=0;do{var r=t.nextSibling;if(n.removeChild(t),r&&8===r.nodeType)if("/$"===(t=r.data)){if(0===a)return n.removeChild(r),void je(e);a--}else"$"!==t&&"$?"!==t&&"$!"!==t||a++;t=r}while(t);je(e)}function ir(n){for(;null!=n;n=n.nextSibling){var e=n.nodeType;if(1===e||3===e)break;if(8===e){if("$"===(e=n.data)||"$!"===e||"$?"===e)break;if("/$"===e)return null}}return n}function lr(n){n=n.previousSibling;for(var e=0;n;){if(8===n.nodeType){var t=n.data;if("$"===t||"$!"===t||"$?"===t){if(0===e)return n;e--}else"/$"===t&&e++}n=n.previousSibling}return null}var cr=Math.random().toString(36).slice(2),sr="__reactFiber$"+cr,ur="__reactProps$"+cr,fr="__reactContainer$"+cr,pr="__reactEvents$"+cr,dr="__reactListeners$"+cr,vr="__reactHandles$"+cr;function mr(n){var e=n[sr];if(e)return e;for(var t=n.parentNode;t;){if(e=t[fr]||t[sr]){if(t=e.alternate,null!==e.child||null!==t&&null!==t.child)for(n=lr(n);null!==n;){if(t=n[sr])return t;n=lr(n)}return e}t=(n=t).parentNode}return null}function yr(n){return!(n=n[sr]||n[fr])||5!==n.tag&&6!==n.tag&&13!==n.tag&&3!==n.tag?null:n}function hr(n){if(5===n.tag||6===n.tag)return n.stateNode;throw Error(o(33))}function xr(n){return n[ur]||null}var gr=[],br=-1;function _r(n){return{current:n}}function Sr(n){0>br||(n.current=gr[br],gr[br]=null,br--)}function zr(n,e){br++,gr[br]=n.current,n.current=e}var wr={},Er=_r(wr),Pr=_r(!1),Tr=wr;function Cr(n,e){var t=n.type.contextTypes;if(!t)return wr;var a=n.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===e)return a.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in t)o[r]=e[r];return a&&((n=n.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,n.__reactInternalMemoizedMaskedChildContext=o),o}function Dr(n){return null!=n.childContextTypes}function kr(){Sr(Pr),Sr(Er)}function Or(n,e,t){if(Er.current!==wr)throw Error(o(168));zr(Er,e),zr(Pr,t)}function Ir(n,e,t){var a=n.stateNode;if(e=e.childContextTypes,"function"!=typeof a.getChildContext)return t;for(var r in a=a.getChildContext())if(!(r in e))throw Error(o(108,X(n)||"Unknown",r));return R({},t,a)}function Nr(n){return n=(n=n.stateNode)&&n.__reactInternalMemoizedMergedChildContext||wr,Tr=Er.current,zr(Er,n),zr(Pr,Pr.current),!0}function Ar(n,e,t){var a=n.stateNode;if(!a)throw Error(o(169));t?(n=Ir(n,e,Tr),a.__reactInternalMemoizedMergedChildContext=n,Sr(Pr),Sr(Er),zr(Er,n)):Sr(Pr),zr(Pr,t)}var Mr=null,qr=!1,Rr=!1;function Fr(n){null===Mr?Mr=[n]:Mr.push(n)}function Vr(){if(!Rr&&null!==Mr){Rr=!0;var n=0,e=ge;try{var t=Mr;for(ge=1;n<t.length;n++){var a=t[n];do{a=a(!0)}while(null!==a)}Mr=null,qr=!1}catch(e){throw null!==Mr&&(Mr=Mr.slice(n+1)),Yn(ne,Vr),e}finally{ge=e,Rr=!1}}return null}var Lr=b.ReactCurrentBatchConfig;function Ur(n,e){if(n&&n.defaultProps){for(var t in e=R({},e),n=n.defaultProps)void 0===e[t]&&(e[t]=n[t]);return e}return e}var jr=_r(null),Xr=null,Gr=null,Br=null;function Hr(){Br=Gr=Xr=null}function Wr(n){var e=jr.current;Sr(jr),n._currentValue=e}function Yr(n,e,t){for(;null!==n;){var a=n.alternate;if((n.childLanes&e)!==e?(n.childLanes|=e,null!==a&&(a.childLanes|=e)):null!==a&&(a.childLanes&e)!==e&&(a.childLanes|=e),n===t)break;n=n.return}}function $r(n,e){Xr=n,Br=Gr=null,null!==(n=n.dependencies)&&null!==n.firstContext&&(0!=(n.lanes&e)&&(hl=!0),n.firstContext=null)}function Qr(n){var e=n._currentValue;if(Br!==n)if(n={context:n,memoizedValue:e,next:null},null===Gr){if(null===Xr)throw Error(o(308));Gr=n,Xr.dependencies={lanes:0,firstContext:n}}else Gr=Gr.next=n;return e}var Kr=null,Zr=!1;function Jr(n){n.updateQueue={baseState:n.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function no(n,e){n=n.updateQueue,e.updateQueue===n&&(e.updateQueue={baseState:n.baseState,firstBaseUpdate:n.firstBaseUpdate,lastBaseUpdate:n.lastBaseUpdate,shared:n.shared,effects:n.effects})}function eo(n,e){return{eventTime:n,lane:e,tag:0,payload:null,callback:null,next:null}}function to(n,e){var t=n.updateQueue;null!==t&&(t=t.shared,null!==hc&&0!=(1&n.mode)&&0==(2&yc)?(null===(n=t.interleaved)?(e.next=e,null===Kr?Kr=[t]:Kr.push(t)):(e.next=n.next,n.next=e),t.interleaved=e):(null===(n=t.pending)?e.next=e:(e.next=n.next,n.next=e),t.pending=e))}function ao(n,e,t){if(null!==(e=e.updateQueue)&&(e=e.shared,0!=(4194240&t))){var a=e.lanes;t|=a&=n.pendingLanes,e.lanes=t,xe(n,t)}}function ro(n,e){var t=n.updateQueue,a=n.alternate;if(null!==a&&t===(a=a.updateQueue)){var r=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?r=o=i:o=o.next=i,t=t.next}while(null!==t);null===o?r=o=e:o=o.next=e}else r=o=e;return t={baseState:a.baseState,firstBaseUpdate:r,lastBaseUpdate:o,shared:a.shared,effects:a.effects},void(n.updateQueue=t)}null===(n=t.lastBaseUpdate)?t.firstBaseUpdate=e:n.next=e,t.lastBaseUpdate=e}function oo(n,e,t,a){var r=n.updateQueue;Zr=!1;var o=r.firstBaseUpdate,i=r.lastBaseUpdate,l=r.shared.pending;if(null!==l){r.shared.pending=null;var c=l,s=c.next;c.next=null,null===i?o=s:i.next=s,i=c;var u=n.alternate;null!==u&&(l=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===l?u.firstBaseUpdate=s:l.next=s,u.lastBaseUpdate=c)}if(null!==o){var f=r.baseState;for(i=0,u=s=c=null,l=o;;){var p=l.lane,d=l.eventTime;if((a&p)===p){null!==u&&(u=u.next={eventTime:d,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});n:{var v=n,m=l;switch(p=e,d=t,m.tag){case 1:if("function"==typeof(v=m.payload)){f=v.call(d,f,p);break n}f=v;break n;case 3:v.flags=-65537&v.flags|128;case 0:if(null==(p="function"==typeof(v=m.payload)?v.call(d,f,p):v))break n;f=R({},f,p);break n;case 2:Zr=!0}}null!==l.callback&&0!==l.lane&&(n.flags|=64,null===(p=r.effects)?r.effects=[l]:p.push(l))}else d={eventTime:d,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===u?(s=u=d,c=f):u=u.next=d,i|=p;if(null===(l=l.next)){if(null===(l=r.shared.pending))break;l=(p=l).next,p.next=null,r.lastBaseUpdate=p,r.shared.pending=null}}if(null===u&&(c=f),r.baseState=c,r.firstBaseUpdate=s,r.lastBaseUpdate=u,null!==(e=r.shared.interleaved)){r=e;do{i|=r.lane,r=r.next}while(r!==e)}else null===o&&(r.shared.lanes=0);wc|=i,n.lanes=i,n.memoizedState=f}}function io(n,e,t){if(n=e.effects,e.effects=null,null!==n)for(e=0;e<n.length;e++){var a=n[e],r=a.callback;if(null!==r){if(a.callback=null,a=t,"function"!=typeof r)throw Error(o(191,r));r.call(a)}}}var lo=(new a.Component).refs;function co(n,e,t,a){t=null==(t=t(a,e=n.memoizedState))?e:R({},e,t),n.memoizedState=t,0===n.lanes&&(n.updateQueue.baseState=t)}var so={isMounted:function(n){return!!(n=n._reactInternals)&&Xn(n)===n},enqueueSetState:function(n,e,t){n=n._reactInternals;var a=Uc(),r=jc(n),o=eo(a,r);o.payload=e,null!=t&&(o.callback=t),to(n,o),null!==(e=Xc(n,r,a))&&ao(e,n,r)},enqueueReplaceState:function(n,e,t){n=n._reactInternals;var a=Uc(),r=jc(n),o=eo(a,r);o.tag=1,o.payload=e,null!=t&&(o.callback=t),to(n,o),null!==(e=Xc(n,r,a))&&ao(e,n,r)},enqueueForceUpdate:function(n,e){n=n._reactInternals;var t=Uc(),a=jc(n),r=eo(t,a);r.tag=2,null!=e&&(r.callback=e),to(n,r),null!==(e=Xc(n,a,t))&&ao(e,n,a)}};function uo(n,e,t,a,r,o,i){return"function"==typeof(n=n.stateNode).shouldComponentUpdate?n.shouldComponentUpdate(a,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&ia(t,a)&&ia(r,o))}function fo(n,e,t){var a=!1,r=wr,o=e.contextType;return"object"==typeof o&&null!==o?o=Qr(o):(r=Dr(e)?Tr:Er.current,o=(a=null!=(a=e.contextTypes))?Cr(n,r):wr),e=new e(t,o),n.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=so,n.stateNode=e,e._reactInternals=n,a&&((n=n.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,n.__reactInternalMemoizedMaskedChildContext=o),e}function po(n,e,t,a){n=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(t,a),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(t,a),e.state!==n&&so.enqueueReplaceState(e,e.state,null)}function vo(n,e,t,a){var r=n.stateNode;r.props=t,r.state=n.memoizedState,r.refs=lo,Jr(n);var o=e.contextType;"object"==typeof o&&null!==o?r.context=Qr(o):(o=Dr(e)?Tr:Er.current,r.context=Cr(n,o)),r.state=n.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(co(n,e,o,t),r.state=n.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(e=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),e!==r.state&&so.enqueueReplaceState(r,r.state,null),oo(n,t,r,a),r.state=n.memoizedState),"function"==typeof r.componentDidMount&&(n.flags|=4194308)}var mo=[],yo=0,ho=null,xo=0,go=[],bo=0,_o=null,So=1,zo="";function wo(n,e){mo[yo++]=xo,mo[yo++]=ho,ho=n,xo=e}function Eo(n,e,t){go[bo++]=So,go[bo++]=zo,go[bo++]=_o,_o=n;var a=So;n=zo;var r=32-le(a)-1;a&=~(1<<r),t+=1;var o=32-le(e)+r;if(30<o){var i=r-r%5;o=(a&(1<<i)-1).toString(32),a>>=i,r-=i,So=1<<32-le(e)+r|t<<r|a,zo=o+n}else So=1<<o|t<<r|a,zo=n}function Po(n){null!==n.return&&(wo(n,1),Eo(n,1,0))}function To(n){for(;n===ho;)ho=mo[--yo],mo[yo]=null,xo=mo[--yo],mo[yo]=null;for(;n===_o;)_o=go[--bo],go[bo]=null,zo=go[--bo],go[bo]=null,So=go[--bo],go[bo]=null}var Co=null,Do=null,ko=!1,Oo=null;function Io(n,e){var t=gs(5,null,null,0);t.elementType="DELETED",t.stateNode=e,t.return=n,null===(e=n.deletions)?(n.deletions=[t],n.flags|=16):e.push(t)}function No(n,e){switch(n.tag){case 5:var t=n.type;return null!==(e=1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(n.stateNode=e,Co=n,Do=ir(e.firstChild),!0);case 6:return null!==(e=""===n.pendingProps||3!==e.nodeType?null:e)&&(n.stateNode=e,Co=n,Do=null,!0);case 13:return null!==(e=8!==e.nodeType?null:e)&&(t=null!==_o?{id:So,overflow:zo}:null,n.memoizedState={dehydrated:e,treeContext:t,retryLane:1073741824},(t=gs(18,null,null,0)).stateNode=e,t.return=n,n.child=t,Co=n,Do=null,!0);default:return!1}}function Ao(n){return 0!=(1&n.mode)&&0==(128&n.flags)}function Mo(n){if(ko){var e=Do;if(e){var t=e;if(!No(n,e)){if(Ao(n))throw Error(o(418));e=ir(t.nextSibling);var a=Co;e&&No(n,e)?Io(a,t):(n.flags=-4097&n.flags|2,ko=!1,Co=n)}}else{if(Ao(n))throw Error(o(418));n.flags=-4097&n.flags|2,ko=!1,Co=n}}}function qo(n){for(n=n.return;null!==n&&5!==n.tag&&3!==n.tag&&13!==n.tag;)n=n.return;Co=n}function Ro(n){if(n!==Co)return!1;if(!ko)return qo(n),ko=!0,!1;var e;if((e=3!==n.tag)&&!(e=5!==n.tag)&&(e="head"!==(e=n.type)&&"body"!==e&&!Ja(n.type,n.memoizedProps)),e&&(e=Do)){if(Ao(n)){for(n=Do;n;)n=ir(n.nextSibling);throw Error(o(418))}for(;e;)Io(n,e),e=ir(e.nextSibling)}if(qo(n),13===n.tag){if(!(n=null!==(n=n.memoizedState)?n.dehydrated:null))throw Error(o(317));n:{for(n=n.nextSibling,e=0;n;){if(8===n.nodeType){var t=n.data;if("/$"===t){if(0===e){Do=ir(n.nextSibling);break n}e--}else"$"!==t&&"$!"!==t&&"$?"!==t||e++}n=n.nextSibling}Do=null}}else Do=Co?ir(n.stateNode.nextSibling):null;return!0}function Fo(){Do=Co=null,ko=!1}function Vo(n){null===Oo?Oo=[n]:Oo.push(n)}function Lo(n,e,t){if(null!==(n=t.ref)&&"function"!=typeof n&&"object"!=typeof n){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var a=t.stateNode}if(!a)throw Error(o(147,n));var r=a,i=""+n;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===i?e.ref:(e=function(n){var e=r.refs;e===lo&&(e=r.refs={}),null===n?delete e[i]:e[i]=n},e._stringRef=i,e)}if("string"!=typeof n)throw Error(o(284));if(!t._owner)throw Error(o(290,n))}return n}function Uo(n,e){throw n=Object.prototype.toString.call(e),Error(o(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n))}function jo(n){return(0,n._init)(n._payload)}function Xo(n){function e(e,t){if(n){var a=e.deletions;null===a?(e.deletions=[t],e.flags|=16):a.push(t)}}function t(t,a){if(!n)return null;for(;null!==a;)e(t,a),a=a.sibling;return null}function a(n,e){for(n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function r(n,e){return(n=_s(n,e)).index=0,n.sibling=null,n}function i(e,t,a){return e.index=a,n?null!==(a=e.alternate)?(a=a.index)<t?(e.flags|=2,t):a:(e.flags|=2,t):(e.flags|=1048576,t)}function l(e){return n&&null===e.alternate&&(e.flags|=2),e}function c(n,e,t,a){return null===e||6!==e.tag?((e=Es(t,n.mode,a)).return=n,e):((e=r(e,t)).return=n,e)}function s(n,e,t,a){var o=t.type;return o===z?f(n,e,t.props.children,a,t.key):null!==e&&(e.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===I&&jo(o)===e.type)?((a=r(e,t.props)).ref=Lo(n,e,t),a.return=n,a):((a=Ss(t.type,t.key,t.props,null,n.mode,a)).ref=Lo(n,e,t),a.return=n,a)}function u(n,e,t,a){return null===e||4!==e.tag||e.stateNode.containerInfo!==t.containerInfo||e.stateNode.implementation!==t.implementation?((e=Ps(t,n.mode,a)).return=n,e):((e=r(e,t.children||[])).return=n,e)}function f(n,e,t,a,o){return null===e||7!==e.tag?((e=zs(t,n.mode,a,o)).return=n,e):((e=r(e,t)).return=n,e)}function p(n,e,t){if("string"==typeof e&&""!==e||"number"==typeof e)return(e=Es(""+e,n.mode,t)).return=n,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case _:return(t=Ss(e.type,e.key,e.props,null,n.mode,t)).ref=Lo(n,null,e),t.return=n,t;case S:return(e=Ps(e,n.mode,t)).return=n,e;case I:return p(n,(0,e._init)(e._payload),t)}if(en(e)||M(e))return(e=zs(e,n.mode,t,null)).return=n,e;Uo(n,e)}return null}function d(n,e,t,a){var r=null!==e?e.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==r?null:c(n,e,""+t,a);if("object"==typeof t&&null!==t){switch(t.$$typeof){case _:return t.key===r?s(n,e,t,a):null;case S:return t.key===r?u(n,e,t,a):null;case I:return d(n,e,(r=t._init)(t._payload),a)}if(en(t)||M(t))return null!==r?null:f(n,e,t,a,null);Uo(n,t)}return null}function v(n,e,t,a,r){if("string"==typeof a&&""!==a||"number"==typeof a)return c(e,n=n.get(t)||null,""+a,r);if("object"==typeof a&&null!==a){switch(a.$$typeof){case _:return s(e,n=n.get(null===a.key?t:a.key)||null,a,r);case S:return u(e,n=n.get(null===a.key?t:a.key)||null,a,r);case I:return v(n,e,t,(0,a._init)(a._payload),r)}if(en(a)||M(a))return f(e,n=n.get(t)||null,a,r,null);Uo(e,a)}return null}function m(r,o,l,c){for(var s=null,u=null,f=o,m=o=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var h=d(r,f,l[m],c);if(null===h){null===f&&(f=y);break}n&&f&&null===h.alternate&&e(r,f),o=i(h,o,m),null===u?s=h:u.sibling=h,u=h,f=y}if(m===l.length)return t(r,f),ko&&wo(r,m),s;if(null===f){for(;m<l.length;m++)null!==(f=p(r,l[m],c))&&(o=i(f,o,m),null===u?s=f:u.sibling=f,u=f);return ko&&wo(r,m),s}for(f=a(r,f);m<l.length;m++)null!==(y=v(f,r,m,l[m],c))&&(n&&null!==y.alternate&&f.delete(null===y.key?m:y.key),o=i(y,o,m),null===u?s=y:u.sibling=y,u=y);return n&&f.forEach((function(n){return e(r,n)})),ko&&wo(r,m),s}function y(r,l,c,s){var u=M(c);if("function"!=typeof u)throw Error(o(150));if(null==(c=u.call(c)))throw Error(o(151));for(var f=u=null,m=l,y=l=0,h=null,x=c.next();null!==m&&!x.done;y++,x=c.next()){m.index>y?(h=m,m=null):h=m.sibling;var g=d(r,m,x.value,s);if(null===g){null===m&&(m=h);break}n&&m&&null===g.alternate&&e(r,m),l=i(g,l,y),null===f?u=g:f.sibling=g,f=g,m=h}if(x.done)return t(r,m),ko&&wo(r,y),u;if(null===m){for(;!x.done;y++,x=c.next())null!==(x=p(r,x.value,s))&&(l=i(x,l,y),null===f?u=x:f.sibling=x,f=x);return ko&&wo(r,y),u}for(m=a(r,m);!x.done;y++,x=c.next())null!==(x=v(m,r,y,x.value,s))&&(n&&null!==x.alternate&&m.delete(null===x.key?y:x.key),l=i(x,l,y),null===f?u=x:f.sibling=x,f=x);return n&&m.forEach((function(n){return e(r,n)})),ko&&wo(r,y),u}return function n(a,o,i,c){if("object"==typeof i&&null!==i&&i.type===z&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case _:n:{for(var s=i.key,u=o;null!==u;){if(u.key===s){if((s=i.type)===z){if(7===u.tag){t(a,u.sibling),(o=r(u,i.props.children)).return=a,a=o;break n}}else if(u.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===I&&jo(s)===u.type){t(a,u.sibling),(o=r(u,i.props)).ref=Lo(a,u,i),o.return=a,a=o;break n}t(a,u);break}e(a,u),u=u.sibling}i.type===z?((o=zs(i.props.children,a.mode,c,i.key)).return=a,a=o):((c=Ss(i.type,i.key,i.props,null,a.mode,c)).ref=Lo(a,o,i),c.return=a,a=c)}return l(a);case S:n:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){t(a,o.sibling),(o=r(o,i.children||[])).return=a,a=o;break n}t(a,o);break}e(a,o),o=o.sibling}(o=Ps(i,a.mode,c)).return=a,a=o}return l(a);case I:return n(a,o,(u=i._init)(i._payload),c)}if(en(i))return m(a,o,i,c);if(M(i))return y(a,o,i,c);Uo(a,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(t(a,o.sibling),(o=r(o,i)).return=a,a=o):(t(a,o),(o=Es(i,a.mode,c)).return=a,a=o),l(a)):t(a,o)}}var Go=Xo(!0),Bo=Xo(!1),Ho={},Wo=_r(Ho),Yo=_r(Ho),$o=_r(Ho);function Qo(n){if(n===Ho)throw Error(o(174));return n}function Ko(n,e){switch(zr($o,e),zr(Yo,n),zr(Wo,Ho),n=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:sn(null,"");break;default:e=sn(e=(n=8===n?e.parentNode:e).namespaceURI||null,n=n.tagName)}Sr(Wo),zr(Wo,e)}function Zo(){Sr(Wo),Sr(Yo),Sr($o)}function Jo(n){Qo($o.current);var e=Qo(Wo.current),t=sn(e,n.type);e!==t&&(zr(Yo,n),zr(Wo,t))}function ni(n){Yo.current===n&&(Sr(Wo),Sr(Yo))}var ei=_r(0);function ti(n){for(var e=n;null!==e;){if(13===e.tag){var t=e.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(128&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var ai=[];function ri(){for(var n=0;n<ai.length;n++)ai[n]._workInProgressVersionPrimary=null;ai.length=0}var oi=b.ReactCurrentDispatcher,ii=b.ReactCurrentBatchConfig,li=0,ci=null,si=null,ui=null,fi=!1,pi=!1,di=0,vi=0;function mi(){throw Error(o(321))}function yi(n,e){if(null===e)return!1;for(var t=0;t<e.length&&t<n.length;t++)if(!oa(n[t],e[t]))return!1;return!0}function hi(n,e,t,a,r,i){if(li=i,ci=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,oi.current=null===n||null===n.memoizedState?Ji:nl,n=t(a,r),pi){i=0;do{if(pi=!1,di=0,25<=i)throw Error(o(301));i+=1,ui=si=null,e.updateQueue=null,oi.current=el,n=t(a,r)}while(pi)}if(oi.current=Zi,e=null!==si&&null!==si.next,li=0,ui=si=ci=null,fi=!1,e)throw Error(o(300));return n}function xi(){var n=0!==di;return di=0,n}function gi(){var n={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ui?ci.memoizedState=ui=n:ui=ui.next=n,ui}function bi(){if(null===si){var n=ci.alternate;n=null!==n?n.memoizedState:null}else n=si.next;var e=null===ui?ci.memoizedState:ui.next;if(null!==e)ui=e,si=n;else{if(null===n)throw Error(o(310));n={memoizedState:(si=n).memoizedState,baseState:si.baseState,baseQueue:si.baseQueue,queue:si.queue,next:null},null===ui?ci.memoizedState=ui=n:ui=ui.next=n}return ui}function _i(n,e){return"function"==typeof e?e(n):e}function Si(n){var e=bi(),t=e.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=n;var a=si,r=a.baseQueue,i=t.pending;if(null!==i){if(null!==r){var l=r.next;r.next=i.next,i.next=l}a.baseQueue=r=i,t.pending=null}if(null!==r){i=r.next,a=a.baseState;var c=l=null,s=null,u=i;do{var f=u.lane;if((li&f)===f)null!==s&&(s=s.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),a=u.hasEagerState?u.eagerState:n(a,u.action);else{var p={lane:f,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===s?(c=s=p,l=a):s=s.next=p,ci.lanes|=f,wc|=f}u=u.next}while(null!==u&&u!==i);null===s?l=a:s.next=c,oa(a,e.memoizedState)||(hl=!0),e.memoizedState=a,e.baseState=l,e.baseQueue=s,t.lastRenderedState=a}if(null!==(n=t.interleaved)){r=n;do{i=r.lane,ci.lanes|=i,wc|=i,r=r.next}while(r!==n)}else null===r&&(t.lanes=0);return[e.memoizedState,t.dispatch]}function zi(n){var e=bi(),t=e.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=n;var a=t.dispatch,r=t.pending,i=e.memoizedState;if(null!==r){t.pending=null;var l=r=r.next;do{i=n(i,l.action),l=l.next}while(l!==r);oa(i,e.memoizedState)||(hl=!0),e.memoizedState=i,null===e.baseQueue&&(e.baseState=i),t.lastRenderedState=i}return[i,a]}function wi(){}function Ei(n,e){var t=ci,a=bi(),r=e(),i=!oa(a.memoizedState,r);if(i&&(a.memoizedState=r,hl=!0),a=a.queue,qi(Ci.bind(null,t,a,n),[n]),a.getSnapshot!==e||i||null!==ui&&1&ui.memoizedState.tag){if(t.flags|=2048,Oi(9,Ti.bind(null,t,a,r,e),void 0,null),null===hc)throw Error(o(349));0!=(30&li)||Pi(t,e,r)}return r}function Pi(n,e,t){n.flags|=16384,n={getSnapshot:e,value:t},null===(e=ci.updateQueue)?(e={lastEffect:null,stores:null},ci.updateQueue=e,e.stores=[n]):null===(t=e.stores)?e.stores=[n]:t.push(n)}function Ti(n,e,t,a){e.value=t,e.getSnapshot=a,Di(e)&&Xc(n,1,-1)}function Ci(n,e,t){return t((function(){Di(e)&&Xc(n,1,-1)}))}function Di(n){var e=n.getSnapshot;n=n.value;try{var t=e();return!oa(n,t)}catch(n){return!0}}function ki(n){var e=gi();return"function"==typeof n&&(n=n()),e.memoizedState=e.baseState=n,n={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:n},e.queue=n,n=n.dispatch=Wi.bind(null,ci,n),[e.memoizedState,n]}function Oi(n,e,t,a){return n={tag:n,create:e,destroy:t,deps:a,next:null},null===(e=ci.updateQueue)?(e={lastEffect:null,stores:null},ci.updateQueue=e,e.lastEffect=n.next=n):null===(t=e.lastEffect)?e.lastEffect=n.next=n:(a=t.next,t.next=n,n.next=a,e.lastEffect=n),n}function Ii(){return bi().memoizedState}function Ni(n,e,t,a){var r=gi();ci.flags|=n,r.memoizedState=Oi(1|e,t,void 0,void 0===a?null:a)}function Ai(n,e,t,a){var r=bi();a=void 0===a?null:a;var o=void 0;if(null!==si){var i=si.memoizedState;if(o=i.destroy,null!==a&&yi(a,i.deps))return void(r.memoizedState=Oi(e,t,o,a))}ci.flags|=n,r.memoizedState=Oi(1|e,t,o,a)}function Mi(n,e){return Ni(8390656,8,n,e)}function qi(n,e){return Ai(2048,8,n,e)}function Ri(n,e){return Ai(4,2,n,e)}function Fi(n,e){return Ai(4,4,n,e)}function Vi(n,e){return"function"==typeof e?(n=n(),e(n),function(){e(null)}):null!=e?(n=n(),e.current=n,function(){e.current=null}):void 0}function Li(n,e,t){return t=null!=t?t.concat([n]):null,Ai(4,4,Vi.bind(null,e,n),t)}function Ui(){}function ji(n,e){var t=bi();e=void 0===e?null:e;var a=t.memoizedState;return null!==a&&null!==e&&yi(e,a[1])?a[0]:(t.memoizedState=[n,e],n)}function Xi(n,e){var t=bi();e=void 0===e?null:e;var a=t.memoizedState;return null!==a&&null!==e&&yi(e,a[1])?a[0]:(n=n(),t.memoizedState=[n,e],n)}function Gi(n,e){var t=ge;ge=0!==t&&4>t?t:4,n(!0);var a=ii.transition;ii.transition={};try{n(!1),e()}finally{ge=t,ii.transition=a}}function Bi(){return bi().memoizedState}function Hi(n,e,t){var a=jc(n);t={lane:a,action:t,hasEagerState:!1,eagerState:null,next:null},Yi(n)?$i(e,t):(Qi(n,e,t),null!==(n=Xc(n,a,t=Uc()))&&Ki(n,e,a))}function Wi(n,e,t){var a=jc(n),r={lane:a,action:t,hasEagerState:!1,eagerState:null,next:null};if(Yi(n))$i(e,r);else{Qi(n,e,r);var o=n.alternate;if(0===n.lanes&&(null===o||0===o.lanes)&&null!==(o=e.lastRenderedReducer))try{var i=e.lastRenderedState,l=o(i,t);if(r.hasEagerState=!0,r.eagerState=l,oa(l,i))return}catch(n){}null!==(n=Xc(n,a,t=Uc()))&&Ki(n,e,a)}}function Yi(n){var e=n.alternate;return n===ci||null!==e&&e===ci}function $i(n,e){pi=fi=!0;var t=n.pending;null===t?e.next=e:(e.next=t.next,t.next=e),n.pending=e}function Qi(n,e,t){null!==hc&&0!=(1&n.mode)&&0==(2&yc)?(null===(n=e.interleaved)?(t.next=t,null===Kr?Kr=[e]:Kr.push(e)):(t.next=n.next,n.next=t),e.interleaved=t):(null===(n=e.pending)?t.next=t:(t.next=n.next,n.next=t),e.pending=t)}function Ki(n,e,t){if(0!=(4194240&t)){var a=e.lanes;t|=a&=n.pendingLanes,e.lanes=t,xe(n,t)}}var Zi={readContext:Qr,useCallback:mi,useContext:mi,useEffect:mi,useImperativeHandle:mi,useInsertionEffect:mi,useLayoutEffect:mi,useMemo:mi,useReducer:mi,useRef:mi,useState:mi,useDebugValue:mi,useDeferredValue:mi,useTransition:mi,useMutableSource:mi,useSyncExternalStore:mi,useId:mi,unstable_isNewReconciler:!1},Ji={readContext:Qr,useCallback:function(n,e){return gi().memoizedState=[n,void 0===e?null:e],n},useContext:Qr,useEffect:Mi,useImperativeHandle:function(n,e,t){return t=null!=t?t.concat([n]):null,Ni(4194308,4,Vi.bind(null,e,n),t)},useLayoutEffect:function(n,e){return Ni(4194308,4,n,e)},useInsertionEffect:function(n,e){return Ni(4,2,n,e)},useMemo:function(n,e){var t=gi();return e=void 0===e?null:e,n=n(),t.memoizedState=[n,e],n},useReducer:function(n,e,t){var a=gi();return e=void 0!==t?t(e):e,a.memoizedState=a.baseState=e,n={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:n,lastRenderedState:e},a.queue=n,n=n.dispatch=Hi.bind(null,ci,n),[a.memoizedState,n]},useRef:function(n){return n={current:n},gi().memoizedState=n},useState:ki,useDebugValue:Ui,useDeferredValue:function(n){var e=ki(n),t=e[0],a=e[1];return Mi((function(){var e=ii.transition;ii.transition={};try{a(n)}finally{ii.transition=e}}),[n]),t},useTransition:function(){var n=ki(!1),e=n[0];return n=Gi.bind(null,n[1]),gi().memoizedState=n,[e,n]},useMutableSource:function(){},useSyncExternalStore:function(n,e,t){var a=ci,r=gi();if(ko){if(void 0===t)throw Error(o(407));t=t()}else{if(t=e(),null===hc)throw Error(o(349));0!=(30&li)||Pi(a,e,t)}r.memoizedState=t;var i={value:t,getSnapshot:e};return r.queue=i,Mi(Ci.bind(null,a,i,n),[n]),a.flags|=2048,Oi(9,Ti.bind(null,a,i,t,e),void 0,null),t},useId:function(){var n=gi(),e=hc.identifierPrefix;if(ko){var t=zo;e=":"+e+"R"+(t=(So&~(1<<32-le(So)-1)).toString(32)+t),0<(t=di++)&&(e+="H"+t.toString(32)),e+=":"}else e=":"+e+"r"+(t=vi++).toString(32)+":";return n.memoizedState=e},unstable_isNewReconciler:!1},nl={readContext:Qr,useCallback:ji,useContext:Qr,useEffect:qi,useImperativeHandle:Li,useInsertionEffect:Ri,useLayoutEffect:Fi,useMemo:Xi,useReducer:Si,useRef:Ii,useState:function(){return Si(_i)},useDebugValue:Ui,useDeferredValue:function(n){var e=Si(_i),t=e[0],a=e[1];return qi((function(){var e=ii.transition;ii.transition={};try{a(n)}finally{ii.transition=e}}),[n]),t},useTransition:function(){return[Si(_i)[0],bi().memoizedState]},useMutableSource:wi,useSyncExternalStore:Ei,useId:Bi,unstable_isNewReconciler:!1},el={readContext:Qr,useCallback:ji,useContext:Qr,useEffect:qi,useImperativeHandle:Li,useInsertionEffect:Ri,useLayoutEffect:Fi,useMemo:Xi,useReducer:zi,useRef:Ii,useState:function(){return zi(_i)},useDebugValue:Ui,useDeferredValue:function(n){var e=zi(_i),t=e[0],a=e[1];return qi((function(){var e=ii.transition;ii.transition={};try{a(n)}finally{ii.transition=e}}),[n]),t},useTransition:function(){return[zi(_i)[0],bi().memoizedState]},useMutableSource:wi,useSyncExternalStore:Ei,useId:Bi,unstable_isNewReconciler:!1};function tl(n,e){try{var t="",a=e;do{t+=U(a),a=a.return}while(a);var r=t}catch(n){r="\nError generating stack: "+n.message+"\n"+n.stack}return{value:n,source:e,stack:r}}function al(n,e){try{console.error(e.value)}catch(n){setTimeout((function(){throw n}))}}var rl,ol,il,ll="function"==typeof WeakMap?WeakMap:Map;function cl(n,e,t){(t=eo(-1,t)).tag=3,t.payload={element:null};var a=e.value;return t.callback=function(){Oc||(Oc=!0,Ic=a),al(0,e)},t}function sl(n,e,t){(t=eo(-1,t)).tag=3;var a=n.type.getDerivedStateFromError;if("function"==typeof a){var r=e.value;t.payload=function(){return a(r)},t.callback=function(){al(0,e)}}var o=n.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){al(0,e),"function"!=typeof a&&(null===Nc?Nc=new Set([this]):Nc.add(this));var n=e.stack;this.componentDidCatch(e.value,{componentStack:null!==n?n:""})}),t}function ul(n,e,t){var a=n.pingCache;if(null===a){a=n.pingCache=new ll;var r=new Set;a.set(e,r)}else void 0===(r=a.get(e))&&(r=new Set,a.set(e,r));r.has(t)||(r.add(t),n=ds.bind(null,n,e,t),e.then(n,n))}function fl(n){do{var e;if((e=13===n.tag)&&(e=null===(e=n.memoizedState)||null!==e.dehydrated),e)return n;n=n.return}while(null!==n);return null}function pl(n,e,t,a,r){return 0==(1&n.mode)?(n===e?n.flags|=65536:(n.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((e=eo(-1,1)).tag=2,to(t,e))),t.lanes|=1),n):(n.flags|=65536,n.lanes=r,n)}function dl(n,e){if(!ko)switch(n.tailMode){case"hidden":e=n.tail;for(var t=null;null!==e;)null!==e.alternate&&(t=e),e=e.sibling;null===t?n.tail=null:t.sibling=null;break;case"collapsed":t=n.tail;for(var a=null;null!==t;)null!==t.alternate&&(a=t),t=t.sibling;null===a?e||null===n.tail?n.tail=null:n.tail.sibling=null:a.sibling=null}}function vl(n){var e=null!==n.alternate&&n.alternate.child===n.child,t=0,a=0;if(e)for(var r=n.child;null!==r;)t|=r.lanes|r.childLanes,a|=14680064&r.subtreeFlags,a|=14680064&r.flags,r.return=n,r=r.sibling;else for(r=n.child;null!==r;)t|=r.lanes|r.childLanes,a|=r.subtreeFlags,a|=r.flags,r.return=n,r=r.sibling;return n.subtreeFlags|=a,n.childLanes=t,e}function ml(n,e,t){var a=e.pendingProps;switch(To(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return vl(e),null;case 1:case 17:return Dr(e.type)&&kr(),vl(e),null;case 3:return a=e.stateNode,Zo(),Sr(Pr),Sr(Er),ri(),a.pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==n&&null!==n.child||(Ro(e)?e.flags|=4:null===n||n.memoizedState.isDehydrated&&0==(256&e.flags)||(e.flags|=1024,null!==Oo&&(Yc(Oo),Oo=null))),vl(e),null;case 5:ni(e);var r=Qo($o.current);if(t=e.type,null!==n&&null!=e.stateNode)ol(n,e,t,a),n.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!a){if(null===e.stateNode)throw Error(o(166));return vl(e),null}if(n=Qo(Wo.current),Ro(e)){a=e.stateNode,t=e.type;var i=e.memoizedProps;switch(a[sr]=e,a[ur]=i,n=0!=(1&e.mode),t){case"dialog":Ra("cancel",a),Ra("close",a);break;case"iframe":case"object":case"embed":Ra("load",a);break;case"video":case"audio":for(r=0;r<Na.length;r++)Ra(Na[r],a);break;case"source":Ra("error",a);break;case"img":case"image":case"link":Ra("error",a),Ra("load",a);break;case"details":Ra("toggle",a);break;case"input":Q(a,i),Ra("invalid",a);break;case"select":a._wrapperState={wasMultiple:!!i.multiple},Ra("invalid",a);break;case"textarea":rn(a,i),Ra("invalid",a)}for(var c in gn(t,i),r=null,i)if(i.hasOwnProperty(c)){var s=i[c];"children"===c?"string"==typeof s?a.textContent!==s&&(Qa(a.textContent,s,n),r=["children",s]):"number"==typeof s&&a.textContent!==""+s&&(Qa(a.textContent,s,n),r=["children",""+s]):l.hasOwnProperty(c)&&null!=s&&"onScroll"===c&&Ra("scroll",a)}switch(t){case"input":H(a),J(a,i,!0);break;case"textarea":H(a),ln(a);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(a.onclick=Ka)}a=r,e.updateQueue=a,null!==a&&(e.flags|=4)}else{c=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===n&&(n=cn(t)),"http://www.w3.org/1999/xhtml"===n?"script"===t?((n=c.createElement("div")).innerHTML="<script><\/script>",n=n.removeChild(n.firstChild)):"string"==typeof a.is?n=c.createElement(t,{is:a.is}):(n=c.createElement(t),"select"===t&&(c=n,a.multiple?c.multiple=!0:a.size&&(c.size=a.size))):n=c.createElementNS(n,t),n[sr]=e,n[ur]=a,rl(n,e),e.stateNode=n;n:{switch(c=bn(t,a),t){case"dialog":Ra("cancel",n),Ra("close",n),r=a;break;case"iframe":case"object":case"embed":Ra("load",n),r=a;break;case"video":case"audio":for(r=0;r<Na.length;r++)Ra(Na[r],n);r=a;break;case"source":Ra("error",n),r=a;break;case"img":case"image":case"link":Ra("error",n),Ra("load",n),r=a;break;case"details":Ra("toggle",n),r=a;break;case"input":Q(n,a),r=$(n,a),Ra("invalid",n);break;case"option":default:r=a;break;case"select":n._wrapperState={wasMultiple:!!a.multiple},r=R({},a,{value:void 0}),Ra("invalid",n);break;case"textarea":rn(n,a),r=an(n,a),Ra("invalid",n)}for(i in gn(t,r),s=r)if(s.hasOwnProperty(i)){var u=s[i];"style"===i?hn(n,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&pn(n,u):"children"===i?"string"==typeof u?("textarea"!==t||""!==u)&&dn(n,u):"number"==typeof u&&dn(n,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Ra("scroll",n):null!=u&&g(n,i,u,c))}switch(t){case"input":H(n),J(n,a,!1);break;case"textarea":H(n),ln(n);break;case"option":null!=a.value&&n.setAttribute("value",""+G(a.value));break;case"select":n.multiple=!!a.multiple,null!=(i=a.value)?tn(n,!!a.multiple,i,!1):null!=a.defaultValue&&tn(n,!!a.multiple,a.defaultValue,!0);break;default:"function"==typeof r.onClick&&(n.onclick=Ka)}switch(t){case"button":case"input":case"select":case"textarea":a=!!a.autoFocus;break n;case"img":a=!0;break n;default:a=!1}}a&&(e.flags|=4)}null!==e.ref&&(e.flags|=512,e.flags|=2097152)}return vl(e),null;case 6:if(n&&null!=e.stateNode)il(0,e,n.memoizedProps,a);else{if("string"!=typeof a&&null===e.stateNode)throw Error(o(166));if(t=Qo($o.current),Qo(Wo.current),Ro(e)){if(a=e.stateNode,t=e.memoizedProps,a[sr]=e,(i=a.nodeValue!==t)&&null!==(n=Co))switch(c=0!=(1&n.mode),n.tag){case 3:Qa(a.nodeValue,t,c);break;case 5:!0!==n.memoizedProps[void 0]&&Qa(a.nodeValue,t,c)}i&&(e.flags|=4)}else(a=(9===t.nodeType?t:t.ownerDocument).createTextNode(a))[sr]=e,e.stateNode=a}return vl(e),null;case 13:if(Sr(ei),a=e.memoizedState,ko&&null!==Do&&0!=(1&e.mode)&&0==(128&e.flags)){for(a=Do;a;)a=ir(a.nextSibling);return Fo(),e.flags|=98560,e}if(null!==a&&null!==a.dehydrated){if(a=Ro(e),null===n){if(!a)throw Error(o(318));if(!(a=null!==(a=e.memoizedState)?a.dehydrated:null))throw Error(o(317));a[sr]=e}else Fo(),0==(128&e.flags)&&(e.memoizedState=null),e.flags|=4;return vl(e),null}return null!==Oo&&(Yc(Oo),Oo=null),0!=(128&e.flags)?(e.lanes=t,e):(a=null!==a,t=!1,null===n?Ro(e):t=null!==n.memoizedState,a&&!t&&(e.child.flags|=8192,0!=(1&e.mode)&&(null===n||0!=(1&ei.current)?0===Sc&&(Sc=3):as())),null!==e.updateQueue&&(e.flags|=4),vl(e),null);case 4:return Zo(),null===n&&La(e.stateNode.containerInfo),vl(e),null;case 10:return Wr(e.type._context),vl(e),null;case 19:if(Sr(ei),null===(i=e.memoizedState))return vl(e),null;if(a=0!=(128&e.flags),null===(c=i.rendering))if(a)dl(i,!1);else{if(0!==Sc||null!==n&&0!=(128&n.flags))for(n=e.child;null!==n;){if(null!==(c=ti(n))){for(e.flags|=128,dl(i,!1),null!==(a=c.updateQueue)&&(e.updateQueue=a,e.flags|=4),e.subtreeFlags=0,a=t,t=e.child;null!==t;)n=a,(i=t).flags&=14680066,null===(c=i.alternate)?(i.childLanes=0,i.lanes=n,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,n=c.dependencies,i.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),t=t.sibling;return zr(ei,1&ei.current|2),e.child}n=n.sibling}null!==i.tail&&Zn()>kc&&(e.flags|=128,a=!0,dl(i,!1),e.lanes=4194304)}else{if(!a)if(null!==(n=ti(c))){if(e.flags|=128,a=!0,null!==(t=n.updateQueue)&&(e.updateQueue=t,e.flags|=4),dl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!ko)return vl(e),null}else 2*Zn()-i.renderingStartTime>kc&&1073741824!==t&&(e.flags|=128,a=!0,dl(i,!1),e.lanes=4194304);i.isBackwards?(c.sibling=e.child,e.child=c):(null!==(t=i.last)?t.sibling=c:e.child=c,i.last=c)}return null!==i.tail?(e=i.tail,i.rendering=e,i.tail=e.sibling,i.renderingStartTime=Zn(),e.sibling=null,t=ei.current,zr(ei,a?1&t|2:1&t),e):(vl(e),null);case 22:case 23:return Jc(),a=null!==e.memoizedState,null!==n&&null!==n.memoizedState!==a&&(e.flags|=8192),a&&0!=(1&e.mode)?0!=(1073741824&bc)&&(vl(e),6&e.subtreeFlags&&(e.flags|=8192)):vl(e),null;case 24:case 25:return null}throw Error(o(156,e.tag))}rl=function(n,e){for(var t=e.child;null!==t;){if(5===t.tag||6===t.tag)n.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},ol=function(n,e,t,a){var r=n.memoizedProps;if(r!==a){n=e.stateNode,Qo(Wo.current);var o,i=null;switch(t){case"input":r=$(n,r),a=$(n,a),i=[];break;case"select":r=R({},r,{value:void 0}),a=R({},a,{value:void 0}),i=[];break;case"textarea":r=an(n,r),a=an(n,a),i=[];break;default:"function"!=typeof r.onClick&&"function"==typeof a.onClick&&(n.onclick=Ka)}for(u in gn(t,a),t=null,r)if(!a.hasOwnProperty(u)&&r.hasOwnProperty(u)&&null!=r[u])if("style"===u){var c=r[u];for(o in c)c.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in a){var s=a[u];if(c=null!=r?r[u]:void 0,a.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(o in c)!c.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in s)s.hasOwnProperty(o)&&c[o]!==s[o]&&(t||(t={}),t[o]=s[o])}else t||(i||(i=[]),i.push(u,t)),t=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(i=i||[]).push(u,s)):"children"===u?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(l.hasOwnProperty(u)?(null!=s&&"onScroll"===u&&Ra("scroll",n),i||c===s||(i=[])):(i=i||[]).push(u,s))}t&&(i=i||[]).push("style",t);var u=i;(e.updateQueue=u)&&(e.flags|=4)}},il=function(n,e,t,a){t!==a&&(e.flags|=4)};var yl=b.ReactCurrentOwner,hl=!1;function xl(n,e,t,a){e.child=null===n?Bo(e,null,t,a):Go(e,n.child,t,a)}function gl(n,e,t,a,r){t=t.render;var o=e.ref;return $r(e,r),a=hi(n,e,t,a,o,r),t=xi(),null===n||hl?(ko&&t&&Po(e),e.flags|=1,xl(n,e,a,r),e.child):(e.updateQueue=n.updateQueue,e.flags&=-2053,n.lanes&=~r,Vl(n,e,r))}function bl(n,e,t,a,r){if(null===n){var o=t.type;return"function"!=typeof o||bs(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((n=Ss(t.type,null,a,e,e.mode,r)).ref=e.ref,n.return=e,e.child=n):(e.tag=15,e.type=o,_l(n,e,o,a,r))}if(o=n.child,0==(n.lanes&r)){var i=o.memoizedProps;if((t=null!==(t=t.compare)?t:ia)(i,a)&&n.ref===e.ref)return Vl(n,e,r)}return e.flags|=1,(n=_s(o,a)).ref=e.ref,n.return=e,e.child=n}function _l(n,e,t,a,r){if(null!==n&&ia(n.memoizedProps,a)&&n.ref===e.ref){if(hl=!1,0==(n.lanes&r))return e.lanes=n.lanes,Vl(n,e,r);0!=(131072&n.flags)&&(hl=!0)}return wl(n,e,t,a,r)}function Sl(n,e,t){var a=e.pendingProps,r=a.children,o=null!==n?n.memoizedState:null;if("hidden"===a.mode)if(0==(1&e.mode))e.memoizedState={baseLanes:0,cachePool:null},zr(_c,bc),bc|=t;else{if(0==(1073741824&t))return n=null!==o?o.baseLanes|t:t,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:n,cachePool:null},e.updateQueue=null,zr(_c,bc),bc|=n,null;e.memoizedState={baseLanes:0,cachePool:null},a=null!==o?o.baseLanes:t,zr(_c,bc),bc|=a}else null!==o?(a=o.baseLanes|t,e.memoizedState=null):a=t,zr(_c,bc),bc|=a;return xl(n,e,r,t),e.child}function zl(n,e){var t=e.ref;(null===n&&null!==t||null!==n&&n.ref!==t)&&(e.flags|=512,e.flags|=2097152)}function wl(n,e,t,a,r){var o=Dr(t)?Tr:Er.current;return o=Cr(e,o),$r(e,r),t=hi(n,e,t,a,o,r),a=xi(),null===n||hl?(ko&&a&&Po(e),e.flags|=1,xl(n,e,t,r),e.child):(e.updateQueue=n.updateQueue,e.flags&=-2053,n.lanes&=~r,Vl(n,e,r))}function El(n,e,t,a,r){if(Dr(t)){var o=!0;Nr(e)}else o=!1;if($r(e,r),null===e.stateNode)null!==n&&(n.alternate=null,e.alternate=null,e.flags|=2),fo(e,t,a),vo(e,t,a,r),a=!0;else if(null===n){var i=e.stateNode,l=e.memoizedProps;i.props=l;var c=i.context,s=t.contextType;s="object"==typeof s&&null!==s?Qr(s):Cr(e,s=Dr(t)?Tr:Er.current);var u=t.getDerivedStateFromProps,f="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==a||c!==s)&&po(e,i,a,s),Zr=!1;var p=e.memoizedState;i.state=p,oo(e,a,i,r),c=e.memoizedState,l!==a||p!==c||Pr.current||Zr?("function"==typeof u&&(co(e,t,u,a),c=e.memoizedState),(l=Zr||uo(e,t,l,a,p,c,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(e.flags|=4194308)):("function"==typeof i.componentDidMount&&(e.flags|=4194308),e.memoizedProps=a,e.memoizedState=c),i.props=a,i.state=c,i.context=s,a=l):("function"==typeof i.componentDidMount&&(e.flags|=4194308),a=!1)}else{i=e.stateNode,no(n,e),l=e.memoizedProps,s=e.type===e.elementType?l:Ur(e.type,l),i.props=s,f=e.pendingProps,p=i.context,c="object"==typeof(c=t.contextType)&&null!==c?Qr(c):Cr(e,c=Dr(t)?Tr:Er.current);var d=t.getDerivedStateFromProps;(u="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||p!==c)&&po(e,i,a,c),Zr=!1,p=e.memoizedState,i.state=p,oo(e,a,i,r);var v=e.memoizedState;l!==f||p!==v||Pr.current||Zr?("function"==typeof d&&(co(e,t,d,a),v=e.memoizedState),(s=Zr||uo(e,t,s,a,p,v,c)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(a,v,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(a,v,c)),"function"==typeof i.componentDidUpdate&&(e.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(e.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===n.memoizedProps&&p===n.memoizedState||(e.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===n.memoizedProps&&p===n.memoizedState||(e.flags|=1024),e.memoizedProps=a,e.memoizedState=v),i.props=a,i.state=v,i.context=c,a=s):("function"!=typeof i.componentDidUpdate||l===n.memoizedProps&&p===n.memoizedState||(e.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===n.memoizedProps&&p===n.memoizedState||(e.flags|=1024),a=!1)}return Pl(n,e,t,a,o,r)}function Pl(n,e,t,a,r,o){zl(n,e);var i=0!=(128&e.flags);if(!a&&!i)return r&&Ar(e,t,!1),Vl(n,e,o);a=e.stateNode,yl.current=e;var l=i&&"function"!=typeof t.getDerivedStateFromError?null:a.render();return e.flags|=1,null!==n&&i?(e.child=Go(e,n.child,null,o),e.child=Go(e,null,l,o)):xl(n,e,l,o),e.memoizedState=a.state,r&&Ar(e,t,!0),e.child}function Tl(n){var e=n.stateNode;e.pendingContext?Or(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Or(0,e.context,!1),Ko(n,e.containerInfo)}function Cl(n,e,t,a,r){return Fo(),Vo(r),e.flags|=256,xl(n,e,t,a),e.child}var Dl={dehydrated:null,treeContext:null,retryLane:0};function kl(n){return{baseLanes:n,cachePool:null}}function Ol(n,e,t){var a,r=e.pendingProps,i=ei.current,l=!1,c=0!=(128&e.flags);if((a=c)||(a=(null===n||null!==n.memoizedState)&&0!=(2&i)),a?(l=!0,e.flags&=-129):null!==n&&null===n.memoizedState||(i|=1),zr(ei,1&i),null===n)return Mo(e),null!==(n=e.memoizedState)&&null!==(n=n.dehydrated)?(0==(1&e.mode)?e.lanes=1:"$!"===n.data?e.lanes=8:e.lanes=1073741824,null):(i=r.children,n=r.fallback,l?(r=e.mode,l=e.child,i={mode:"hidden",children:i},0==(1&r)&&null!==l?(l.childLanes=0,l.pendingProps=i):l=ws(i,r,0,null),n=zs(n,r,t,null),l.return=e,n.return=e,l.sibling=n,e.child=l,e.child.memoizedState=kl(t),e.memoizedState=Dl,n):Il(e,i));if(null!==(i=n.memoizedState)){if(null!==(a=i.dehydrated)){if(c)return 256&e.flags?(e.flags&=-257,Ml(n,e,t,Error(o(422)))):null!==e.memoizedState?(e.child=n.child,e.flags|=128,null):(l=r.fallback,i=e.mode,r=ws({mode:"visible",children:r.children},i,0,null),(l=zs(l,i,t,null)).flags|=2,r.return=e,l.return=e,r.sibling=l,e.child=r,0!=(1&e.mode)&&Go(e,n.child,null,t),e.child.memoizedState=kl(t),e.memoizedState=Dl,l);if(0==(1&e.mode))e=Ml(n,e,t,null);else if("$!"===a.data)e=Ml(n,e,t,Error(o(419)));else if(r=0!=(t&n.childLanes),hl||r){if(null!==(r=hc)){switch(t&-t){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(r=0!=(l&(r.suspendedLanes|t))?0:l)&&r!==i.retryLane&&(i.retryLane=r,Xc(n,r,-1))}as(),e=Ml(n,e,t,Error(o(421)))}else"$?"===a.data?(e.flags|=128,e.child=n.child,e=ms.bind(null,n),a._reactRetry=e,e=null):(t=i.treeContext,Do=ir(a.nextSibling),Co=e,ko=!0,Oo=null,null!==t&&(go[bo++]=So,go[bo++]=zo,go[bo++]=_o,So=t.id,zo=t.overflow,_o=e),(e=Il(e,e.pendingProps.children)).flags|=4096);return e}return l?(r=Al(n,e,r.children,r.fallback,t),l=e.child,i=n.child.memoizedState,l.memoizedState=null===i?kl(t):{baseLanes:i.baseLanes|t,cachePool:null},l.childLanes=n.childLanes&~t,e.memoizedState=Dl,r):(t=Nl(n,e,r.children,t),e.memoizedState=null,t)}return l?(r=Al(n,e,r.children,r.fallback,t),l=e.child,i=n.child.memoizedState,l.memoizedState=null===i?kl(t):{baseLanes:i.baseLanes|t,cachePool:null},l.childLanes=n.childLanes&~t,e.memoizedState=Dl,r):(t=Nl(n,e,r.children,t),e.memoizedState=null,t)}function Il(n,e){return(e=ws({mode:"visible",children:e},n.mode,0,null)).return=n,n.child=e}function Nl(n,e,t,a){var r=n.child;return n=r.sibling,t=_s(r,{mode:"visible",children:t}),0==(1&e.mode)&&(t.lanes=a),t.return=e,t.sibling=null,null!==n&&(null===(a=e.deletions)?(e.deletions=[n],e.flags|=16):a.push(n)),e.child=t}function Al(n,e,t,a,r){var o=e.mode,i=(n=n.child).sibling,l={mode:"hidden",children:t};return 0==(1&o)&&e.child!==n?((t=e.child).childLanes=0,t.pendingProps=l,e.deletions=null):(t=_s(n,l)).subtreeFlags=14680064&n.subtreeFlags,null!==i?a=_s(i,a):(a=zs(a,o,r,null)).flags|=2,a.return=e,t.return=e,t.sibling=a,e.child=t,a}function Ml(n,e,t,a){return null!==a&&Vo(a),Go(e,n.child,null,t),(n=Il(e,e.pendingProps.children)).flags|=2,e.memoizedState=null,n}function ql(n,e,t){n.lanes|=e;var a=n.alternate;null!==a&&(a.lanes|=e),Yr(n.return,e,t)}function Rl(n,e,t,a,r){var o=n.memoizedState;null===o?n.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:a,tail:t,tailMode:r}:(o.isBackwards=e,o.rendering=null,o.renderingStartTime=0,o.last=a,o.tail=t,o.tailMode=r)}function Fl(n,e,t){var a=e.pendingProps,r=a.revealOrder,o=a.tail;if(xl(n,e,a.children,t),0!=(2&(a=ei.current)))a=1&a|2,e.flags|=128;else{if(null!==n&&0!=(128&n.flags))n:for(n=e.child;null!==n;){if(13===n.tag)null!==n.memoizedState&&ql(n,t,e);else if(19===n.tag)ql(n,t,e);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break n;for(;null===n.sibling;){if(null===n.return||n.return===e)break n;n=n.return}n.sibling.return=n.return,n=n.sibling}a&=1}if(zr(ei,a),0==(1&e.mode))e.memoizedState=null;else switch(r){case"forwards":for(t=e.child,r=null;null!==t;)null!==(n=t.alternate)&&null===ti(n)&&(r=t),t=t.sibling;null===(t=r)?(r=e.child,e.child=null):(r=t.sibling,t.sibling=null),Rl(e,!1,r,t,o);break;case"backwards":for(t=null,r=e.child,e.child=null;null!==r;){if(null!==(n=r.alternate)&&null===ti(n)){e.child=r;break}n=r.sibling,r.sibling=t,t=r,r=n}Rl(e,!0,t,null,o);break;case"together":Rl(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Vl(n,e,t){if(null!==n&&(e.dependencies=n.dependencies),wc|=e.lanes,0==(t&e.childLanes))return null;if(null!==n&&e.child!==n.child)throw Error(o(153));if(null!==e.child){for(t=_s(n=e.child,n.pendingProps),e.child=t,t.return=e;null!==n.sibling;)n=n.sibling,(t=t.sibling=_s(n,n.pendingProps)).return=e;t.sibling=null}return e.child}function Ll(n,e){switch(To(e),e.tag){case 1:return Dr(e.type)&&kr(),65536&(n=e.flags)?(e.flags=-65537&n|128,e):null;case 3:return Zo(),Sr(Pr),Sr(Er),ri(),0!=(65536&(n=e.flags))&&0==(128&n)?(e.flags=-65537&n|128,e):null;case 5:return ni(e),null;case 13:if(Sr(ei),null!==(n=e.memoizedState)&&null!==n.dehydrated){if(null===e.alternate)throw Error(o(340));Fo()}return 65536&(n=e.flags)?(e.flags=-65537&n|128,e):null;case 19:return Sr(ei),null;case 4:return Zo(),null;case 10:return Wr(e.type._context),null;case 22:case 23:return Jc(),null;default:return null}}var Ul=!1,jl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Gl=null;function Bl(n,e){var t=n.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ps(n,e,t)}else t.current=null}function Hl(n,e,t){try{t()}catch(t){ps(n,e,t)}}var Wl=!1;function Yl(n,e,t){var a=e.updateQueue;if(null!==(a=null!==a?a.lastEffect:null)){var r=a=a.next;do{if((r.tag&n)===n){var o=r.destroy;r.destroy=void 0,void 0!==o&&Hl(e,t,o)}r=r.next}while(r!==a)}}function $l(n,e){if(null!==(e=null!==(e=e.updateQueue)?e.lastEffect:null)){var t=e=e.next;do{if((t.tag&n)===n){var a=t.create;t.destroy=a()}t=t.next}while(t!==e)}}function Ql(n){var e=n.ref;if(null!==e){var t=n.stateNode;n.tag,n=t,"function"==typeof e?e(n):e.current=n}}function Kl(n,e,t){if(ie&&"function"==typeof ie.onCommitFiberUnmount)try{ie.onCommitFiberUnmount(oe,e)}catch(n){}switch(e.tag){case 0:case 11:case 14:case 15:if(null!==(n=e.updateQueue)&&null!==(n=n.lastEffect)){var a=n=n.next;do{var r=a,o=r.destroy;r=r.tag,void 0!==o&&(0!=(2&r)||0!=(4&r))&&Hl(e,t,o),a=a.next}while(a!==n)}break;case 1:if(Bl(e,t),"function"==typeof(n=e.stateNode).componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){ps(e,t,n)}break;case 5:Bl(e,t);break;case 4:rc(n,e,t)}}function Zl(n){var e=n.alternate;null!==e&&(n.alternate=null,Zl(e)),n.child=null,n.deletions=null,n.sibling=null,5===n.tag&&null!==(e=n.stateNode)&&(delete e[sr],delete e[ur],delete e[pr],delete e[dr],delete e[vr]),n.stateNode=null,n.return=null,n.dependencies=null,n.memoizedProps=null,n.memoizedState=null,n.pendingProps=null,n.stateNode=null,n.updateQueue=null}function Jl(n){return 5===n.tag||3===n.tag||4===n.tag}function nc(n){n:for(;;){for(;null===n.sibling;){if(null===n.return||Jl(n.return))return null;n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue n;if(null===n.child||4===n.tag)continue n;n.child.return=n,n=n.child}if(!(2&n.flags))return n.stateNode}}function ec(n){n:{for(var e=n.return;null!==e;){if(Jl(e))break n;e=e.return}throw Error(o(160))}var t=e;switch(t.tag){case 5:e=t.stateNode,32&t.flags&&(dn(e,""),t.flags&=-33),ac(n,t=nc(n),e);break;case 3:case 4:e=t.stateNode.containerInfo,tc(n,t=nc(n),e);break;default:throw Error(o(161))}}function tc(n,e,t){var a=n.tag;if(5===a||6===a)n=n.stateNode,e?8===t.nodeType?t.parentNode.insertBefore(n,e):t.insertBefore(n,e):(8===t.nodeType?(e=t.parentNode).insertBefore(n,t):(e=t).appendChild(n),null!=(t=t._reactRootContainer)||null!==e.onclick||(e.onclick=Ka));else if(4!==a&&null!==(n=n.child))for(tc(n,e,t),n=n.sibling;null!==n;)tc(n,e,t),n=n.sibling}function ac(n,e,t){var a=n.tag;if(5===a||6===a)n=n.stateNode,e?t.insertBefore(n,e):t.appendChild(n);else if(4!==a&&null!==(n=n.child))for(ac(n,e,t),n=n.sibling;null!==n;)ac(n,e,t),n=n.sibling}function rc(n,e,t){for(var a,r,i=e,l=!1;;){if(!l){l=i.return;n:for(;;){if(null===l)throw Error(o(160));switch(a=l.stateNode,l.tag){case 5:r=!1;break n;case 3:case 4:a=a.containerInfo,r=!0;break n}l=l.return}l=!0}if(5===i.tag||6===i.tag){n:for(var c=n,s=i,u=t,f=s;;)if(Kl(c,f,u),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break n;for(;null===f.sibling;){if(null===f.return||f.return===s)break n;f=f.return}f.sibling.return=f.return,f=f.sibling}r?(c=a,s=i.stateNode,8===c.nodeType?c.parentNode.removeChild(s):c.removeChild(s)):a.removeChild(i.stateNode)}else if(18===i.tag)r?(c=a,s=i.stateNode,8===c.nodeType?or(c.parentNode,s):1===c.nodeType&&or(c,s),je(c)):or(a,i.stateNode);else if(4===i.tag){if(null!==i.child){a=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(Kl(n,i,t),null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function oc(n,e){switch(e.tag){case 0:case 11:case 14:case 15:return Yl(3,e,e.return),$l(3,e),void Yl(5,e,e.return);case 1:case 12:case 17:return;case 5:var t=e.stateNode;if(null!=t){var a=e.memoizedProps,r=null!==n?n.memoizedProps:a;n=e.type;var i=e.updateQueue;if(e.updateQueue=null,null!==i){for("input"===n&&"radio"===a.type&&null!=a.name&&K(t,a),bn(n,r),e=bn(n,a),r=0;r<i.length;r+=2){var l=i[r],c=i[r+1];"style"===l?hn(t,c):"dangerouslySetInnerHTML"===l?pn(t,c):"children"===l?dn(t,c):g(t,l,c,e)}switch(n){case"input":Z(t,a);break;case"textarea":on(t,a);break;case"select":n=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!a.multiple,null!=(i=a.value)?tn(t,!!a.multiple,i,!1):n!==!!a.multiple&&(null!=a.defaultValue?tn(t,!!a.multiple,a.defaultValue,!0):tn(t,!!a.multiple,a.multiple?[]:"",!1))}t[ur]=a}}return;case 6:if(null===e.stateNode)throw Error(o(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void(null!==n&&n.memoizedState.isDehydrated&&je(e.stateNode.containerInfo));case 13:case 19:return void function(n){var e=n.updateQueue;if(null!==e){n.updateQueue=null;var t=n.stateNode;null===t&&(t=n.stateNode=new Xl),e.forEach((function(e){var a=ys.bind(null,n,e);t.has(e)||(t.add(e),e.then(a,a))}))}}(e)}throw Error(o(163))}function ic(n,e,t){Gl=n,lc(n,e,t)}function lc(n,e,t){for(var a=0!=(1&n.mode);null!==Gl;){var r=Gl,o=r.child;if(22===r.tag&&a){var i=null!==r.memoizedState||Ul;if(!i){var l=r.alternate,c=null!==l&&null!==l.memoizedState||jl;l=Ul;var s=jl;if(Ul=i,(jl=c)&&!s)for(Gl=r;null!==Gl;)c=(i=Gl).child,22===i.tag&&null!==i.memoizedState?uc(r):null!==c?(c.return=i,Gl=c):uc(r);for(;null!==o;)Gl=o,lc(o,e,t),o=o.sibling;Gl=r,Ul=l,jl=s}cc(n)}else 0!=(8772&r.subtreeFlags)&&null!==o?(o.return=r,Gl=o):cc(n)}}function cc(n){for(;null!==Gl;){var e=Gl;if(0!=(8772&e.flags)){var t=e.alternate;try{if(0!=(8772&e.flags))switch(e.tag){case 0:case 11:case 15:jl||$l(5,e);break;case 1:var a=e.stateNode;if(4&e.flags&&!jl)if(null===t)a.componentDidMount();else{var r=e.elementType===e.type?t.memoizedProps:Ur(e.type,t.memoizedProps);a.componentDidUpdate(r,t.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}var i=e.updateQueue;null!==i&&io(e,i,a);break;case 3:var l=e.updateQueue;if(null!==l){if(t=null,null!==e.child)switch(e.child.tag){case 5:case 1:t=e.child.stateNode}io(e,l,t)}break;case 5:var c=e.stateNode;if(null===t&&4&e.flags){t=c;var s=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&t.focus();break;case"img":s.src&&(t.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===e.memoizedState){var u=e.alternate;if(null!==u){var f=u.memoizedState;if(null!==f){var p=f.dehydrated;null!==p&&je(p)}}}break;default:throw Error(o(163))}jl||512&e.flags&&Ql(e)}catch(n){ps(e,e.return,n)}}if(e===n){Gl=null;break}if(null!==(t=e.sibling)){t.return=e.return,Gl=t;break}Gl=e.return}}function sc(n){for(;null!==Gl;){var e=Gl;if(e===n){Gl=null;break}var t=e.sibling;if(null!==t){t.return=e.return,Gl=t;break}Gl=e.return}}function uc(n){for(;null!==Gl;){var e=Gl;try{switch(e.tag){case 0:case 11:case 15:var t=e.return;try{$l(4,e)}catch(n){ps(e,t,n)}break;case 1:var a=e.stateNode;if("function"==typeof a.componentDidMount){var r=e.return;try{a.componentDidMount()}catch(n){ps(e,r,n)}}var o=e.return;try{Ql(e)}catch(n){ps(e,o,n)}break;case 5:var i=e.return;try{Ql(e)}catch(n){ps(e,i,n)}}}catch(n){ps(e,e.return,n)}if(e===n){Gl=null;break}var l=e.sibling;if(null!==l){l.return=e.return,Gl=l;break}Gl=e.return}}var fc,pc=Math.ceil,dc=b.ReactCurrentDispatcher,vc=b.ReactCurrentOwner,mc=b.ReactCurrentBatchConfig,yc=0,hc=null,xc=null,gc=0,bc=0,_c=_r(0),Sc=0,zc=null,wc=0,Ec=0,Pc=0,Tc=null,Cc=null,Dc=0,kc=1/0,Oc=!1,Ic=null,Nc=null,Ac=!1,Mc=null,qc=0,Rc=0,Fc=null,Vc=-1,Lc=0;function Uc(){return 0!=(6&yc)?Zn():-1!==Vc?Vc:Vc=Zn()}function jc(n){return 0==(1&n.mode)?1:0!=(2&yc)&&0!==gc?gc&-gc:null!==Lr.transition?(0===Lc&&(n=ue,0==(4194240&(ue<<=1))&&(ue=64),Lc=n),Lc):0!==(n=ge)?n:n=void 0===(n=window.event)?16:$e(n.type)}function Xc(n,e,t){if(50<Rc)throw Rc=0,Fc=null,Error(o(185));var a=Gc(n,e);return null===a?null:(he(a,e,t),0!=(2&yc)&&a===hc||(a===hc&&(0==(2&yc)&&(Ec|=e),4===Sc&&$c(a,gc)),Bc(a,t),1===e&&0===yc&&0==(1&n.mode)&&(kc=Zn()+500,qr&&Vr())),a)}function Gc(n,e){n.lanes|=e;var t=n.alternate;for(null!==t&&(t.lanes|=e),t=n,n=n.return;null!==n;)n.childLanes|=e,null!==(t=n.alternate)&&(t.childLanes|=e),t=n,n=n.return;return 3===t.tag?t.stateNode:null}function Bc(n,e){var t=n.callbackNode;!function(n,e){for(var t=n.suspendedLanes,a=n.pingedLanes,r=n.expirationTimes,o=n.pendingLanes;0<o;){var i=31-le(o),l=1<<i,c=r[i];-1===c?0!=(l&t)&&0==(l&a)||(r[i]=ve(l,e)):c<=e&&(n.expiredLanes|=l),o&=~l}}(n,e);var a=de(n,n===hc?gc:0);if(0===a)null!==t&&$n(t),n.callbackNode=null,n.callbackPriority=0;else if(e=a&-a,n.callbackPriority!==e){if(null!=t&&$n(t),1===e)0===n.tag?function(n){qr=!0,Fr(n)}(Qc.bind(null,n)):Fr(Qc.bind(null,n)),ar((function(){0===yc&&Vr()})),t=null;else{switch(be(a)){case 1:t=ne;break;case 4:t=ee;break;case 16:default:t=te;break;case 536870912:t=re}t=hs(t,Hc.bind(null,n))}n.callbackPriority=e,n.callbackNode=t}}function Hc(n,e){if(Vc=-1,Lc=0,0!=(6&yc))throw Error(o(327));var t=n.callbackNode;if(us()&&n.callbackNode!==t)return null;var a=de(n,n===hc?gc:0);if(0===a)return null;if(0!=(30&a)||0!=(a&n.expiredLanes)||e)e=rs(n,a);else{e=a;var r=yc;yc|=2;var i=ts();for(hc===n&&gc===e||(kc=Zn()+500,ns(n,e));;)try{is();break}catch(e){es(n,e)}Hr(),dc.current=i,yc=r,null!==xc?e=0:(hc=null,gc=0,e=Sc)}if(0!==e){if(2===e&&0!==(r=me(n))&&(a=r,e=Wc(n,r)),1===e)throw t=zc,ns(n,0),$c(n,a),Bc(n,Zn()),t;if(6===e)$c(n,a);else{if(r=n.current.alternate,0==(30&a)&&!function(n){for(var e=n;;){if(16384&e.flags){var t=e.updateQueue;if(null!==t&&null!==(t=t.stores))for(var a=0;a<t.length;a++){var r=t[a],o=r.getSnapshot;r=r.value;try{if(!oa(o(),r))return!1}catch(n){return!1}}}if(t=e.child,16384&e.subtreeFlags&&null!==t)t.return=e,e=t;else{if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}(r)&&(2===(e=rs(n,a))&&0!==(i=me(n))&&(a=i,e=Wc(n,i)),1===e))throw t=zc,ns(n,0),$c(n,a),Bc(n,Zn()),t;switch(n.finishedWork=r,n.finishedLanes=a,e){case 0:case 1:throw Error(o(345));case 2:case 5:ss(n,Cc);break;case 3:if($c(n,a),(130023424&a)===a&&10<(e=Dc+500-Zn())){if(0!==de(n,0))break;if(((r=n.suspendedLanes)&a)!==a){Uc(),n.pingedLanes|=n.suspendedLanes&r;break}n.timeoutHandle=nr(ss.bind(null,n,Cc),e);break}ss(n,Cc);break;case 4:if($c(n,a),(4194240&a)===a)break;for(e=n.eventTimes,r=-1;0<a;){var l=31-le(a);i=1<<l,(l=e[l])>r&&(r=l),a&=~i}if(a=r,10<(a=(120>(a=Zn()-a)?120:480>a?480:1080>a?1080:1920>a?1920:3e3>a?3e3:4320>a?4320:1960*pc(a/1960))-a)){n.timeoutHandle=nr(ss.bind(null,n,Cc),a);break}ss(n,Cc);break;default:throw Error(o(329))}}}return Bc(n,Zn()),n.callbackNode===t?Hc.bind(null,n):null}function Wc(n,e){var t=Tc;return n.current.memoizedState.isDehydrated&&(ns(n,e).flags|=256),2!==(n=rs(n,e))&&(e=Cc,Cc=t,null!==e&&Yc(e)),n}function Yc(n){null===Cc?Cc=n:Cc.push.apply(Cc,n)}function $c(n,e){for(e&=~Pc,e&=~Ec,n.suspendedLanes|=e,n.pingedLanes&=~e,n=n.expirationTimes;0<e;){var t=31-le(e),a=1<<t;n[t]=-1,e&=~a}}function Qc(n){if(0!=(6&yc))throw Error(o(327));us();var e=de(n,0);if(0==(1&e))return Bc(n,Zn()),null;var t=rs(n,e);if(0!==n.tag&&2===t){var a=me(n);0!==a&&(e=a,t=Wc(n,a))}if(1===t)throw t=zc,ns(n,0),$c(n,e),Bc(n,Zn()),t;if(6===t)throw Error(o(345));return n.finishedWork=n.current.alternate,n.finishedLanes=e,ss(n,Cc),Bc(n,Zn()),null}function Kc(n,e){var t=yc;yc|=1;try{return n(e)}finally{0===(yc=t)&&(kc=Zn()+500,qr&&Vr())}}function Zc(n){null!==Mc&&0===Mc.tag&&0==(6&yc)&&us();var e=yc;yc|=1;var t=mc.transition,a=ge;try{if(mc.transition=null,ge=1,n)return n()}finally{ge=a,mc.transition=t,0==(6&(yc=e))&&Vr()}}function Jc(){bc=_c.current,Sr(_c)}function ns(n,e){n.finishedWork=null,n.finishedLanes=0;var t=n.timeoutHandle;if(-1!==t&&(n.timeoutHandle=-1,er(t)),null!==xc)for(t=xc.return;null!==t;){var a=t;switch(To(a),a.tag){case 1:null!=(a=a.type.childContextTypes)&&kr();break;case 3:Zo(),Sr(Pr),Sr(Er),ri();break;case 5:ni(a);break;case 4:Zo();break;case 13:case 19:Sr(ei);break;case 10:Wr(a.type._context);break;case 22:case 23:Jc()}t=t.return}if(hc=n,xc=n=_s(n.current,null),gc=bc=e,Sc=0,zc=null,Pc=Ec=wc=0,Cc=Tc=null,null!==Kr){for(e=0;e<Kr.length;e++)if(null!==(a=(t=Kr[e]).interleaved)){t.interleaved=null;var r=a.next,o=t.pending;if(null!==o){var i=o.next;o.next=r,a.next=i}t.pending=a}Kr=null}return n}function es(n,e){for(;;){var t=xc;try{if(Hr(),oi.current=Zi,fi){for(var a=ci.memoizedState;null!==a;){var r=a.queue;null!==r&&(r.pending=null),a=a.next}fi=!1}if(li=0,ui=si=ci=null,pi=!1,di=0,vc.current=null,null===t||null===t.return){Sc=1,zc=e,xc=null;break}n:{var i=n,l=t.return,c=t,s=e;if(e=gc,c.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s,f=c,p=f.tag;if(0==(1&f.mode)&&(0===p||11===p||15===p)){var d=f.alternate;d?(f.updateQueue=d.updateQueue,f.memoizedState=d.memoizedState,f.lanes=d.lanes):(f.updateQueue=null,f.memoizedState=null)}var v=fl(l);if(null!==v){v.flags&=-257,pl(v,l,c,0,e),1&v.mode&&ul(i,u,e),s=u;var m=(e=v).updateQueue;if(null===m){var y=new Set;y.add(s),e.updateQueue=y}else m.add(s);break n}if(0==(1&e)){ul(i,u,e),as();break n}s=Error(o(426))}else if(ko&&1&c.mode){var h=fl(l);if(null!==h){0==(65536&h.flags)&&(h.flags|=256),pl(h,l,c,0,e),Vo(s);break n}}i=s,4!==Sc&&(Sc=2),null===Tc?Tc=[i]:Tc.push(i),s=tl(s,c),c=l;do{switch(c.tag){case 3:c.flags|=65536,e&=-e,c.lanes|=e,ro(c,cl(0,s,e));break n;case 1:i=s;var x=c.type,g=c.stateNode;if(0==(128&c.flags)&&("function"==typeof x.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===Nc||!Nc.has(g)))){c.flags|=65536,e&=-e,c.lanes|=e,ro(c,sl(c,i,e));break n}}c=c.return}while(null!==c)}cs(t)}catch(n){e=n,xc===t&&null!==t&&(xc=t=t.return);continue}break}}function ts(){var n=dc.current;return dc.current=Zi,null===n?Zi:n}function as(){0!==Sc&&3!==Sc&&2!==Sc||(Sc=4),null===hc||0==(268435455&wc)&&0==(268435455&Ec)||$c(hc,gc)}function rs(n,e){var t=yc;yc|=2;var a=ts();for(hc===n&&gc===e||ns(n,e);;)try{os();break}catch(e){es(n,e)}if(Hr(),yc=t,dc.current=a,null!==xc)throw Error(o(261));return hc=null,gc=0,Sc}function os(){for(;null!==xc;)ls(xc)}function is(){for(;null!==xc&&!Qn();)ls(xc)}function ls(n){var e=fc(n.alternate,n,bc);n.memoizedProps=n.pendingProps,null===e?cs(n):xc=e,vc.current=null}function cs(n){var e=n;do{var t=e.alternate;if(n=e.return,0==(32768&e.flags)){if(null!==(t=ml(t,e,bc)))return void(xc=t)}else{if(null!==(t=Ll(t,e)))return t.flags&=32767,void(xc=t);if(null===n)return Sc=6,void(xc=null);n.flags|=32768,n.subtreeFlags=0,n.deletions=null}if(null!==(e=e.sibling))return void(xc=e);xc=e=n}while(null!==e);0===Sc&&(Sc=5)}function ss(n,e){var t=ge,a=mc.transition;try{mc.transition=null,ge=1,function(n,e,t){do{us()}while(null!==Mc);if(0!=(6&yc))throw Error(o(327));var a=n.finishedWork,r=n.finishedLanes;if(null===a)return null;if(n.finishedWork=null,n.finishedLanes=0,a===n.current)throw Error(o(177));n.callbackNode=null,n.callbackPriority=0;var i=a.lanes|a.childLanes;if(function(n,e){var t=n.pendingLanes&~e;n.pendingLanes=e,n.suspendedLanes=0,n.pingedLanes=0,n.expiredLanes&=e,n.mutableReadLanes&=e,n.entangledLanes&=e,e=n.entanglements;var a=n.eventTimes;for(n=n.expirationTimes;0<t;){var r=31-le(t),o=1<<r;e[r]=0,a[r]=-1,n[r]=-1,t&=~o}}(n,i),n===hc&&(xc=hc=null,gc=0),0==(2064&a.subtreeFlags)&&0==(2064&a.flags)||Ac||(Ac=!0,hs(te,(function(){return us(),null}))),i=0!=(15990&a.flags),0!=(15990&a.subtreeFlags)||i){i=mc.transition,mc.transition=null;var l=ge;ge=1;var c=yc;yc|=4,vc.current=null,function(n,e){if(fa(n=ua())){if("selectionStart"in n)var t={start:n.selectionStart,end:n.selectionEnd};else n:{var a=(t=(t=n.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(a&&0!==a.rangeCount){t=a.anchorNode;var r=a.anchorOffset,i=a.focusNode;a=a.focusOffset;try{t.nodeType,i.nodeType}catch(n){t=null;break n}var l=0,c=-1,s=-1,u=0,f=0,p=n,d=null;e:for(;;){for(var v;p!==t||0!==r&&3!==p.nodeType||(c=l+r),p!==i||0!==a&&3!==p.nodeType||(s=l+a),3===p.nodeType&&(l+=p.nodeValue.length),null!==(v=p.firstChild);)d=p,p=v;for(;;){if(p===n)break e;if(d===t&&++u===r&&(c=l),d===i&&++f===a&&(s=l),null!==(v=p.nextSibling))break;d=(p=d).parentNode}p=v}t=-1===c||-1===s?null:{start:c,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(Za={focusedElem:n,selectionRange:t},Gl=e;null!==Gl;)if(n=(e=Gl).child,0!=(1028&e.subtreeFlags)&&null!==n)n.return=e,Gl=n;else for(;null!==Gl;){e=Gl;try{var m=e.alternate;if(0!=(1024&e.flags))switch(e.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,h=m.memoizedState,x=e.stateNode,g=x.getSnapshotBeforeUpdate(e.elementType===e.type?y:Ur(e.type,y),h);x.__reactInternalSnapshotBeforeUpdate=g}break;case 3:var b=e.stateNode.containerInfo;if(1===b.nodeType)b.textContent="";else if(9===b.nodeType){var _=b.body;null!=_&&(_.textContent="")}break;default:throw Error(o(163))}}catch(n){ps(e,e.return,n)}if(null!==(n=e.sibling)){n.return=e.return,Gl=n;break}Gl=e.return}m=Wl,Wl=!1}(n,a),function(n,e){for(Gl=e;null!==Gl;){var t=(e=Gl).deletions;if(null!==t)for(var a=0;a<t.length;a++){var r=t[a];try{rc(n,r,e);var o=r.alternate;null!==o&&(o.return=null),r.return=null}catch(n){ps(r,e,n)}}if(t=e.child,0!=(12854&e.subtreeFlags)&&null!==t)t.return=e,Gl=t;else for(;null!==Gl;){e=Gl;try{var i=e.flags;if(32&i&&dn(e.stateNode,""),512&i){var l=e.alternate;if(null!==l){var c=l.ref;null!==c&&("function"==typeof c?c(null):c.current=null)}}if(8192&i)switch(e.tag){case 13:if(null!==e.memoizedState){var s=e.alternate;null!==s&&null!==s.memoizedState||(Dc=Zn())}break;case 22:var u=null!==e.memoizedState,f=e.alternate,p=null!==f&&null!==f.memoizedState;n:{r=u;for(var d=null,v=a=t=e;;){if(5===v.tag){if(null===d){d=v;var m=v.stateNode;if(r){var y=m.style;"function"==typeof y.setProperty?y.setProperty("display","none","important"):y.display="none"}else{var h=v.stateNode,x=v.memoizedProps.style,g=null!=x&&x.hasOwnProperty("display")?x.display:null;h.style.display=yn("display",g)}}}else if(6===v.tag)null===d&&(v.stateNode.nodeValue=r?"":v.memoizedProps);else if((22!==v.tag&&23!==v.tag||null===v.memoizedState||v===a)&&null!==v.child){v.child.return=v,v=v.child;continue}if(v===a)break;for(;null===v.sibling;){if(null===v.return||v.return===a)break n;d===v&&(d=null),v=v.return}d===v&&(d=null),v.sibling.return=v.return,v=v.sibling}}if(u&&!p&&0!=(1&t.mode)){Gl=t;for(var b=t.child;null!==b;){for(t=Gl=b;null!==Gl;){var _=(a=Gl).child;switch(a.tag){case 0:case 11:case 14:case 15:Yl(4,a,a.return);break;case 1:Bl(a,a.return);var S=a.stateNode;if("function"==typeof S.componentWillUnmount){var z=a.return;try{S.props=a.memoizedProps,S.state=a.memoizedState,S.componentWillUnmount()}catch(n){ps(a,z,n)}}break;case 5:Bl(a,a.return);break;case 22:if(null!==a.memoizedState){sc(t);continue}}null!==_?(_.return=a,Gl=_):sc(t)}b=b.sibling}}}switch(4102&i){case 2:ec(e),e.flags&=-3;break;case 6:ec(e),e.flags&=-3,oc(e.alternate,e);break;case 4096:e.flags&=-4097;break;case 4100:e.flags&=-4097,oc(e.alternate,e);break;case 4:oc(e.alternate,e)}}catch(n){ps(e,e.return,n)}if(null!==(t=e.sibling)){t.return=e.return,Gl=t;break}Gl=e.return}}}(n,a),pa(Za),Za=null,n.current=a,ic(a,n,r),Kn(),yc=c,ge=l,mc.transition=i}else n.current=a;if(Ac&&(Ac=!1,Mc=n,qc=r),0===(i=n.pendingLanes)&&(Nc=null),function(n){if(ie&&"function"==typeof ie.onCommitFiberRoot)try{ie.onCommitFiberRoot(oe,n,void 0,128==(128&n.current.flags))}catch(n){}}(a.stateNode),Bc(n,Zn()),null!==e)for(t=n.onRecoverableError,a=0;a<e.length;a++)t(e[a]);if(Oc)throw Oc=!1,n=Ic,Ic=null,n;0!=(1&qc)&&0!==n.tag&&us(),0!=(1&(i=n.pendingLanes))?n===Fc?Rc++:(Rc=0,Fc=n):Rc=0,Vr()}(n,e,t)}finally{mc.transition=a,ge=t}return null}function us(){if(null!==Mc){var n=be(qc),e=mc.transition,t=ge;try{if(mc.transition=null,ge=16>n?16:n,null===Mc)var a=!1;else{if(n=Mc,Mc=null,qc=0,0!=(6&yc))throw Error(o(331));var r=yc;for(yc|=4,Gl=n.current;null!==Gl;){var i=Gl,l=i.child;if(0!=(16&Gl.flags)){var c=i.deletions;if(null!==c){for(var s=0;s<c.length;s++){var u=c[s];for(Gl=u;null!==Gl;){var f=Gl;switch(f.tag){case 0:case 11:case 15:Yl(8,f,i)}var p=f.child;if(null!==p)p.return=f,Gl=p;else for(;null!==Gl;){var d=(f=Gl).sibling,v=f.return;if(Zl(f),f===u){Gl=null;break}if(null!==d){d.return=v,Gl=d;break}Gl=v}}}var m=i.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var h=y.sibling;y.sibling=null,y=h}while(null!==y)}}Gl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Gl=l;else n:for(;null!==Gl;){if(0!=(2048&(i=Gl).flags))switch(i.tag){case 0:case 11:case 15:Yl(9,i,i.return)}var x=i.sibling;if(null!==x){x.return=i.return,Gl=x;break n}Gl=i.return}}var g=n.current;for(Gl=g;null!==Gl;){var b=(l=Gl).child;if(0!=(2064&l.subtreeFlags)&&null!==b)b.return=l,Gl=b;else n:for(l=g;null!==Gl;){if(0!=(2048&(c=Gl).flags))try{switch(c.tag){case 0:case 11:case 15:$l(9,c)}}catch(n){ps(c,c.return,n)}if(c===l){Gl=null;break n}var _=c.sibling;if(null!==_){_.return=c.return,Gl=_;break n}Gl=c.return}}if(yc=r,Vr(),ie&&"function"==typeof ie.onPostCommitFiberRoot)try{ie.onPostCommitFiberRoot(oe,n)}catch(n){}a=!0}return a}finally{ge=t,mc.transition=e}}return!1}function fs(n,e,t){to(n,e=cl(0,e=tl(t,e),1)),e=Uc(),null!==(n=Gc(n,1))&&(he(n,1,e),Bc(n,e))}function ps(n,e,t){if(3===n.tag)fs(n,n,t);else for(;null!==e;){if(3===e.tag){fs(e,n,t);break}if(1===e.tag){var a=e.stateNode;if("function"==typeof e.type.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&(null===Nc||!Nc.has(a))){to(e,n=sl(e,n=tl(t,n),1)),n=Uc(),null!==(e=Gc(e,1))&&(he(e,1,n),Bc(e,n));break}}e=e.return}}function ds(n,e,t){var a=n.pingCache;null!==a&&a.delete(e),e=Uc(),n.pingedLanes|=n.suspendedLanes&t,hc===n&&(gc&t)===t&&(4===Sc||3===Sc&&(130023424&gc)===gc&&500>Zn()-Dc?ns(n,0):Pc|=t),Bc(n,e)}function vs(n,e){0===e&&(0==(1&n.mode)?e=1:(e=fe,0==(130023424&(fe<<=1))&&(fe=4194304)));var t=Uc();null!==(n=Gc(n,e))&&(he(n,e,t),Bc(n,t))}function ms(n){var e=n.memoizedState,t=0;null!==e&&(t=e.retryLane),vs(n,t)}function ys(n,e){var t=0;switch(n.tag){case 13:var a=n.stateNode,r=n.memoizedState;null!==r&&(t=r.retryLane);break;case 19:a=n.stateNode;break;default:throw Error(o(314))}null!==a&&a.delete(e),vs(n,t)}function hs(n,e){return Yn(n,e)}function xs(n,e,t,a){this.tag=n,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function gs(n,e,t,a){return new xs(n,e,t,a)}function bs(n){return!(!(n=n.prototype)||!n.isReactComponent)}function _s(n,e){var t=n.alternate;return null===t?((t=gs(n.tag,e,n.key,n.mode)).elementType=n.elementType,t.type=n.type,t.stateNode=n.stateNode,t.alternate=n,n.alternate=t):(t.pendingProps=e,t.type=n.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&n.flags,t.childLanes=n.childLanes,t.lanes=n.lanes,t.child=n.child,t.memoizedProps=n.memoizedProps,t.memoizedState=n.memoizedState,t.updateQueue=n.updateQueue,e=n.dependencies,t.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},t.sibling=n.sibling,t.index=n.index,t.ref=n.ref,t}function Ss(n,e,t,a,r,i){var l=2;if(a=n,"function"==typeof n)bs(n)&&(l=1);else if("string"==typeof n)l=5;else n:switch(n){case z:return zs(t.children,r,i,e);case w:l=8,r|=8;break;case E:return(n=gs(12,t,e,2|r)).elementType=E,n.lanes=i,n;case D:return(n=gs(13,t,e,r)).elementType=D,n.lanes=i,n;case k:return(n=gs(19,t,e,r)).elementType=k,n.lanes=i,n;case N:return ws(t,r,i,e);default:if("object"==typeof n&&null!==n)switch(n.$$typeof){case P:l=10;break n;case T:l=9;break n;case C:l=11;break n;case O:l=14;break n;case I:l=16,a=null;break n}throw Error(o(130,null==n?n:typeof n,""))}return(e=gs(l,t,e,r)).elementType=n,e.type=a,e.lanes=i,e}function zs(n,e,t,a){return(n=gs(7,n,a,e)).lanes=t,n}function ws(n,e,t,a){return(n=gs(22,n,a,e)).elementType=N,n.lanes=t,n.stateNode={},n}function Es(n,e,t){return(n=gs(6,n,null,e)).lanes=t,n}function Ps(n,e,t){return(e=gs(4,null!==n.children?n.children:[],n.key,e)).lanes=t,e.stateNode={containerInfo:n.containerInfo,pendingChildren:null,implementation:n.implementation},e}function Ts(n,e,t,a,r){this.tag=e,this.containerInfo=n,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ye(0),this.expirationTimes=ye(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ye(0),this.identifierPrefix=a,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Cs(n,e,t,a,r,o,i,l,c){return n=new Ts(n,e,t,l,c),1===e?(e=1,!0===o&&(e|=8)):e=0,o=gs(3,null,null,e),n.current=o,o.stateNode=n,o.memoizedState={element:a,isDehydrated:t,cache:null,transitions:null},Jr(o),n}function Ds(n,e,t){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==a?null:""+a,children:n,containerInfo:e,implementation:t}}function ks(n){if(!n)return wr;n:{if(Xn(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var e=n;do{switch(e.tag){case 3:e=e.stateNode.context;break n;case 1:if(Dr(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break n}}e=e.return}while(null!==e);throw Error(o(171))}if(1===n.tag){var t=n.type;if(Dr(t))return Ir(n,t,e)}return e}function Os(n,e,t,a,r,o,i,l,c){return(n=Cs(t,a,!0,n,0,o,0,l,c)).context=ks(null),t=n.current,(o=eo(a=Uc(),r=jc(t))).callback=null!=e?e:null,to(t,o),n.current.lanes=r,he(n,r,a),Bc(n,a),n}function Is(n,e,t,a){var r=e.current,o=Uc(),i=jc(r);return t=ks(t),null===e.context?e.context=t:e.pendingContext=t,(e=eo(o,i)).payload={element:n},null!==(a=void 0===a?null:a)&&(e.callback=a),to(r,e),null!==(n=Xc(r,i,o))&&ao(n,r,i),i}function Ns(n){return(n=n.current).child?(n.child.tag,n.child.stateNode):null}function As(n,e){if(null!==(n=n.memoizedState)&&null!==n.dehydrated){var t=n.retryLane;n.retryLane=0!==t&&t<e?t:e}}function Ms(n,e){As(n,e),(n=n.alternate)&&As(n,e)}fc=function(n,e,t){if(null!==n)if(n.memoizedProps!==e.pendingProps||Pr.current)hl=!0;else{if(0==(n.lanes&t)&&0==(128&e.flags))return hl=!1,function(n,e,t){switch(e.tag){case 3:Tl(e),Fo();break;case 5:Jo(e);break;case 1:Dr(e.type)&&Nr(e);break;case 4:Ko(e,e.stateNode.containerInfo);break;case 10:var a=e.type._context,r=e.memoizedProps.value;zr(jr,a._currentValue),a._currentValue=r;break;case 13:if(null!==(a=e.memoizedState))return null!==a.dehydrated?(zr(ei,1&ei.current),e.flags|=128,null):0!=(t&e.child.childLanes)?Ol(n,e,t):(zr(ei,1&ei.current),null!==(n=Vl(n,e,t))?n.sibling:null);zr(ei,1&ei.current);break;case 19:if(a=0!=(t&e.childLanes),0!=(128&n.flags)){if(a)return Fl(n,e,t);e.flags|=128}if(null!==(r=e.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),zr(ei,ei.current),a)break;return null;case 22:case 23:return e.lanes=0,Sl(n,e,t)}return Vl(n,e,t)}(n,e,t);hl=0!=(131072&n.flags)}else hl=!1,ko&&0!=(1048576&e.flags)&&Eo(e,xo,e.index);switch(e.lanes=0,e.tag){case 2:var a=e.type;null!==n&&(n.alternate=null,e.alternate=null,e.flags|=2),n=e.pendingProps;var r=Cr(e,Er.current);$r(e,t),r=hi(null,e,a,n,r,t);var i=xi();return e.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(e.tag=1,e.memoizedState=null,e.updateQueue=null,Dr(a)?(i=!0,Nr(e)):i=!1,e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,Jr(e),r.updater=so,e.stateNode=r,r._reactInternals=e,vo(e,a,n,t),e=Pl(null,e,a,!0,i,t)):(e.tag=0,ko&&i&&Po(e),xl(null,e,r,t),e=e.child),e;case 16:a=e.elementType;n:{switch(null!==n&&(n.alternate=null,e.alternate=null,e.flags|=2),n=e.pendingProps,a=(r=a._init)(a._payload),e.type=a,r=e.tag=function(n){if("function"==typeof n)return bs(n)?1:0;if(null!=n){if((n=n.$$typeof)===C)return 11;if(n===O)return 14}return 2}(a),n=Ur(a,n),r){case 0:e=wl(null,e,a,n,t);break n;case 1:e=El(null,e,a,n,t);break n;case 11:e=gl(null,e,a,n,t);break n;case 14:e=bl(null,e,a,Ur(a.type,n),t);break n}throw Error(o(306,a,""))}return e;case 0:return a=e.type,r=e.pendingProps,wl(n,e,a,r=e.elementType===a?r:Ur(a,r),t);case 1:return a=e.type,r=e.pendingProps,El(n,e,a,r=e.elementType===a?r:Ur(a,r),t);case 3:n:{if(Tl(e),null===n)throw Error(o(387));a=e.pendingProps,r=(i=e.memoizedState).element,no(n,e),oo(e,a,null,t);var l=e.memoizedState;if(a=l.element,i.isDehydrated){if(i={element:a,isDehydrated:!1,cache:l.cache,transitions:l.transitions},e.updateQueue.baseState=i,e.memoizedState=i,256&e.flags){e=Cl(n,e,a,t,r=Error(o(423)));break n}if(a!==r){e=Cl(n,e,a,t,r=Error(o(424)));break n}for(Do=ir(e.stateNode.containerInfo.firstChild),Co=e,ko=!0,Oo=null,t=Bo(e,null,a,t),e.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(Fo(),a===r){e=Vl(n,e,t);break n}xl(n,e,a,t)}e=e.child}return e;case 5:return Jo(e),null===n&&Mo(e),a=e.type,r=e.pendingProps,i=null!==n?n.memoizedProps:null,l=r.children,Ja(a,r)?l=null:null!==i&&Ja(a,i)&&(e.flags|=32),zl(n,e),xl(n,e,l,t),e.child;case 6:return null===n&&Mo(e),null;case 13:return Ol(n,e,t);case 4:return Ko(e,e.stateNode.containerInfo),a=e.pendingProps,null===n?e.child=Go(e,null,a,t):xl(n,e,a,t),e.child;case 11:return a=e.type,r=e.pendingProps,gl(n,e,a,r=e.elementType===a?r:Ur(a,r),t);case 7:return xl(n,e,e.pendingProps,t),e.child;case 8:case 12:return xl(n,e,e.pendingProps.children,t),e.child;case 10:n:{if(a=e.type._context,r=e.pendingProps,i=e.memoizedProps,l=r.value,zr(jr,a._currentValue),a._currentValue=l,null!==i)if(oa(i.value,l)){if(i.children===r.children&&!Pr.current){e=Vl(n,e,t);break n}}else for(null!==(i=e.child)&&(i.return=e);null!==i;){var c=i.dependencies;if(null!==c){l=i.child;for(var s=c.firstContext;null!==s;){if(s.context===a){if(1===i.tag){(s=eo(-1,t&-t)).tag=2;var u=i.updateQueue;if(null!==u){var f=(u=u.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),u.pending=s}}i.lanes|=t,null!==(s=i.alternate)&&(s.lanes|=t),Yr(i.return,t,e),c.lanes|=t;break}s=s.next}}else if(10===i.tag)l=i.type===e.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=t,null!==(c=l.alternate)&&(c.lanes|=t),Yr(l,t,e),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===e){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(n,e,r.children,t),e=e.child}return e;case 9:return r=e.type,a=e.pendingProps.children,$r(e,t),a=a(r=Qr(r)),e.flags|=1,xl(n,e,a,t),e.child;case 14:return r=Ur(a=e.type,e.pendingProps),bl(n,e,a,r=Ur(a.type,r),t);case 15:return _l(n,e,e.type,e.pendingProps,t);case 17:return a=e.type,r=e.pendingProps,r=e.elementType===a?r:Ur(a,r),null!==n&&(n.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,Dr(a)?(n=!0,Nr(e)):n=!1,$r(e,t),fo(e,a,r),vo(e,a,r,t),Pl(null,e,a,!0,n,t);case 19:return Fl(n,e,t);case 22:return Sl(n,e,t)}throw Error(o(156,e.tag))};var qs="function"==typeof reportError?reportError:function(n){console.error(n)};function Rs(n){this._internalRoot=n}function Fs(n){this._internalRoot=n}function Vs(n){return!(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)}function Ls(n){return!(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType&&(8!==n.nodeType||" react-mount-point-unstable "!==n.nodeValue))}function Us(){}function js(n,e,t,a,r){var o=t._reactRootContainer;if(o){var i=o;if("function"==typeof r){var l=r;r=function(){var n=Ns(i);l.call(n)}}Is(e,i,n,r)}else i=function(n,e,t,a,r){if(r){if("function"==typeof a){var o=a;a=function(){var n=Ns(i);o.call(n)}}var i=Os(e,a,n,0,null,!1,0,"",Us);return n._reactRootContainer=i,n[fr]=i.current,La(8===n.nodeType?n.parentNode:n),Zc(),i}for(;r=n.lastChild;)n.removeChild(r);if("function"==typeof a){var l=a;a=function(){var n=Ns(c);l.call(n)}}var c=Cs(n,0,!1,null,0,!1,0,"",Us);return n._reactRootContainer=c,n[fr]=c.current,La(8===n.nodeType?n.parentNode:n),Zc((function(){Is(e,c,t,a)})),c}(t,e,n,r,a);return Ns(i)}Fs.prototype.render=Rs.prototype.render=function(n){var e=this._internalRoot;if(null===e)throw Error(o(409));Is(n,e,null,null)},Fs.prototype.unmount=Rs.prototype.unmount=function(){var n=this._internalRoot;if(null!==n){this._internalRoot=null;var e=n.containerInfo;Zc((function(){Is(null,n,null,null)})),e[fr]=null}},Fs.prototype.unstable_scheduleHydration=function(n){if(n){var e=we();n={blockedOn:null,target:n,priority:e};for(var t=0;t<Ne.length&&0!==e&&e<Ne[t].priority;t++);Ne.splice(t,0,n),0===t&&Re(n)}},_e=function(n){switch(n.tag){case 3:var e=n.stateNode;if(e.current.memoizedState.isDehydrated){var t=pe(e.pendingLanes);0!==t&&(xe(e,1|t),Bc(e,Zn()),0==(6&yc)&&(kc=Zn()+500,Vr()))}break;case 13:var a=Uc();Zc((function(){return Xc(n,1,a)})),Ms(n,1)}},Se=function(n){13===n.tag&&(Xc(n,134217728,Uc()),Ms(n,134217728))},ze=function(n){if(13===n.tag){var e=Uc(),t=jc(n);Xc(n,t,e),Ms(n,t)}},we=function(){return ge},Ee=function(n,e){var t=ge;try{return ge=n,e()}finally{ge=t}},zn=function(n,e,t){switch(e){case"input":if(Z(n,t),e=t.name,"radio"===t.type&&null!=e){for(t=n;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<t.length;e++){var a=t[e];if(a!==n&&a.form===n.form){var r=xr(a);if(!r)throw Error(o(90));W(a),Z(a,r)}}}break;case"textarea":on(n,t);break;case"select":null!=(e=t.value)&&tn(n,!!t.multiple,e,!1)}},Dn=Kc,kn=Zc;var Xs={usingClientEntryPoint:!1,Events:[yr,hr,xr,Tn,Cn,Kc]},Gs={findFiberByHostInstance:mr,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Bs={bundleType:Gs.bundleType,version:Gs.version,rendererPackageName:Gs.rendererPackageName,rendererConfig:Gs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(n){return null===(n=Hn(n))?null:n.stateNode},findFiberByHostInstance:Gs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Hs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Hs.isDisabled&&Hs.supportsFiber)try{oe=Hs.inject(Bs),ie=Hs}catch(fn){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Xs,e.createPortal=function(n,e){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Vs(e))throw Error(o(200));return Ds(n,e,null,t)},e.createRoot=function(n,e){if(!Vs(n))throw Error(o(299));var t=!1,a="",r=qs;return null!=e&&(!0===e.unstable_strictMode&&(t=!0),void 0!==e.identifierPrefix&&(a=e.identifierPrefix),void 0!==e.onRecoverableError&&(r=e.onRecoverableError)),e=Cs(n,1,!1,null,0,t,0,a,r),n[fr]=e.current,La(8===n.nodeType?n.parentNode:n),new Rs(e)},e.findDOMNode=function(n){if(null==n)return null;if(1===n.nodeType)return n;var e=n._reactInternals;if(void 0===e){if("function"==typeof n.render)throw Error(o(188));throw n=Object.keys(n).join(","),Error(o(268,n))}return null===(n=Hn(e))?null:n.stateNode},e.flushSync=function(n){return Zc(n)},e.hydrate=function(n,e,t){if(!Ls(e))throw Error(o(200));return js(null,n,e,!0,t)},e.hydrateRoot=function(n,e,t){if(!Vs(n))throw Error(o(405));var a=null!=t&&t.hydratedSources||null,r=!1,i="",l=qs;if(null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(l=t.onRecoverableError)),e=Os(e,null,n,1,null!=t?t:null,r,0,i,l),n[fr]=e.current,La(n),a)for(n=0;n<a.length;n++)r=(r=(t=a[n])._getVersion)(t._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,r]:e.mutableSourceEagerHydrationData.push(t,r);return new Fs(e)},e.render=function(n,e,t){if(!Ls(e))throw Error(o(200));return js(null,n,e,!1,t)},e.unmountComponentAtNode=function(n){if(!Ls(n))throw Error(o(40));return!!n._reactRootContainer&&(Zc((function(){js(null,null,n,!1,(function(){n._reactRootContainer=null,n[fr]=null}))})),!0)},e.unstable_batchedUpdates=Kc,e.unstable_renderSubtreeIntoContainer=function(n,e,t,a){if(!Ls(t))throw Error(o(200));if(null==n||void 0===n._reactInternals)throw Error(o(38));return js(n,e,t,!1,a)},e.version="18.0.0-fc46dba67-20220329"},745:(n,e,t)=>{"use strict";var a=t(3935);e.createRoot=a.createRoot,e.hydrateRoot=a.hydrateRoot},3935:(n,e,t)=>{"use strict";!function n(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(n)}catch(n){console.error(n)}}(),n.exports=t(4448)},2408:(n,e)=>{"use strict";var t=Symbol.for("react.element"),a=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),d=Symbol.iterator,v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function h(n,e,t){this.props=n,this.context=e,this.refs=y,this.updater=t||v}function x(){}function g(n,e,t){this.props=n,this.context=e,this.refs=y,this.updater=t||v}h.prototype.isReactComponent={},h.prototype.setState=function(n,e){if("object"!=typeof n&&"function"!=typeof n&&null!=n)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,n,e,"setState")},h.prototype.forceUpdate=function(n){this.updater.enqueueForceUpdate(this,n,"forceUpdate")},x.prototype=h.prototype;var b=g.prototype=new x;b.constructor=g,m(b,h.prototype),b.isPureReactComponent=!0;var _=Array.isArray,S=Object.prototype.hasOwnProperty,z={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function E(n,e,a){var r,o={},i=null,l=null;if(null!=e)for(r in void 0!==e.ref&&(l=e.ref),void 0!==e.key&&(i=""+e.key),e)S.call(e,r)&&!w.hasOwnProperty(r)&&(o[r]=e[r]);var c=arguments.length-2;if(1===c)o.children=a;else if(1<c){for(var s=Array(c),u=0;u<c;u++)s[u]=arguments[u+2];o.children=s}if(n&&n.defaultProps)for(r in c=n.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:t,type:n,key:i,ref:l,props:o,_owner:z.current}}function P(n){return"object"==typeof n&&null!==n&&n.$$typeof===t}var T=/\/+/g;function C(n,e){return"object"==typeof n&&null!==n&&null!=n.key?function(n){var e={"=":"=0",":":"=2"};return"$"+n.replace(/[=:]/g,(function(n){return e[n]}))}(""+n.key):e.toString(36)}function D(n,e,r,o,i){var l=typeof n;"undefined"!==l&&"boolean"!==l||(n=null);var c=!1;if(null===n)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(n.$$typeof){case t:case a:c=!0}}if(c)return i=i(c=n),n=""===o?"."+C(c,0):o,_(i)?(r="",null!=n&&(r=n.replace(T,"$&/")+"/"),D(i,e,r,"",(function(n){return n}))):null!=i&&(P(i)&&(i=function(n,e){return{$$typeof:t,type:n.type,key:e,ref:n.ref,props:n.props,_owner:n._owner}}(i,r+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(T,"$&/")+"/")+n)),e.push(i)),1;if(c=0,o=""===o?".":o+":",_(n))for(var s=0;s<n.length;s++){var u=o+C(l=n[s],s);c+=D(l,e,r,u,i)}else if(u=function(n){return null===n||"object"!=typeof n?null:"function"==typeof(n=d&&n[d]||n["@@iterator"])?n:null}(n),"function"==typeof u)for(n=u.call(n),s=0;!(l=n.next()).done;)c+=D(l=l.value,e,r,u=o+C(l,s++),i);else if("object"===l)throw e=String(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return c}function k(n,e,t){if(null==n)return n;var a=[],r=0;return D(n,a,"","",(function(n){return e.call(t,n,r++)})),a}function O(n){if(-1===n._status){var e=n._result;(e=e()).then((function(e){0!==n._status&&-1!==n._status||(n._status=1,n._result=e)}),(function(e){0!==n._status&&-1!==n._status||(n._status=2,n._result=e)})),-1===n._status&&(n._status=0,n._result=e)}if(1===n._status)return n._result.default;throw n._result}var I={current:null},N={transition:null},A={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:N,ReactCurrentOwner:z};e.Children={map:k,forEach:function(n,e,t){k(n,(function(){e.apply(this,arguments)}),t)},count:function(n){var e=0;return k(n,(function(){e++})),e},toArray:function(n){return k(n,(function(n){return n}))||[]},only:function(n){if(!P(n))throw Error("React.Children.only expected to receive a single React element child.");return n}},e.Component=h,e.Fragment=r,e.Profiler=i,e.PureComponent=g,e.StrictMode=o,e.Suspense=u,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,e.cloneElement=function(n,e,a){if(null==n)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+n+".");var r=m({},n.props),o=n.key,i=n.ref,l=n._owner;if(null!=e){if(void 0!==e.ref&&(i=e.ref,l=z.current),void 0!==e.key&&(o=""+e.key),n.type&&n.type.defaultProps)var c=n.type.defaultProps;for(s in e)S.call(e,s)&&!w.hasOwnProperty(s)&&(r[s]=void 0===e[s]&&void 0!==c?c[s]:e[s])}var s=arguments.length-2;if(1===s)r.children=a;else if(1<s){c=Array(s);for(var u=0;u<s;u++)c[u]=arguments[u+2];r.children=c}return{$$typeof:t,type:n.type,key:o,ref:i,props:r,_owner:l}},e.createContext=function(n){return(n={$$typeof:c,_currentValue:n,_currentValue2:n,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:n},n.Consumer=n},e.createElement=E,e.createFactory=function(n){var e=E.bind(null,n);return e.type=n,e},e.createRef=function(){return{current:null}},e.forwardRef=function(n){return{$$typeof:s,render:n}},e.isValidElement=P,e.lazy=function(n){return{$$typeof:p,_payload:{_status:-1,_result:n},_init:O}},e.memo=function(n,e){return{$$typeof:f,type:n,compare:void 0===e?null:e}},e.startTransition=function(n){var e=N.transition;N.transition={};try{n()}finally{N.transition=e}},e.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},e.useCallback=function(n,e){return I.current.useCallback(n,e)},e.useContext=function(n){return I.current.useContext(n)},e.useDebugValue=function(){},e.useDeferredValue=function(n){return I.current.useDeferredValue(n)},e.useEffect=function(n,e){return I.current.useEffect(n,e)},e.useId=function(){return I.current.useId()},e.useImperativeHandle=function(n,e,t){return I.current.useImperativeHandle(n,e,t)},e.useInsertionEffect=function(n,e){return I.current.useInsertionEffect(n,e)},e.useLayoutEffect=function(n,e){return I.current.useLayoutEffect(n,e)},e.useMemo=function(n,e){return I.current.useMemo(n,e)},e.useReducer=function(n,e,t){return I.current.useReducer(n,e,t)},e.useRef=function(n){return I.current.useRef(n)},e.useState=function(n){return I.current.useState(n)},e.useSyncExternalStore=function(n,e,t){return I.current.useSyncExternalStore(n,e,t)},e.useTransition=function(){return I.current.useTransition()},e.version="18.0.0-fc46dba67-20220329"},7294:(n,e,t)=>{"use strict";n.exports=t(2408)},53:(n,e)=>{"use strict";function t(n,e){var t=n.length;n.push(e);n:for(;0<t;){var a=t-1>>>1,r=n[a];if(!(0<o(r,e)))break n;n[a]=e,n[t]=r,t=a}}function a(n){return 0===n.length?null:n[0]}function r(n){if(0===n.length)return null;var e=n[0],t=n.pop();if(t!==e){n[0]=t;n:for(var a=0,r=n.length,i=r>>>1;a<i;){var l=2*(a+1)-1,c=n[l],s=l+1,u=n[s];if(0>o(c,t))s<r&&0>o(u,c)?(n[a]=u,n[s]=t,a=s):(n[a]=c,n[l]=t,a=l);else{if(!(s<r&&0>o(u,t)))break n;n[a]=u,n[s]=t,a=s}}}return e}function o(n,e){var t=n.sortIndex-e.sortIndex;return 0!==t?t:n.id-e.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;e.unstable_now=function(){return i.now()}}else{var l=Date,c=l.now();e.unstable_now=function(){return l.now()-c}}var s=[],u=[],f=1,p=null,d=3,v=!1,m=!1,y=!1,h="function"==typeof setTimeout?setTimeout:null,x="function"==typeof clearTimeout?clearTimeout:null,g="undefined"!=typeof setImmediate?setImmediate:null;function b(n){for(var e=a(u);null!==e;){if(null===e.callback)r(u);else{if(!(e.startTime<=n))break;r(u),e.sortIndex=e.expirationTime,t(s,e)}e=a(u)}}function _(n){if(y=!1,b(n),!m)if(null!==a(s))m=!0,N(S);else{var e=a(u);null!==e&&A(_,e.startTime-n)}}function S(n,t){m=!1,y&&(y=!1,x(P),P=-1),v=!0;var o=d;try{for(b(t),p=a(s);null!==p&&(!(p.expirationTime>t)||n&&!D());){var i=p.callback;if("function"==typeof i){p.callback=null,d=p.priorityLevel;var l=i(p.expirationTime<=t);t=e.unstable_now(),"function"==typeof l?p.callback=l:p===a(s)&&r(s),b(t)}else r(s);p=a(s)}if(null!==p)var c=!0;else{var f=a(u);null!==f&&A(_,f.startTime-t),c=!1}return c}finally{p=null,d=o,v=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var z,w=!1,E=null,P=-1,T=5,C=-1;function D(){return!(e.unstable_now()-C<T)}function k(){if(null!==E){var n=e.unstable_now();C=n;var t=!0;try{t=E(!0,n)}finally{t?z():(w=!1,E=null)}}else w=!1}if("function"==typeof g)z=function(){g(k)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,I=O.port2;O.port1.onmessage=k,z=function(){I.postMessage(null)}}else z=function(){h(k,0)};function N(n){E=n,w||(w=!0,z())}function A(n,t){P=h((function(){n(e.unstable_now())}),t)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(n){n.callback=null},e.unstable_continueExecution=function(){m||v||(m=!0,N(S))},e.unstable_forceFrameRate=function(n){0>n||125<n?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<n?Math.floor(1e3/n):5},e.unstable_getCurrentPriorityLevel=function(){return d},e.unstable_getFirstCallbackNode=function(){return a(s)},e.unstable_next=function(n){switch(d){case 1:case 2:case 3:var e=3;break;default:e=d}var t=d;d=e;try{return n()}finally{d=t}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(n,e){switch(n){case 1:case 2:case 3:case 4:case 5:break;default:n=3}var t=d;d=n;try{return e()}finally{d=t}},e.unstable_scheduleCallback=function(n,r,o){var i=e.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,n){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return n={id:f++,callback:r,priorityLevel:n,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(n.sortIndex=o,t(u,n),null===a(s)&&n===a(u)&&(y?(x(P),P=-1):y=!0,A(_,o-i))):(n.sortIndex=l,t(s,n),m||v||(m=!0,N(S))),n},e.unstable_shouldYield=D,e.unstable_wrapCallback=function(n){var e=d;return function(){var t=d;d=e;try{return n.apply(this,arguments)}finally{d=t}}}},3840:(n,e,t)=>{"use strict";n.exports=t(53)},1646:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat chunkSpiralNoise3(vec3 p) {\n  const int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  float nudge = 0.739513;\t// size of perpendicular vector\n\n  for (int i = 0; i < OCTAVES; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    value += (1.0 - abs(sin(p.y / scale) + cos(p.x / scale))) * scale;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n\n    nudge = 1.23525 + sin(1.31231 * scale);\n\n    p.xy += vec2(p.y, -p.x) * nudge;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    normalize_vector += nudge;\n    scale /= (1.1234);\n  }\n\n  return value / normalize_vector + 0.3;\n}\n\n\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nvec3 cloudsNoise(vec3 p)\n{\n  float noise;\n\n  float spiralNoise;\n  float pbmSimplexNoise;\n\n\n  float spiralNoise1 = chunkSpiralNoise3(p);\n  float simplex1 = pbm_simplex_noise3(p);\n\n  p += vec3(1.0, 0.5, 1.0) * simplex1;\n\n  spiralNoise = chunkSpiralNoise3(p);\n  spiralNoise += 0.72 * chunkSpiralNoise3(2.64356 * p.zxy + vec3(1.1231, 2.5321, 4.1445));\n\n  pbmSimplexNoise = pbm_simplex_noise3(p);\n\n  noise = mix(\n    spiralNoise,\n    0.8 - pbmSimplexNoise,\n    spiralNoise * 0.6\n  );\n\n  return vec3(\n    (pbmSimplexNoise * 1.8 + 0.8) * (1.0 + p.x * 0.5),\n    (1.0 - sin(spiralNoise)),\n    (spiralNoise * spiralNoise) * (1.0 + p.y * 0.5)\n  );\n}\n\nvoid main()\n{\n  // polar to cartesian\n  vec3 pos = vec3(\n    sin(uv.x * PI + PI / 2.0) * cos(uv.y * PI),\n    cos(uv.x * PI + PI / 2.0) * cos(uv.y * PI),\n    sin(uv.y * PI)\n  );\n\n  vec3 col = vec3(0.0);\n\n  vec3 neb = cloudsNoise(pos);\n\n  col = vec3(1.2, 0.05, 0.05);\n  // col = mix(col, vec3(0.05, 1.0, 0.2), neb.yzx);\n  col = mix(col, vec3(0.05, 0.1, 0.1), neb * neb );\n  col = mix(col, vec3(0.01, 0.8, 0.3), (neb.yzx * neb.yzx * 0.6));\n\n  col = clamp(col, 0.0, 1.0);\n\n  FragColor = vec4(col, 1.0);\n  // FragColor = vec4(vec3(neb.x), 1.0);\n}\n"},5246:n=>{n.exports="#version 300 es\n\nprecision mediump float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\nuniform mat4 u_MVP;\nuniform vec2 u_resolution;\n\n#define PI 3.14159265358\n#define TAU 6.28318530718\n#define EXP 2.71828\n#define MIN_STEP 0.3\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\nfloat chunkSpiralNoise3(vec3 p) {\n  const int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  float nudge = 0.739513;\t// size of perpendicular vector\n\n  for (int i = 0; i < OCTAVES; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    value += (1.0 - abs(sin(p.y / scale) + cos(p.x / scale))) * scale;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n\n    nudge = 1.23525 + sin(1.31231 * scale);\n\n    p.xy += vec2(p.y, -p.x) * nudge;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    normalize_vector += nudge;\n    scale /= (1.1234);\n  }\n\n  return value / normalize_vector + 0.3;\n}\n\nfloat rand(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rand2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453123);\n}\n\n\n#define MAX_STEPS 128\n#define MAX_DIST 20.0\n\n// can make huge hit distance for nice effect\n#define SURF_DIST 0.001  // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat smin3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\nfloat sceneDistance(vec3 p) {\n  vec3 p1 = fract(p * 2.0) - 0.5;\n\n  return abs(length(p1) - 0.2) / 2.0;\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarchCol(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  float col = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST && abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec3 colorize(float t) {\n\n  // stronger\n  // 1.0 - pow(t - 1.0, 2.0)\n  // 4.0 * pow(t - 0.5, 3.0) + 0.5\n  // pow(1.6 * t - 0.8, 3.0) + 0.5\n  // 2.0 * pow(t - 0.5, 3.0) + 0.25\n  // (exp(t) - 1.0) / (EXP - 1.0)\n  // (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n\n  // vec3 col = vec3(\n  //   (exp(t) - 1.0) / (EXP - 1.0),\n  //   2.0 * pow(t - 0.5, 3.0) + 0.25,\n  //   1.0 - pow(t - 1.0, 2.0)\n  // ) * vec3(\n  //   0.4,\n  //   0.3,\n  //   0.2\n  // );\n\n  // col += vec3(0.2, 1.0, 0.2) * smoothstep(0.95, 1.0, t * t);\n  // col += vec3(0.4, 0.5, 1.0) * smoothstep(0.96, 1.0, t);\n\n  vec3 col = vec3(t);\n\n  // t = clamp(t, 0.0, 1.0);\n\n  // vec3 col = mix(\n  //   vec3(0.1, 0.1, 0.6),\n  //   vec3(1.0, 0.8, 0.5),\n  //   pow(1.6 * t - 0.8, 3.0) + 0.5\n  // ) * mix(\n  //   vec3(0.1, 0.1, 0.0),\n  //   vec3(1.2, 0.8, 0.8),\n  //   (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n  // );\n\n  // col = vec3(\n  //   5.0 * pow(col.r, 1.2),\n  //   5.0 * pow(col.g, 1.6),\n  //   5.0 * pow(col.b, 1.6)\n  // );\n\n  return clamp(col, 0.0, 1.0);\n}\n\n// TODO ::: add RaySphere intersect\nvoid main() {\n  const float mouseFactor = 0.0005;\n  float resolution = u_resolution.y * u_MVP[0][0];\n\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.0 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  float d = rayMarchCol(rayOrigin, rayDirection);\n\n  vec3 col = vec3(0.0);\n\n  if(d < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d;\n      vec3 n = GetNormal(p);\n      vec3 r = reflect(rayDirection, n);\n\n      float dif = dot(n, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n      col = vec3(dif);\n  }\n\n  FragColor = vec4(col, 1.0);\n}\n"},3102:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\nuniform float u_thick;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n#define MAX_STEPS 512\n#define MAX_DIST 20.0\n#define SURF_DIST 0.001 // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat min3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\nfloat mapDist(vec3 p) {\n  vec3 p1 = twistSpace(p.yzx, 0.02);\n\n p1 = -0.5 + fract(p1 / 2.0);\n\n  float d = length(vec2(p1.x, p1.y)) - u_thick;\n\n  // float d = abs(length(p1) - 0.6);\n  // float d = sdGyroid(p, 1.0);\n\n  return d;\n}\n\nfloat sceneDistance(vec3 point) {\n  return mapDist(point);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 4.0, -0.5 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n  float d = rayMarch(rayOrigin, rayDirection);\n  vec3 col;\n\n  if(d < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d;\n      vec3 n = GetNormal(p);\n      vec3 r = reflect(rayDirection, n);\n\n      float dif = dot(n, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n      col = vec3(dif);\n  }\n\n  FragColor = vec4(col, 1.0);\n}\n"},6526:n=>{n.exports="#version 300 es\n\nprecision mediump float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform sampler2D u_Sampler;\nuniform float u_quality;\n\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat rand(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rand2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453123);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n// assign color to the media\nvec3 computeColor( float density, float radius )\n{\n\t// color based on density alone, gives impression of occlusion within\n\t// the media\n\tvec3 result = mix(vec3(1.0, 0.9, 0.8), vec3(0.4, 0.15, 0.1), density);\n\n\t// color added to the media\n\tvec3 colCenter = 7.0 * vec3(0.8, 1.0, 1.0);\n\tvec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n\tresult *= mix(colCenter, colEdge, min((radius + 0.05) / 0.9, 1.15));\n\n\treturn result;\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, float radius, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - radius;\n  float delta = b * b - c;\n  if (delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n// Applies the filmic curve from John Hable's presentation\n// More details at : http://filmicgames.com/archives/75\nvec3 ToneMapFilmicALU(vec3 _color)\n{\n\t_color = max(vec3(0), _color - vec3(0.004));\n\t_color = (_color * (6.2 * _color + vec3(0.5))) / (_color * (6.2 * _color + vec3(1.7)) + vec3(0.06));\n\treturn _color;\n}\n\nfloat densityFunction(vec3 point) {\n  float n = pbm_simplex_noise3(point * 1.8) * 1.3;\n  point = twistSpace(\n    point, 0.14\n  );\n\n  return abs(dot(point, vec3(n * 1.0, n * 1.0, 1.0)) - 0.8);\n}\n\nvec3 nebulaMarch(vec3 rayOrigin, vec3 rayDirection) {\n  // DITHERING\n\tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n\t// w: weighting factor\n\tfloat localDensity = 0.0, totalDensity = 0.0, w = 0.0;\n\n\t// t: length of the ray\n\t// d: distance function\n\tfloat dist = 1.0;\n  float rayLength = 0.0;\n\n  // smaller > gives volume, default = 0.2\n\n\tvec4 sum = vec4(0.0);\n\n  float min_dist = 0.0;\n  float max_dist = 0.0;\n  float rayStep = 0.0;\n  float invStep = 0.0;\n\n  float quality = (1.0 - u_control1);\n\n  // mainly controls thickness\n  float hitDist = 0.2 / (1.0 - quality * 0.4);\n\n  // march ray to the sphere\n  if (RaySphereIntersect(rayOrigin, rayDirection, 5.0, min_dist, max_dist))\n  {\n    // if t < min_dist return 0\n    // if t >= min_dist return 1\n\t  rayLength = min_dist * step(rayLength, min_dist);\n\n    // raymarch loop\n    for (int i = 0; i < 56; i++)\n    {\n      vec3 pos = rayOrigin + rayLength * rayDirection;\n      invStep = (1.0 - rayStep / 20.0 / u_control2);\n\n      // t > 10.0 - clipping\n      // d < 0.1 * rayLength - was mistake gets cutoff effect\n\n      // to check depth\n      // if (rayLength > 4.0 ) {\n      //   // totalDensity = smoothstep(dist, 0.08 * rayLength, 0.0);\n      //   return vec3(1.0, 0.0, 0.0);\n      //   totalDensity = 1.0;\n      //   break;\n      // }\n\n      // to check rayLength\n      // if (rayLength > max_dist) {\n      //   // totalDensity = smoothstep(dist, 0.08 * rayLength, 0.0);\n      //   return vec3(1.0, 0.0, 0.0);\n      //   totalDensity = 1.0;\n      //   break;\n      // }\n\n      // sum.a > 0.99 was here but it never hits\n      if (totalDensity > 0.9 || rayLength > 10.0  || rayLength > max_dist) {\n        break;\n      }\n\n      // why?\n      // if (dist < 0.04 * rayLength) {\n      //   // totalDensity = smoothstep(dist, 0.08 * rayLength, 0.0);\n      //   totalDensity = 1.0;\n      //   break;\n      // }\n\n      // evaluate distance function\n      // dist = densityFunction(pos) * smoothstep(2.0, 1.0, length(pos)); // cool volumetric effect\n\n      dist = densityFunction(pos) * smoothstep(5.0, 4.7, length(pos));\n\n      // if(dist < 0.05) {\n      //   return vec3(1.0, 0.0, 0.0);\n      // }\n\n      // change this string to control density\n      // dist = max(dist, 0.1 * u_control3);\n\n      // point light calculations\n      vec3 ldst = vec3(0.0) - pos;\n      float lDist = length(ldst);\n\n      // star in center\n      vec3 lightColor = vec3(1.0, 0.4 + abs(pos.y) * 0.2, 0.5 + pos.x * 0.5);\n\n      // star itself and bloom around the light\n      // star itself\n      // sum.rgb += (vec3(0.67, 0.75, 1.00) / (lDist * lDist * 10.0) / 80.0);\n      // bloom\n      sum.rgb += (lightColor / exp(lDist * lDist * lDist * 0.2) / invStep / 10.0);\n\n      if (dist < hitDist)\n      {\n\n        // compute local density\n        localDensity = hitDist - dist;\n\n        // compute weighting factor\n        w = (1.0 - totalDensity) * localDensity * 0.2;\n\n        // accumulate density\n        totalDensity += (w + 0.5 * invStep); // minor effect\n\n        vec4 col = vec4(computeColor(totalDensity, lDist), totalDensity);\n\n        // emission\n        col += col.a * vec4(col.rgb, 0.0);\n\n        // uniform scale density\n        col.a *= 0.1; // this shit is lower is better\n        // colour by alpha\n        col.rgb *= col.a;\n        // alpha blend in contribution\n        sum = sum + col * (1.0 - sum.a);\n      }\n\n      // still add density, even if not hit\n      // this is like fog\n      totalDensity += 0.03 *  invStep; // this\n\n      // DITHERING\n      dist = abs(dist) * (0.9 + 0.1 * rand(seed * vec2(i)));\n      // new version\n      // vec2 uv1 = uv * vec2(120.0, 280.0);\n      // dist = abs(dist) * (0.6 + 0.4 * u_control1 * texture(u_Sampler, vec2(uv1.y, -uv1.x + 0.5 * sin(4.0 * u_time + uv1.y * 4.0))).r);\n\n      // trying to optimize step size near the camera and near the light source\n\n      rayStep =\n        max(\n          dist * 0.4 * (1.0 - rayLength / 5.0),\n          0.05 * quality\n        );\n      rayLength += rayStep;\n    }\n    // simple scattering\n\t  sum *= 1.0 / exp(localDensity * 0.2) * 0.6;\n   \tsum = clamp(sum, 0.0, 1.0);\n    // this make s it burn\n    sum.a = totalDensity;\n    // sum.xyz = sum.xyz * sum.yzx * (3.0 - 2.0 * sum.xyz); // wow\n    sum.xyz = sum.xyz * sum.xyz * (3.0 - 2.0 * sum.xyz);\n\t}\n  // TONEMAPPING\n  // sum.xyz = ToneMapFilmicALU(sum.xyz * 0.5);\n\n  vec3 polar = cartesianToPolar(rayDirection.xzy);\n  vec2 starzProj = vec2(\n    (polar.z) / TAU + 0.5,\n    (polar.y) / TAU + 0.5\n  );\n  vec4 strz = texture(u_Sampler, starzProj, 0.0);\n\n  return mix(sum.rgb, strz.rgb, 1.0 - pow(sum.a, 0.2));\n  // return mix(sum.rgb, strz.rgb, 1.0 - sum.a);\n\n  // return strz.rgb;\n}\n\nvoid main()\n{\n  vec3 rayDirection = normalize(vec3(-uv.x, -uv.y, -1.0));\n  // wow\n\t// vec3 rayOrigin = normalize(vec3(-2.0 + 4.0 *  u_control1, -0.4, 2.0)) * (0.5 + u_scrollValue * 1.5);\n\tvec3 rayOrigin = vec3(0, 0, (0.6 + u_scrollValue * 1.0)) ;\n\n  const float mouseFactor = 0.002;\n\n  float angl1 = -u_mouseY - 15.0, angl2 = (u_mouseX + 25.0);\n\n  R(rayDirection.yz, angl1 * mouseFactor * PI * 2.0);\n  R(rayDirection.xz, angl2 * mouseFactor * PI * 2.0);\n  R(rayOrigin.yz, angl1 * mouseFactor * PI * 2.0);\n  R(rayOrigin.xz, angl2 * mouseFactor * PI * 2.0);\n\n  // float denisityIntegral = rayMarchDensity(rayOrigin, rayDirection);\n  // vec3 col = vec3(denisityIntegral);\n\n  // draw line\n  // col += rayMarch(rayOrigin, rayDirection);\n\n  vec3 col = nebulaMarch(rayOrigin, rayDirection);\n\n  // TESTS\n\n  // 1.0 test noise\n  // FragColor = debug3dNoise(uv);\n\n  FragColor = vec4(col, 1.0);\n}\n"},1134:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\n// source https://www.shadertoy.com/view/MsVXWW\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform sampler2D u_Sampler;\n\n#define MAX_STEPS 200\n#define MAX_DIST 3.0\n#define SURF_DIST 0.00001 // hit distance\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\nfloat rand(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rand2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453123);\n}\n\n\nfloat densityFunction(vec3 point) {\n  // shift space by noise\n  float n = pbm_simplex_noise3(1.0 * point);\n  point = point * (1.0 + n * 0.2) + n * 0.2;\n\n  // twist space\n  point = twistSpace(point, 2.0);\n\n  // plane\n  return abs(dot(point, vec3(1.0, 1.0, 1.0)) - 1.0);\n}\n\n// assign color to the media\nvec3 computeColor( float density, float radius )\n{\n\t// color based on density alone, gives impression of occlusion within\n\t// the media\n\tvec3 result = mix(vec3(1.0, 0.9, 0.8), vec3(0.4, 0.15, 0.1), density);\n\n\t// color added to the media\n\tvec3 colCenter = 7.0 * vec3(0.8, 1.0, 1.0);\n\tvec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n\tresult *= mix(colCenter, colEdge, min((radius + 0.05) / 0.9, 1.15));\n\n\treturn result;\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, float radius, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - radius;\n  float delta = b * b - c;\n  if (delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n// Applies the filmic curve from John Hable's presentation\n// More details at : http://filmicgames.com/archives/75\nvec3 ToneMapFilmicALU(vec3 _color)\n{\n\t_color = max(vec3(0), _color - vec3(0.004));\n\t_color = (_color * (6.2 * _color + vec3(0.5))) / (_color * (6.2 * _color + vec3(1.7)) + vec3(0.06));\n\treturn _color;\n}\n\nfloat easeInOutQuad(float x) {\n  float two = 2.0;\n  return x < 0.5 ?\n    two * x * x :\n    1.0 - (-two * x + two) * (-two * x + two) / two;\n}\n\nvec3 nebulaMarch(vec3 rayOrigin, vec3 rayDirection) {\n  // DITHERING\n\tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n\t// w: weighting factor\n\tfloat localDensity = 0.0, totalDensity = 0.0, w = 0.0;\n\n\t// t: length of the ray\n\t// d: distance function\n\tfloat dist = 1.0;\n  float rayLength = 0.0;\n\n  float hitDist = 0.4; // tweak this smaller, gives volume\n\n\tvec4 sum = vec4(0.0);\n\n  float min_dist = 0.0;\n  float max_dist = 0.0;\n\n  // march ray to the sphere\n  if (RaySphereIntersect(rayOrigin, rayDirection, 2.5, min_dist, max_dist))\n  {\n    // if t < min_dist return 0\n    // if t >= min_dist return 1\n\t  rayLength = min_dist * step(rayLength, min_dist);\n\n    // raymarch loop\n    for (int i = 0; i < 56; i++)\n    {\n      vec3 pos = rayOrigin + rayLength * rayDirection;\n\n      // t > 10.0 - clipping\n      // d < 0.1 * rayLength - was mistake gets cutoff effect\n      if (totalDensity > 0.9 || rayLength > 10.0 || sum.a > 0.99 || rayLength > max_dist) {\n        break;\n      }\n\n      // evaluate distance function\n      dist = densityFunction(pos);\n\n      // change this string to control density\n      dist = max(dist, 0.2);\n\n      // point light calculations\n      vec3 ldst = vec3(0.0) - pos;\n      float lDist = max(length(ldst), 0.001);\n\n      // star in center\n      vec3 lightColor = vec3(1.0, 0.6 + pos.z * 0.3, 0.4 + pos.x * 0.2);\n      // star itself and bloom around the light\n      sum.rgb += (lightColor / (pow(lDist, 1.5)) / 30.0);\n\n      if (dist < hitDist)\n      {\n\n        // compute local density\n        localDensity = hitDist - dist;\n\n        // compute weighting factor\n        w = (1.0 - totalDensity) * localDensity;\n\n        // accumulate density\n        totalDensity += w + 1.0 / (40.0); // minor effect\n\n        vec4 col = vec4(computeColor(totalDensity, lDist), totalDensity);\n\n        // uniform scale density\n        col.a *= 0.03; // this shit is lower is better\n        // colour by alpha\n        col.rgb *= col.a;\n        // alpha blend in contribution\n        sum = sum + col * (1.0 - sum.a);\n      }\n\n      // still add density, even if not hit\n      // 40.0 is ok\n      // this is like fog\n      totalDensity += 1.0 / (40.0);\n\n      // enforce minimum stepsize\n      // minor effect\n      dist = max(dist, 0.2);\n\n      // DITHERING\n      dist = abs(dist) * (0.8 + 0.2 * rand(seed * vec2(i)));\n\n      // trying to optimize step size near the camera and near the light source\n      rayLength +=\n        max(\n          dist * 0.3 *\n            max(\n              min(\n                length(ldst),\n                length(rayOrigin)\n              ),\n              1.0\n            ),\n          0.02\n        );\n    }\n\n    // simple scattering\n\t  sum *= 1.0 / exp(localDensity * 0.2);\n   \tsum = clamp(sum, 0.0, 1.0);\n\n    // this make s it burn\n    sum.a = totalDensity;\n    sum.xyz = sum.xyz * sum.xyz * (3.0 - 2.0 * sum.xyz);\n\t}\n\n  vec3 polar = cartesianToPolar(rayDirection.xzy);\n  vec2 starzProj = vec2(\n    (polar.z) / TAU + 0.5,\n    (polar.y) / TAU + 0.5\n  );\n  vec4 strz = texture(u_Sampler, starzProj, 0.0);\n\n  sum.rgb = ToneMapFilmicALU(sum.rgb * 2.2);\n  return mix(sum.rgb, strz.rgb, 1.0 - sum.a);\n}\n\nvoid main()\n{\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -(0.5 + u_scrollValue * 1.0));\n\n  const float mouseFactor = 0.002;\n  R(rayDirection.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayDirection.xz, u_mouseX * mouseFactor * PI * 2.0);\n  R(rayOrigin.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayOrigin.xz, u_mouseX * mouseFactor * PI * 2.0);\n\n  // float denisityIntegral = rayMarchDensity(rayOrigin, rayDirection);\n  // vec3 col = vec3(denisityIntegral);\n\n  // draw line\n  // col += rayMarch(rayOrigin, rayDirection);\n\n  vec3 col = nebulaMarch(rayOrigin, rayDirection);\n\n  // TESTS\n\n  // 1.0 test noise\n  // FragColor = debug3dNoise(uv);\n\n  FragColor = vec4(col, 1.0);\n}\n"},1027:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\n// source https://www.shadertoy.com/view/MsVXWW\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform sampler2D u_Sampler;\n\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\n#define ROTATION\n//#define MOUSE_CAMERA_CONTROL\n\n#define DITHERING\n#define BACKGROUND\n#define MAX_STEPS 200\n#define MAX_DIST 3.0\n#define SURF_DIST 0.00001 // hit distance\n\n//#define TONEMAPPING\n\n//-------------------\n#define PI  3.14159265358\n#define TAU 6.28318530718\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat map2(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map2(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map2(value.x, min1, max1, min2, max2),\n    map2(value.y, min1, max1, min2, max2),\n    map2(value.z, min1, max1, min2, max2)\n  );\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nfloat rand(vec2 co)\n{\n\treturn fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//=====================================\n// otaviogood's noise from https://www.shadertoy.com/view/ld2SzK\n//--------------------------------------------------------------\n// This spiral noise works by successively adding and rotating sin waves while increasing frequency.\n// It should work the same on all computers since it's not based on a hash function like some other noises.\n// It can be much faster than other noise functions if you're ok with some repetition.\n\nconst float nudge = 0.739513;\t// size of perpendicular vector\n\nfloat normalizer = 1.0 / sqrt(1.0 + nudge * nudge);\t// pythagorean theorem on that perpendicular to maintain scale\n\nfloat SpiralNoiseC(vec3 p)\n{\n  float n = 0.0;\t// noise amount\n  float iter = 1.0;\n  for (int i = 0; i < 8; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    n += -abs(sin(p.y * iter) + cos(p.x * iter)) / iter;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n    p.xy += vec2(p.y, -p.x) * nudge;\n    p.xy *= normalizer;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    p.xz *= normalizer;\n    // increase the frequency\n    iter *= 1.733733;\n  }\n  return n;\n}\n\nfloat SpiralNoise3D(vec3 p)\n{\n  float n = 0.0;\n  float iter = 1.0;\n  for (int i = 0; i < 5; i++)\n  {\n    n += (sin(p.y * iter) + cos(p.x * iter)) / iter;\n    p.xz += vec2(p.z, -p.x) * nudge;\n    p.xz *= normalizer;\n    iter *= 1.33733;\n  }\n  return n;\n}\n\nfloat NebulaNoise(vec3 p)\n{\n  float final = p.y + 4.5;\n  // frequent from (-5, 0);\n  // mid-range noise\n  final -= SpiralNoiseC(p.xyz);\n  // less frequent noise (-12, - 2)\n  // large scale features\n  final += SpiralNoiseC(p.zxy * 0.5123 + 100.0) * 4.0;\n  // very smooth large scale noise\n  // more large scale features, but 3d\n  final -= SpiralNoise3D(p);\n\n  return final;\n}\n\n// combination of noises around (0.0, 30.0)\nfloat mapNebulaDensity(vec3 p)\n{\n  // NebulaNoise around (-30, 10)\n  float NebNoise = abs(NebulaNoise(p / 0.5) * 0.5);\n  return NebNoise + 0.03;\n}\n//--------------------------------------------------------------\n\n// assign color to the media\nvec3 computeColor( float density, float radius )\n{\n\t// color based on density alone, gives impression of occlusion within\n\t// the media\n\tvec3 result = mix(vec3(1.0, 0.9, 0.8), vec3(0.4, 0.15, 0.1), density);\n\n\t// color added to the media\n\tvec3 colCenter = 7.0 * vec3(0.8, 1.0, 1.0);\n\tvec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n\tresult *= mix(colCenter, colEdge, min((radius + 0.05) / 0.9, 1.15));\n\n\treturn result;\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, float radius, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - radius;\n  float delta = b * b - c;\n  if (delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n// Applies the filmic curve from John Hable's presentation\n// More details at : http://filmicgames.com/archives/75\nvec3 ToneMapFilmicALU(vec3 _color)\n{\n\t_color = max(vec3(0), _color - vec3(0.004));\n\t_color = (_color * (6.2 * _color + vec3(0.5))) / (_color * (6.2 * _color + vec3(1.7)) + vec3(0.06));\n\treturn _color;\n}\n\nfloat easeInOutQuad(float x) {\n  float two = 2.0;\n  return x < 0.5 ?\n    two * x * x :\n    1.0 - (-two * x + two) * (-two * x + two) / two;\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 perm(vec4 x) {\n  return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat noise3d(vec3 p) {\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat stars(vec2 p, float seed) {\n  p *= 5.0 * seed;\n  float n = Noise21(floor(p));\n\n  p = fract(p);\n  vec2 shift = vec2(n - 0.5, fract(n * 10.0));\n  float d = length(p - shift);\n  float m = smoothstep(0.02 * n * sqrt(seed), 0.0, d) * n;\n  return m;\n}\n\nvec3 polarNormalize (vec3 polar) {\n  return vec3(polar.x, asin(polar.y / PI) * PI, polar.z);\n}\n\nfloat SpherePlane(vec3 p) {\n  vec4 s = vec4(0, 1, 6, 1);\n\n  float sphereDist = length(p - s.xyz) - s.w;\n  float planeDist = p.y;\n\n  float d = min(sphereDist, planeDist);\n\n  return d;\n}\n\nmat2 Rot(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdGyroid(vec3 p, float scale) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - 0.16;\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat SmoothNoise(vec2 p) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(p);\n  vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(p));\n\treturn mix(\n    mix(rand(b), rand(b + d.yx), f.x),\n    mix(rand(b + d.xy), rand(b + d.yy), f.x)\n    , f.y\n  );\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat GetDist(vec3 p) {\n  // float box = sdBox(p - vec3(0.0, 1.0, 0.0), vec3(1.0));\n\n  // float angle = (1.0 - p.y) * (-PI + u_control5 * TAU);\n  // p = vec3(\n  //   p.x * sin(angle) + p.z * cos(angle),\n  //   p.y * u_control3,\n  //   p.x * - cos(angle) + p.z * sin(angle)\n  // );\n\n  // float sphereDist = sdSphere(p, 0.5);\n  // float gyroid = sdGyroid(p, 1.0 + u_control2 * 8.0);\n  // float d = smin(sphereDist, gyroid * 0.9, -0.07);\n  // return d;\n\n  return length(p.xz) - 0.005;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n  vec3 f = normalize(l - p);\n  vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n  vec3 u = cross(f, r);\n  vec3 c = p + f * z;\n  vec3 i = c + uv.x * r + uv.y * u;\n  vec3 d = normalize(i - p);\n  return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = GetDist(p);\n    dO += dS;\n    if (abs(dS) < SURF_DIST) {\n      return 1.0;\n    }\n    if (dO > MAX_DIST) {\n      0.0;\n    }\n  }\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = GetDist(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    GetDist(p - e.xyy),\n    GetDist(p - e.yxy),\n    GetDist(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat densitySphere(vec3 p) {\n  if (length(p) < 1.0) {\n    return 1.0 - length(p);\n  }\n  return 0.0;\n}\n\nfloat densityFunction2(vec3 p) {\n  float noise = mapNebulaDensity(3.0 * p + vec3(1.0));\n\n  return clamp(map2(noise, -2.5 + 5.0 * u_control3, u_control4 * 8.0, 0.0, 1.0), 0.0, 1.0); // * densitySphere(p);\n  // return densitySphere(p);\n}\n\nfloat densityFunction(vec3 p) {\n  float noise = mapNebulaDensity(3.0 * p + vec3(1.0));\n\n  return clamp(map2(noise, u_control3 * -10.0, u_control4 * 10.0, 0.0, 1.0), 0.0, 1.0); // * densitySphere(p);\n  // return densitySphere(p);\n}\n\nfloat rayMarchLight(vec3 rayOrigin, vec3 rayDirection) {\n  float distanceStep = 0.03;\n\n  float maxDistance = 0.0;\n  float minDistance = 0.0;\n  float radius = 1.0;\n\n  bool isIntersecting = RaySphereIntersect(\n    rayOrigin, rayDirection, radius, minDistance, maxDistance\n  );\n\n  if(isIntersecting) {\n    float totalDensity = 1.0;\n    float rayLength = 0.0;\n    vec3 p = rayOrigin;\n    for(int i = 0; i < MAX_STEPS && rayLength < maxDistance; i++) {\n      float density = densityFunction(p) * distanceStep;\n      totalDensity *= (1.0 - density * 5.0 * u_control1); // absorption\n      if (totalDensity < 0.1) {\n        break;\n      }\n      rayLength += distanceStep;\n      p = rayOrigin + rayDirection * rayLength;\n    }\n\n    return totalDensity;\n  }\n\n  return 0.0;\n}\n\nfloat rayMarchDensity(vec3 rayOrigin, vec3 rayDirection) {\n  float distanceStep = 0.05;\n  vec3 lightPos = normalize(vec3(\n    0.5 * (cos(TAU) - sin(TAU)),\n    0.5,\n    0.5 * (sin(TAU) + cos(TAU))\n  ));\n\n  float maxDistance = 0.0;\n  float minDistance = 0.0;\n  float radius = 1.0;\n\n  bool isIntersecting = RaySphereIntersect(\n    rayOrigin, rayDirection, radius, minDistance, maxDistance\n  );\n\n  if(isIntersecting) {\n    float totalTranslucence = 1.0;\n    float color = 0.0;\n    float rayLength = minDistance;\n\n    vec3 p = rayOrigin;\n    for(int i = 0; i < MAX_STEPS && rayLength < maxDistance; i++) {\n\n      float density = densityFunction(p) * distanceStep;\n\n      if (density > 0.8) {\n        break;\n      }\n\n      float light = rayMarchLight(p, lightPos);\n\n      totalTranslucence *= (1.0 - density * 60.0 * u_control5);\n      color += density * (1.0 - totalTranslucence) * light;\n      rayLength += distanceStep;\n      p = rayOrigin + rayDirection * rayLength;\n    }\n\n    return color;\n  }\n\n  return 0.0;\n}\n\n\nvec4 debug3dNoise(vec2 uv) {\n  vec3 dummyPoint = vec3(uv.x, uv.y, 2.0 * u_control3) * 10.0;\n  float noise = mapNebulaDensity(dummyPoint);\n  noise = map2(noise, -2.0, 7.0, 0.1, 1.0);\n  return vec4(noise, noise, noise, 1.0);\n}\n\nfloat drawLine (vec2 p1, vec2 p2, vec2 uv, float a)\n{\n    float r = 0.;\n    float one_px = 1.; //not really one px\n\n    // get dist between points\n    float d = distance(p1, p2);\n\n    // get dist between current pixel and p1\n    float duv = distance(p1, uv);\n\n    //if point is on line, according to dist, it should match current uv\n    r = 1.-floor(1.-(a*one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));\n\n    return r;\n}\n\nvec3 nebulaMarch(vec3 rayOrigin, vec3 rayDirection) {\n  // DITHERING\n\tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n\t// w: weighting factor\n\tfloat localDensity = 0.0, totalDensity = 0.0, w = 0.0;\n\n\t// t: length of the ray\n\t// d: distance function\n\tfloat dist = 1.0;\n  float rayLength = 0.0;\n\n  float hitDist = 0.3 * u_control1; // tweak this smaller, gives volume\n\n\tvec4 sum = vec4(0.0);\n\n  float min_dist = 0.0;\n  float max_dist = 0.0;\n\n  // march ray to the sphere\n  if (RaySphereIntersect(rayOrigin, rayDirection, 2.5, min_dist, max_dist))\n  {\n    // if t < min_dist return 0\n    // if t >= min_dist return 1\n\t  rayLength = min_dist * step(rayLength, min_dist);\n\n    // raymarch loop\n    for (int i = 0; i < 56; i++)\n    {\n      vec3 pos = rayOrigin + rayLength * rayDirection;\n\n      // t > 10.0 - clipping\n      // d < 0.1 * rayLength - was mistake gets cutoff effect\n      if (totalDensity > 0.9 || rayLength > 10.0 || sum.a > 0.99 || rayLength > max_dist) {\n        break;\n      }\n\n      // evaluate distance function\n      dist = densityFunction2(pos);\n\n      // change this string to control density\n      // d = max(d, 0.5 * u_control1);\n\n      // point light calculations\n      vec3 ldst = vec3(0.0) - pos;\n      float lDist = max(length(ldst), 0.001);\n\n      // star in center\n      vec3 lightColor = vec3(1.0, 0.6 + pos.z * 0.3, 0.4 + pos.x * 0.2);\n      // star itself and bloom around the light\n      sum.rgb += (lightColor / (pow(lDist, 1.5)) / (80.0 * u_control5));\n\n      if (dist < hitDist)\n      {\n\n        // compute local density\n        localDensity = hitDist - dist;\n\n        // compute weighting factor\n        w = (1.0 - totalDensity) * localDensity;\n\n        // accumulate density\n        totalDensity += w + 1.0 / (100.0); // minor effect\n\n        vec4 col = vec4(computeColor(totalDensity, lDist), totalDensity);\n\n        // uniform scale density\n        col.a *= 0.01; // this shit is lower is better\n        // colour by alpha\n        col.rgb *= col.a;\n        // alpha blend in contribution\n        sum = sum + col * (1.0 - sum.a);\n      }\n\n      // still add density, even if not hit\n      // 40.0 is ok\n      // this is like fog\n      totalDensity += 1.0/(40.0);\n\n      // enforce minimum stepsize\n      // minor effect\n      dist = max(dist, 0.1);\n\n      // DITHERING\n      dist = abs(dist) * (0.8 + 0.2 * rand(seed * vec2(i)));\n\n      // trying to optimize step size near the camera and near the light source\n      rayLength +=\n        max(\n          dist * 0.3 *\n            max(\n              min(\n                length(ldst),\n                length(rayOrigin)\n              ),\n              1.0\n            ),\n          0.02\n        );\n    }\n    // simple scattering\n\t  sum *= 1.0 / exp(localDensity * 0.2) * 0.6;\n   \tsum = clamp(sum, 0.0, 1.0);\n    // this make s it burn\n    sum.a = totalDensity;\n    sum.xyz = sum.xyz * sum.xyz * (3.0 - 2.0 * sum.xyz);\n\t}\n\n//   // BACKGROUND\n//   // if (totalDensity < 0.8)\n//   // {\n//   //   vec3 stars = vec3(Noise21(rayDirection.yz));\n//   //   vec3 starbg = vec3(0.0);\n//   //   starbg = mix(\n//   //     starbg,\n//   //     vec3(0.8, 0.9, 1.0),\n//   //     smoothstep(0.99, 1.0, stars) * clamp(dot(vec3(0.0), rayDirection) + 0.75, 0.0, 1.0)\n//   //   );\n//   //   starbg = clamp(starbg, 0.0, 1.0);\n//   //   sum.xyz += stars;\n//   // }\n\n//   // TONEMAPPING\n//   debugColor = ToneMapFilmicALU(sum.xyz * 2.2);\n\n//   // debug noise\n//   // vec3 polar4 = cartesianToPolar(rayDirection.xzy);\n//   // polar4.x = u_scrollValue;\n//   // debugColor = vec3(\n//   //   map2(mapNebulaDensity(polar4) * 4.0, 0.0, 30.0, 0.0, 1.0)\n//   // );\n\n  // // MY STARS\n  vec3 polar1 = cartesianToPolar(rayDirection.xzy);\n\n  vec2 starzProj = vec2(\n    (polar1.z) / TAU + 0.5,\n    (polar1.y) / TAU + 0.5\n  );\n  vec4 strz = texture(u_Sampler, starzProj, 0.0);\n\n  // TODO ::: try optimize\n  // float strz = stars(polarNormalize(polar1).yz, 5.43141);\n  // strz += stars(polarNormalize(polar2).yz, 6.4324);\n  // strz += stars(polarNormalize(polar3).yz, 7.11231);\n\n\n  return mix(sum.xyz, strz.rgb, 1.0 - sum.a);\n  // return vec3(strz.rgb);\n}\n\nvoid main()\n{\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -(0.5 + u_scrollValue * 1.0));\n\n  const float mouseFactor = 0.002;\n  R(rayDirection.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayDirection.xz, u_mouseX * mouseFactor * PI * 2.0);\n  R(rayOrigin.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayOrigin.xz, u_mouseX * mouseFactor * PI * 2.0);\n\n  // float denisityIntegral = rayMarchDensity(rayOrigin, rayDirection);\n  // vec3 col = vec3(denisityIntegral);\n\n  // draw line\n  // col += rayMarch(rayOrigin, rayDirection);\n\n  vec3 col = nebulaMarch(rayOrigin, rayDirection);\n\n  // TESTS\n\n  // 1.0 test noise\n  // FragColor = debug3dNoise(uv);\n\n  FragColor = vec4(col, 1.0);\n}\n"},2919:n=>{n.exports="#version 300 es\n\nprecision mediump float;\nlayout(location = 0) in vec2 aPos;\n\nout vec2 uv;\n\nuniform mat4 u_MVP;\n\nvoid main() {\n  gl_Position = vec4(aPos, .0f, 1.0f);\n  vec4 uv_out =  gl_Position * inverse(u_MVP);\n  uv = uv_out.xy;\n}\n"},1190:n=>{n.exports="#version 300 es\n\nprecision mediump float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\nuniform float u_pixelate;\n\n#define PI 3.14159265358\n#define TAU 6.28318530718\n#define EXP 2.71828\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\nfloat chunkSpiralNoise3(vec3 p) {\n  const int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  float nudge = 0.739513;\t// size of perpendicular vector\n\n  for (int i = 0; i < OCTAVES; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    value += (1.0 - abs(sin(p.y / scale) + cos(p.x / scale))) * scale;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n\n    nudge = 1.23525 + sin(1.31231 * scale);\n\n    p.xy += vec2(p.y, -p.x) * nudge;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    normalize_vector += nudge;\n    scale /= (1.1234);\n  }\n\n  return value / normalize_vector + 0.3;\n}\n\n\n#define MAX_STEPS 128\n#define MAX_DIST 20.0\n\n// can make huge hit distance for nice effect\n#define SURF_DIST 0.001  // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat min3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\n  // vec3 randomSpaceShift(vec3 p) {\n  //   p += simplex_noise3(p, 0.01) * 0.2;\n  //   return p;\n  // }\n\nfloat mapDist(vec3 p) {\n  //vec3 p1 = shwistSpace(p.xyz, -0.2 + 0.4 * u_control4);\n  // vec3 p1 = randomSpaceShift(p);\n  vec3 p1;\n\n  p1 = pixelateSpace(p, 0.1 + 1.0 * u_pixelate);\n  p1 = p1 + (-2.5 + chunkSpiralNoise3(p1)) * 0.2;\n  // vec3 p1 = shwankSpace(p, 0.5 * u_control5);\n\n  // don't do this, trust me\n  // vec3 p1 = polarTocartesian(p);\n  // vec3 p1 = p;\n  // multiply spheres\n  // vec3 p1 = (-0.5 + fract(p / 8.0)) * 8.0;\n  // float d = length(p1) - 0.3;\n\n  // float d = length(vec2(p1.x, p1.y)) - 0.3;\n\n  // float s = sdSphere(p1, 4.0);\n  float g1 = sdGyroid2(p1, 1.0, 0.01);\n  float g2 = sdGyroid3(p1, 0.5, 0.01);\n  float d = smin(g1, g2, -0.1) * 0.5;\n  // d = smin(s, d, -0.1);\n\n  return d;\n}\n\nfloat sceneDistance(vec3 point) {\n  return mapDist(point);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec2 rayMarchCol(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  float col = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    col += smoothstep(2.0, 0.0, dS) * 0.13;\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return vec2(col, dO);\n}\n\nvec3 colorize(float t) {\n\n  // 1.0 - pow(t - 1.0, 2.0)\n  // 4.0 * pow(t - 0.5, 3.0) + 0.5\n  // pow(1.6 * t - 0.8, 3.0) + 0.5\n  // (exp(t) - 1.0) / (EXP - 1.0)\n  // (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n\n  vec3 col = vec3(\n    4.0 * pow(t - 0.5, 3.0) + 0.5,\n    (exp(0.8 * t) - 1.0) / (pow(EXP, 0.8) - 1.0),\n    pow(1.6 * t - 0.8, 3.0) + 0.5\n  );\n\n  col = mix(\n    col,\n    vec3(1.0, 0.4, 0.1),\n    smoothstep(-0.0, 0.1, (0.2 - pow(2.0 - 4.0 * t, 2.0)))\n  );\n\n  // t = clamp(t, 0.0, 1.0);\n\n  // vec3 col = mix(\n  //   vec3(0.1, 0.1, 0.6),\n  //   vec3(1.0, 0.8, 0.5),\n  //   pow(1.6 * t - 0.8, 3.0) + 0.5\n  // ) * mix(\n  //   vec3(0.1, 0.1, 0.0),\n  //   vec3(1.2, 0.8, 0.8),\n  //   (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n  // );\n\n  // col = vec3(\n  //   5.0 * pow(col.r, 1.2),\n  //   5.0 * pow(col.g, 1.6),\n  //   5.0 * pow(col.b, 1.6)\n  // );\n\n  return clamp(col * 1.1 - 0.1, 0.0, 1.0);\n}\n\n// TODO ::: add RaySphere intersect\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.0 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  vec2 d = rayMarchCol(rayOrigin, rayDirection);\n\n  float t = clamp(d[0] * 0.1, 0.0, 1.0) ;\n  t *= (1.9 - length(uv) * 0.8);\n  // t = clamp(t, 0.0, 1.0);\n  vec3 col = colorize(t);\n\n  if(d[1] < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d[1];\n      vec3 n = GetNormal(p);\n      //vec3 r = reflect(rayDirection, n);\n\n      //float dif = dot(n, normalize(vec3(0.0, 2.0, 0.0))) * 0.5 + 0.5;\n      col += vec3(1.0, 1.0, 1.0) * (1.0 - t);\n  }\n  // col = vec3(0.0, 1.0, 0.0);\n  FragColor = vec4(clamp(col, 0.0, 1.0), 1.0);\n}\n"},6093:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n#define MAX_STEPS 200\n#define MAX_DIST 30.0\n#define SURF_DIST 0.005 // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nvec2 dPlane(vec3 point) {\n  float dist = point.y + 0.6 * (1.0 - 0.3 * cos(point.x * 2.0  + u_time) + 0.3 * sin(point.z * 2.0  + u_time));\n  float id = 0.2 + 0.8 * Noise21(floor(point.xz * 1.0));\n  return vec2(dist, id);\n}\n\nfloat dSphere(vec3 point) {\n  return length(point) - 0.7 * (1.0 - 0.3 * cos(point.x * 2.0  + u_time) + 0.3 * sin(point.z * 2.0  + u_time));\n}\n\n\n// split sphere by chunks, reflect in floor\n// use this irregular shpere\n// return length(point) - 0.7 * (cos(point.x) + sin(point.y));\n\nfloat sceneDistance(vec3 point) {\n  float sphere = dSphere(point);\n  vec2 plane = dPlane(point);\n  return smin(sphere, plane.x, 0.2);\n}\n\nfloat sceneMaterial(vec3 point) {\n  float sphere = dSphere(point);\n  vec2 plane = dPlane(point);\n  float d = min(sphere, plane.x);\n\n  if(d == plane.x) {\n    return plane.y;\n  }\n\n  return 1.0;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, 1.0 - u_scrollValue * 3.0);\n  float mouseY1 = max(u_mouseY, -70.0);\n\n  vec2 rot = vec2(\n    mouseY1 * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  float d = rayMarch(rayOrigin, rayDirection);\n\n  vec3 col;\n  float dif;\n  float dif1;\n  if(d < MAX_DIST) {\n    vec3 p = rayOrigin + rayDirection * d;\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(rayDirection, n);\n\n    float mat = sceneMaterial(p);\n    dif = dot(n, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n    dif *= mat;\n\n    if (mat > 0.0) {\n      vec3 reflectDirection = normalize(r) + vec3(pbm_simplex_noise3(p)) * 0.1;\n      vec3 reflectOrigin = p + reflectDirection * SURF_DIST  + 0.02;\n\n      float d1 = rayMarch(reflectOrigin, reflectDirection);\n\n      if (d1 < MAX_DIST) {\n        col.b = 1.0;\n\n        vec3 p1 = reflectOrigin + reflectDirection * d1;\n        vec3 n1 = GetNormal(p1);\n\n        dif1 = dot(n1, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n        dif = mix(dif, dif1, (1.0 - mat * 0.3));\n      }\n    }\n  }\n\n  col = vec3(dif);\n  FragColor = vec4(col, 1.0);\n}\n"},7412:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform float u_gamma;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 hsl2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n#define MAX_STEPS 200\n#define MAX_DIST 30.0\n#define SURF_DIST 0.005 // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nvec3 hash33(vec3 p) {\n    float n = sin(dot(p , vec3(7, 157, 113)));\n    return fract(vec3(2097152, 262144, 32768)*n);\n}\n\nfloat hash21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341) * sin(floor(u_time / 2.0)));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\nfloat hash21_2(vec2 p){\n  return fract(sin(p.x + p.y + u_time / 5.0) * cos(p.y * 2.1554 + u_time / 5.0));\n}\n\nfloat dPlane(vec3 point) {\n  float dist = point.y + 0.8;\n  return dist;\n}\n\nvec2 dSphere(vec3 point) {\n  float angle = 0.0;\n\tif (point.z != 0.0) {\n    angle = clamp(atan(point.x, point.z), -PI, PI);\n  }\n\telse if (point.x > 0.0) {\n\t\tangle = PI * 0.5;\n\t}\n\telse {\n\t\tangle = -PI * 0.5;\n\t}\n\n  vec2 param = vec2(\n    point.y * 4.0,\n    angle\n  ) * 4.0;\n\n  float id = 1.0 + hash21_2(floor(param));\n\n  float dist = length(point) - 0.7 * (cos(point.x) + sin(point.y));\n\n  return vec2(dist, id);\n}\n\nfloat sceneDistance(vec3 point) {\n  vec2 sphere = dSphere(point);\n  float plane = dPlane(point);\n  float d = min(sphere.x, plane);\n  return d;\n}\n\nvec4 sceneMaterial(vec3 point) {\n  vec2 sphere = dSphere(point);\n  float plane = dPlane(point);\n  float d = min(sphere.x, plane);\n\n  if(d == sphere.x) {\n    return vec4(hsl2rgb(vec3(smoothstep(1.0, 2.0, sphere.y), 1.0, 0.6)), sphere.y);\n  }\n\n  return vec4(0.0);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (abs(dS) < SURF_DIST || dO > MAX_DIST) {\n      break;\n    }\n  }\n  return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nvec3 renderOne(vec3 rayOrigin, vec3 rayDirection) {\n  float d = rayMarch(rayOrigin, rayDirection);\n\n  vec3 col;\n  float dif = 0.0;\n  float dif1 = 0.0;\n\n  if(d < MAX_DIST) {\n    vec3 p = rayOrigin + rayDirection * d;\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(rayDirection, n);\n\n    vec4 shit = sceneMaterial(p);\n\n    float mat = shit.w;\n    if (mat > 1.0 && d < MAX_DIST) {\n      float cor = 0.0;\n      for (int j = 0; j < 16; ++j) {\n        vec3 samplePoint = p +\n        (\n          hash33(p + vec3(cos(u_time), 0.0, sin(u_time)) + 0.2523 * p.zxy * float(j)\n        ) - 0.5) * 0.02;\n\n        col += sceneMaterial(samplePoint).rgb / 25.0;\n        cor += -0.04 + sceneMaterial(samplePoint).w / 12.0;\n      }\n\n      col *= smoothstep(1.0, 1.5, cor);\n    }\n\n    if (mat == 0.0) {\n      vec3 shiftpoint = (p +\n        vec3(\n          cos(u_time / 20.0 + 1.3255),\n          u_time / 20.0,\n          sin(u_time / 20.0 + 2.5342)\n        ));\n\n      float shift = pbm_simplex_noise3(shiftpoint * 10.0);\n      col = mix(vec3(0.8, 1.0, 0.9), vec3(0.4, 0.6, 0.9), shift * smoothstep(1.5, 0.0, length(p.xz))) *\n        max((0.2 - length(p) / 10.0), 0.0);\n      vec3 reflectDirection = normalize(r * vec3(0.5, 1.0, 0.5)) +\n        vec3(shift) * 0.2;\n      vec3 reflectOrigin = p + reflectDirection * SURF_DIST  + 0.02;\n\n      float d1 = rayMarch(reflectOrigin, reflectDirection);\n\n      if (d1 < MAX_DIST) {\n        vec3 p1 = reflectOrigin + reflectDirection * d1;\n        vec3 n1 = GetNormal(p1);\n        vec4 matu = sceneMaterial(p1);\n        col += matu.rgb * smoothstep(1.2, 1.5, matu.w) * 0.5;\n      }\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, 1.0 - u_scrollValue * 3.0);\n  float mouseY1 = max(u_mouseY, -70.0);\n\n  vec2 rot = vec2(\n    mouseY1 * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  vec3 col = renderOne(rayOrigin, rayDirection);\n\n\n  //vec3 col = vec3(dif);\n  //col=pow(col, vec3(0.5 + 2.0 * u_gamma));\n  FragColor = vec4(col, 1.0);\n}\n"},8146:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform float u_gamma;\nuniform float u_gyrdens1;\n\nuniform float u_control1;\nuniform float u_control2;\n\nuniform sampler2D u_Sampler;\nuniform samplerCube u_Sampler2;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n#define MAX_STEPS 128\n#define MAX_DIST 15.0\n#define SURF_DIST 0.0005 // hit distance\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 hsl2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec4 SampleBlur(sampler2D u_Sampler, vec2 sampleuv, float Directions, float Quality, float Size, vec2 Radius, float mip) {\n  vec4 Color = texture(u_Sampler, sampleuv, mip);\n  for(float d = 0.0; d < TAU; d += TAU/Directions) {\n    for(float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality) {\n      Color += texture(u_Sampler, sampleuv + vec2(cos(d), sin(d)) * Radius * i, mip);\n    }\n  }\n  Color /= Quality * Directions;\n  return Color;\n}\n\nvec4 SampleCubeBlur(vec3 dir) {\n  float Directions = 8.0;\n  float Quality = 8.0;\n  vec3 Radius = vec3(0.05);\n  float mip = 0.0;\n\n  vec4 color = texture(u_Sampler2, dir, mip);\n  for(float d = 0.0; d < TAU; d += TAU/Directions) {\n    for(float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality) {\n      // TODO ::: fix this, make orthogonal\n\n      vec3 shift = vec3(\n        cos(d) * cos(d) - cos(d) * sin(d),\n        cos(d) * sin(d) + cos(d) * cos(d),\n        sin(d)\n      );\n\n      color += texture(u_Sampler2, dir + shift * Radius * i, mip);\n    }\n  }\n  color /= Quality * Directions;\n  return color;\n}\n\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nvec3 hash33(vec3 p) {\n    float n = sin(dot(p , vec3(7, 157, 113)));\n    return fract(vec3(2097152, 262144, 32768)*n);\n}\n\nfloat hash21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341) * sin(floor(u_time / 2.0)));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\nfloat hash21_2(vec2 p){\n  return fract(sin(p.x + p.y + u_time / 5.0) * cos(p.y * 2.1554 + u_time / 5.0));\n}\n\nfloat dPlane(vec3 point) {\n  float dist = point.y + 0.8;\n  return dist;\n}\n\nfloat dBigSphere(vec3 point, float radius) {\n  float dist = length(point + vec3(0.0, radius + 0.8, 0.0)) - radius;\n  return dist;\n}\n\nfloat dSphere(vec3 point, float radius) {\n  // point -= vec3(0.0, 0.5, 0.0);\n  float dist = length(point) - radius;\n  return dist;\n}\n\nfloat sceneDistance(vec3 point) {\n  vec3 p1 = point + vec3(0.0, 0.7 * (0.5 + 0.5 * sin(u_time / 10.0)), 0.0);\n\n  float g1 = sdGyroid2(p1 * 8.0, 0.7456 + 0.7674 * u_gyrdens1, 0.4);\n  float g2 = sdGyroid3(p1 * 8.0, 0.6324, 0.4);\n  float sph = dSphere(p1, 1.2);\n  // float pl = dPlane(point);\n  float sph2 = dBigSphere(point, 20.0);\n\n  float d = smin(g1, g2, -0.2) / 10.0;\n  d = smin(d, sph, -0.1);\n  d = smin(d, sph2, 0.08);\n\n  return d;\n}\n\nfloat sceneMaterial(vec3 point) {\n  vec3 p1 = point + vec3(0.0, 0.7 * (0.5 + 0.5 * sin(u_time / 10.0)), 0.0);\n\n  float g1 = sdGyroid2(p1 * 8.0, 0.7456 + 0.7674 * u_gyrdens1, 0.4);\n  float g2 = sdGyroid3(p1 * 8.0, 0.6324, 0.4);\n  float sph = dSphere(p1, 1.2);\n  // float pl = dPlane(point);\n  float sph2 = dBigSphere(point, 20.0);\n\n  float d = max(g1, g2) / 10.0;\n  d = max(d, sph);\n  d = min(d - 0.03, sph2);\n\n  if(d == sph2) {\n    return 0.0;\n  }\n\n  return 1.0;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (abs(dS) < SURF_DIST || dO > MAX_DIST) {\n      break;\n    }\n  }\n  return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(-0.4, 0.0, -0.5 - u_scrollValue * 1.0);\n  float mouseY1 = max(u_mouseY, -70.0);\n\n\n  vec2 rot = vec2(\n    mouseY1 * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  float d = rayMarch(rayOrigin, rayDirection);\n\n  vec3 col;\n  float dif;\n  float dif1;\n\n  // vec4 samp = SampleCubeBlur(rayDirection);\n  vec4 samp = texture(u_Sampler2, rayDirection);\n  col = samp.rgb * 0.3;\n\n  if (d < MAX_DIST) {\n    vec3 p = rayOrigin + rayDirection * d;\n    vec3 n = GetNormal(p);\n    float mat = sceneMaterial(p);\n    vec3 shiftpoint = (p +\n      vec3(\n        cos(u_time / 20.0 + 1.3255),\n        u_time / 20.0,\n        sin(u_time / 20.0 + 2.5342)\n      ));\n    vec3 r = reflect(rayDirection, n) + vec3(pbm_simplex_noise3(shiftpoint * 5.0)) * 0.2 * (1.0 - mat);\n    dif = dot(n, normalize(vec3(-1.0, 2.0, -2.0))) * 0.6 + 0.6;\n\n    vec4 samp = texture(u_Sampler2, r);\n    col = samp.rgb * dif + 0.05 * dif * dot(n, vec3(0.0, 1.0, 0.0));\n\n    vec3 reflectDirection = normalize(r);\n    vec3 reflectOrigin = p + reflectDirection * SURF_DIST  + 0.02;\n\n    float d1 = rayMarch(reflectOrigin, reflectDirection);\n\n    if (d1 < MAX_DIST) {\n      vec3 p1 = reflectOrigin + reflectDirection * d1;\n      vec3 n1 = GetNormal(p1);\n      vec3 r1 = reflect(reflectDirection, n1);\n      vec4 samp = texture(u_Sampler2, r1);\n      col += samp.rgb / 2.0;\n    }\n\n    if (mat == 0.0) {\n      col *= 0.8 * smoothstep(3.0, 0.0, length(p.xz));\n    } else {\n      col = 1.2 * mix(\n        col,\n        vec3( 0.0, -3.5, 0.5) * col.zyx,\n        smoothstep(0.8, 0.1, abs(dot(n, -rayDirection - vec3(0.0, -0.1, 0.0))))\n      );\n    }\n  }\n\n  col *= 1.0 - 0.2 * sin(uv.y * 900.0);\n  FragColor = vec4(col, 1.0);\n}\n"},3420:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform float u_gamma;\nuniform float u_gyrdens1;\n\nuniform float u_control1;\nuniform float u_control2;\n\nuniform sampler2D u_Sampler;\nuniform samplerCube u_Sampler2;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n#define MAX_STEPS 128\n#define MAX_DIST 15.0\n#define SURF_DIST 0.0005 // hit distance\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 hsl2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec4 SampleBlur(sampler2D u_Sampler, vec2 sampleuv, float Directions, float Quality, float Size, vec2 Radius, float mip) {\n  vec4 Color = texture(u_Sampler, sampleuv, mip);\n  for(float d = 0.0; d < TAU; d += TAU/Directions) {\n    for(float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality) {\n      Color += texture(u_Sampler, sampleuv + vec2(cos(d), sin(d)) * Radius * i, mip);\n    }\n  }\n  Color /= Quality * Directions;\n  return Color;\n}\n\nvec4 SampleCubeBlur(vec3 dir) {\n  float Directions = 8.0;\n  float Quality = 8.0;\n  vec3 Radius = vec3(0.05);\n  float mip = 0.0;\n\n  vec4 color = texture(u_Sampler2, dir, mip);\n  for(float d = 0.0; d < TAU; d += TAU/Directions) {\n    for(float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality) {\n      // TODO ::: fix this, make orthogonal\n\n      vec3 shift = vec3(\n        cos(d) * cos(d) - cos(d) * sin(d),\n        cos(d) * sin(d) + cos(d) * cos(d),\n        sin(d)\n      );\n\n      color += texture(u_Sampler2, dir + shift * Radius * i, mip);\n    }\n  }\n  color /= Quality * Directions;\n  return color;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nvec3 hash33(vec3 p) {\n    float n = sin(dot(p , vec3(7, 157, 113)));\n    return fract(vec3(2097152, 262144, 32768)*n);\n}\n\nfloat hash21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341) * sin(floor(u_time / 2.0)));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\nfloat hash21_2(vec2 p){\n  return fract(sin(p.x + p.y + u_time / 5.0) * cos(p.y * 2.1554 + u_time / 5.0));\n}\n\nfloat dPlane(vec3 point) {\n  float dist = point.y + 0.8;\n  return dist;\n}\n\nfloat dBigSphere(vec3 point, float radius) {\n  float dist = length(point + vec3(0.0, radius + 0.8, 0.0)) - radius;\n  return dist;\n}\n\nfloat dSphere(vec3 point, float radius) {\n  // point -= vec3(0.0, 0.5, 0.0);\n  float dist = length(point) - radius;\n  return dist;\n}\n\nfloat sceneDistance(vec3 p) {\n  float s = sdSphere2(p, 1.0, 0.03);\n  float g = sdGyroid(p, 1.0 + 4.0, 0.03);\n  float sph2 = dBigSphere(p, 10.0);\n\n  float d = smin(s, g, -0.2);\n  d = min(d, sph2);\n\n  return d;\n}\n\nfloat sceneMaterial(vec3 p) {\n  float s = sdSphere2(p, 1.0, 0.05);\n  float g = sdGyroid(p, 1.0 + 4.0, 0.05);\n  float sph2 = dBigSphere(p, 5.0);\n\n  float d = max(s, g);\n  d = min(d, sph2);\n\n  if (d == sph2) {\n    return 0.0;\n  }\n\n  return 1.0;\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, float radius, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - radius;\n  float delta = b * b - c;\n  if (delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n\nfloat planeDistance(vec3 p) {\n  return p.y + 0.8;\n}\n\nfloat densityFunction(vec3 p) {\n  float s = sdSphere2(p, 1.0, 0.03);\n  float g = sdGyroid(p, 1.0 + 4.0, 0.03);\n\n  float d = smin(s, g, -0.2);\n\n  return d;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd) {\n  float col = 0.0;\n  float min_dist;\n  float max_dist;\n\n  RaySphereIntersect(ro, rd, 3.0, min_dist, max_dist);\n  float dO = max(min_dist, 0.0);\n\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float planeDistance = planeDistance(p);\n    float dS = densityFunction(p);\n    float mat = sceneMaterial(p);\n\n    // col += 0.2;\n    col += max(0.3 - dS, 0.0 ) * 0.05;\n\n    // prevent overstepping\n    float step = max(0.05, dS / 0.5);\n    step = min(step, planeDistance);\n\n    dO += min(0.05, planeDistance);\n\n    if (dO > max_dist || abs(planeDistance) < SURF_DIST) {\n      break;\n    }\n    // check this\n    // float planeDistance = planeDistance(p);\n    // if (planeDistance < 0.0) {\n    //   dO = planeDistance;\n    //   col = 1.0;\n    //   break;\n    // }\n  }\n\n  // float planeDistance = planeDistance(ro + rd * dO);\n  // if (planeDistance < 0.0) {\n  //   col = 1.0;\n  // }\n\n  return vec2(dO, col);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(-0.4, 0.0, -0.5 - u_scrollValue * 1.0);\n  float mouseY1 = max(u_mouseY, -70.0);\n\n\n  vec2 rot = vec2(\n    mouseY1 * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  vec2 res = rayMarch(rayOrigin, rayDirection);\n  float d = res.x;\n  float c = res.y;\n\n  vec3 col = vec3(c);\n\n  if (d < MAX_DIST) {\n    vec3 p = rayOrigin + rayDirection * d;\n    vec3 n = vec3(0.0, 1.0, 0.0);\n    float mat = sceneMaterial(p);\n    vec3 r = reflect(rayDirection, n);\n\n    // float dif = dot(n, normalize(vec3(0.0, 1.0, 0.0))) * 0.5 + 0.5;\n    // col = vec3(dif) * mat;\n\n    if (mat == 0.0) {\n      // col = vec3(1.0, 0.0, 0.0);\n      vec3 reflectDirection = normalize(r);\n      vec3 reflectOrigin = p + reflectDirection * (SURF_DIST  + 0.05);\n\n      res = rayMarch(reflectOrigin, reflectDirection);\n      float d1 = res.x;\n      float c1 = res.y;\n\n      if (d1 < MAX_DIST) {\n        vec3 p1 = reflectOrigin + reflectDirection * d1;\n        // vec3 n1 = GetNormal(p1);\n        // vec3 r1 = reflect(reflectDirection, n1);\n\n        // float dif1 = dot(n1, normalize(vec3(0.0, 1.0, 0.0))) * 0.5 + 0.5;\n\n        col += c1 / 2.0;\n      }\n    }\n\n\n  }\n\n  FragColor = vec4(col, 1.0);\n}\n"},2851:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n#define MAX_STEPS 512\n#define MAX_DIST 20.0\n#define SURF_DIST 0.001 // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat min3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\nfloat mapDist(vec3 p) {\n  p = twistSpace(p.yzx, -0.2 + 0.4 * u_control4);\n  // vec3 p1 = p;\n  // multiply spheres\n  vec3 p1 = (-0.5 + fract(p / 8.0)) * 8.0;\n  // float d = length(p1) - 0.3;\n\n  // float d = length(vec2(p1.x, p1.y)) - 0.3;\n\n  // float d = min3(\n  //   length(vec2(p1.x, p1.y) * p1.z * p1.z * 10.0) - 0.05,\n  //   length(vec2(p1.y, p1.z) * p1.x * p1.x * 10.0) - 0.05,\n  //   length(vec2(p1.z, p1.x) * p1.y * p1.y * 10.0) - 0.05,\n  //   -0.05\n  // );\n\n  // float d = abs(length(p1) - 0.6);\n  float s = sdSphere2(p1, 1.0 + u_control1 * 2.0, 0.05);\n  float g = sdGyroid(p1, 1.0 + 8.0 * u_control3, 0.05);\n  float d = smin(s, g, -0.2);\n\n  return d;\n}\n\nfloat sceneDistance(vec3 point) {\n  return mapDist(point);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec4 rayMarchCol(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  vec3 col = vec3(0.0);\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    col += smoothstep(5.0, 0.0, sqrt(dS)) * vec3(0.3, 0.1, 0.2);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return vec4(col, dO);\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.0 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n  vec4 d = rayMarchCol(rayOrigin, rayDirection);\n  vec3 col;\n\n  col += d.rgb * 0.1 * u_control2;\n\n  if(d.w < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d.w;\n      vec3 n = GetNormal(p);\n      vec3 r = reflect(rayDirection, n);\n\n      float dif = dot(n, normalize(vec3(0.0, 2.0, 0.0))) * 0.5 + 0.5;\n      col += mix(vec3(0.1, 0.1, 0.0), vec3(1.0, 0.3, 0.9), dif) * (1.0 - length(col));\n  }\n\n  FragColor = vec4(col, 1.0);\n}\n"},5160:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\n// source https://www.shadertoy.com/view/MsVXWW\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\n\n#define ROTATION\n//#define MOUSE_CAMERA_CONTROL\n\n#define DITHERING\n#define BACKGROUND\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.00001 // hit distance\n\n//#define TONEMAPPING\n\n//-------------------\n#define PI  3.14159265358\n#define TAU 6.28318530718\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat map2(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map2(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map2(value.x, min1, max1, min2, max2),\n    map2(value.y, min1, max1, min2, max2),\n    map2(value.z, min1, max1, min2, max2)\n  );\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nfloat rand(vec2 co)\n{\n\treturn fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//=====================================\n// otaviogood's noise from https://www.shadertoy.com/view/ld2SzK\n//--------------------------------------------------------------\n// This spiral noise works by successively adding and rotating sin waves while increasing frequency.\n// It should work the same on all computers since it's not based on a hash function like some other noises.\n// It can be much faster than other noise functions if you're ok with some repetition.\n\nconst float nudge = 0.739513;\t// size of perpendicular vector\n\nfloat normalizer = 1.0 / sqrt(1.0 + nudge * nudge);\t// pythagorean theorem on that perpendicular to maintain scale\n\nfloat SpiralNoiseC(vec3 p)\n{\n  float n = 0.0;\t// noise amount\n  float iter = 1.0;\n  for (int i = 0; i < 8; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    n += -abs(sin(p.y * iter) + cos(p.x * iter)) / iter;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n    p.xy += vec2(p.y, -p.x) * nudge;\n    p.xy *= normalizer;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    p.xz *= normalizer;\n    // increase the frequency\n    iter *= 1.733733;\n  }\n  return n;\n}\n\nfloat SpiralNoise3D(vec3 p)\n{\n  float n = 0.0;\n  float iter = 1.0;\n  for (int i = 0; i < 5; i++)\n  {\n    n += (sin(p.y * iter + u_control1 * 1.313) + cos(p.x * iter + u_control1)) / iter;\n    p.xz += vec2(p.z, -p.x) * nudge;\n    p.xz *= normalizer;\n    iter *= 1.33733;\n  }\n  return n;\n}\n\nfloat NebulaNoise(vec3 p)\n{\n  float final = p.y + 4.5;\n  // frequent from (-5, 0);\n  // mid-range noise\n  final -= SpiralNoiseC(p.xyz);\n  // less frequent noise (-12, - 2)\n  // large scale features\n  final += SpiralNoiseC(p.zxy * 0.5123 + 100.0) * 4.0;\n  // very smooth large scale noise\n  // more large scale features, but 3d\n  final -= SpiralNoise3D(p);\n\n  return final;\n}\n\n// combination of noises around (0.0, 30.0)\nfloat map(vec3 p)\n{\n  // NebulaNoise around (-30, 10)\n  float NebNoise = abs(NebulaNoise(p / 0.5) * 0.5);\n  return NebNoise + 0.03;\n}\n//--------------------------------------------------------------\n\n// assign color to the media\nvec3 computeColor( float density, float radius )\n{\n\t// color based on density alone, gives impression of occlusion within\n\t// the media\n\tvec3 result = mix(vec3(1.0, 0.9, 0.8), vec3(0.4, 0.15, 0.1), density);\n\n\t// color added to the media\n\tvec3 colCenter = 7.0 * vec3(0.8, 1.0, 1.0);\n\tvec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n\tresult *= mix(colCenter, colEdge, min((radius + 0.05) / 0.9, 1.15));\n\n\treturn result;\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - 8.;\n  float delta = b * b - c;\n  if(delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n// Applies the filmic curve from John Hable's presentation\n// More details at : http://filmicgames.com/archives/75\nvec3 ToneMapFilmicALU(vec3 _color)\n{\n\t_color = max(vec3(0), _color - vec3(0.004));\n\t_color = (_color * (6.2 * _color + vec3(0.5))) / (_color * (6.2 * _color + vec3(1.7)) + vec3(0.06));\n\treturn _color;\n}\n\nfloat easeInOutQuad(float x) {\n  float two = 2.0;\n  return x < 0.5 ?\n    two * x * x :\n    1.0 - (-two * x + two) * (-two * x + two) / two;\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\n\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\n\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise3d(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat stars(vec2 p, float seed) {\n  p *= 5.0 * seed;\n  float n = Noise21(floor(p));\n\n  p = fract(p);\n  vec2 shift = vec2(n - 0.5, fract(n * 10.0));\n  float d = length(p - shift);\n  float m = smoothstep(0.02 * n * sqrt(seed), 0.0, d) * n;\n  return m;\n}\n\nvec3 polarNormalize (vec3 polar) {\n  return vec3(polar.x, asin(polar.y / PI) * PI, polar.z);\n}\n\nfloat SpherePlane(vec3 p) {\n  vec4 s = vec4(0, 1, 6, 1);\n\n  float sphereDist = length(p - s.xyz) - s.w;\n  float planeDist = p.y;\n\n  float d = min(sphereDist, planeDist);\n\n  return d;\n}\n\nmat2 Rot(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdGyroid(vec3 p, float scale) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - 0.16;\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat SmoothNoise(vec2 p) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(p);\n  vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(p));\n\treturn mix(\n    mix(rand(b), rand(b + d.yx), f.x),\n    mix(rand(b + d.xy), rand(b + d.yy), f.x)\n    , f.y\n  );\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat GetDist(vec3 p) {\n  // float box = sdBox(p - vec3(0.0, 1.0, 0.0), vec3(1.0));\n\n  float angle = (1.0 - p.y) * (-PI + u_control5 * TAU);\n  p = vec3(\n    p.x * sin(angle) + p.z * cos(angle),\n    p.y * u_control3,\n    p.x * - cos(angle) + p.z * sin(angle)\n  );\n\n  float sphereDist = sdSphere(p, 0.5 + u_control1 * 1.0);\n  float gyroid = sdGyroid(p, 1.0 + u_control2 * 8.0);\n  float d = smin(sphereDist, gyroid * 0.9, -0.07);\n\n  return d;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n  vec3 f = normalize(l - p);\n  vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n  vec3 u = cross(f, r);\n  vec3 c = p + f * z;\n  vec3 i = c + uv.x * r + uv.y * u;\n  vec3 d = normalize(i - p);\n  return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = GetDist(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = GetDist(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    GetDist(p - e.xyy),\n    GetDist(p - e.yxy),\n    GetDist(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nvoid main()\n{\n//   vec3 debugColor;\n// \tvec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n// \tvec3 rayOrigin = vec3(0.0, 0.0, -u_scrollValue);\n\nconst float mouseFactor = 0.002;\n//   R(rayDirection.yz, -u_mouseY * mouseFactor * PI * 2.0);\n//   R(rayDirection.xz, u_mouseX * mouseFactor * PI * 2.0);\n//   R(rayOrigin.yz, -u_mouseY * mouseFactor * PI * 2.0);\n//   R(rayOrigin.xz, u_mouseX * mouseFactor * PI * 2.0);\n\n//   // DITHERING\n// \tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n// \t// w: weighting factor\n// \tfloat localDensity = 0.0, totalDensity = 0.0, w = 0.0;\n\n// \t// t: length of the ray\n// \t// d: distance function\n// \tfloat d = 1.0, t = 0.0;\n\n//   const float h = 0.1;\n\n// \tvec4 sum = vec4(0.0);\n\n//   float min_dist = 0.0, max_dist = 0.0;\n\n\n//   // march ray to the sphere\n//   if (RaySphereIntersect(rayOrigin, rayDirection, min_dist, max_dist))\n//   {\n//     // if t < min_dist return 0\n//     // if t >= min_dist return 1\n// \t  t = min_dist * step(t, min_dist);\n\n//     // raymarch loop\n//     for (int i = 0; i < 56; i++)\n//     {\n//       vec3 pos = rayOrigin + t * rayDirection;\n\n//       // t > 10.0 - clipping\n//       if (totalDensity > 0.9 || d < 0.1 * t || t > 10.0 || sum.a > 0.99 || t > max_dist) {\n//         break;\n//       }\n\n//       // evaluate distance function\n//       float d = map(pos);\n\n//       // change this string to control density\n//       d = max(d, 0.07);\n\n//       // point light calculations\n//       vec3 ldst = vec3(0.0) - pos;\n//       float lDist = max(length(ldst), 0.001);\n\n//       // star in center\n//       vec3 lightColor = vec3(1.0, 0.5, 0.25);\n//       // star itself and bloom around the light\n//       sum.rgb += (lightColor / (lDist * lDist) / 30.0);\n\n//       if (d < h)\n//       {\n\n//         // compute local density\n//         localDensity = h - d;\n\n//         // compute weighting factor\n//         w = (1.0 - totalDensity) * localDensity;\n\n//         // accumulate density\n//         totalDensity += w + 1.0/200.0;\n\n//         vec4 col = vec4(computeColor(totalDensity, lDist), totalDensity);\n\n//         // uniform scale density\n//         col.a *= 0.185;\n//         // colour by alpha\n//         col.rgb *= col.a;\n//         // alpha blend in contribution\n//         sum = sum + col*(1.0 - sum.a);\n//       }\n\n//       // still add density, even if not hit\n//       totalDensity += 1.0/70.0;\n\n//       // enforce minimum stepsize\n//       d = max(d, 0.04);\n\n//       // DITHERING\n//       d = abs(d) * (0.8 + 0.2 * rand(seed * vec2(i)));\n\n//       // trying to optimize step size near the camera and near the light source\n//       t += max(d * 0.1 * max(min(length(ldst), length(rayOrigin)), 1.0), 0.02);\n//     }\n//     // simple scattering\n// \t  sum *= 1.0 / exp(localDensity * 0.2) * 0.6;\n//    \tsum = clamp(sum, 0.0, 1.0);\n//     sum.xyz = sum.xyz * sum.xyz * (3.0 - 2.0 * sum.xyz);\n// \t}\n\n//   debugColor = sum.xyz;\n\n//   // BACKGROUND\n//   // if (totalDensity < 0.8)\n//   // {\n//   //   vec3 stars = vec3(Noise21(rayDirection.yz));\n//   //   vec3 starbg = vec3(0.0);\n//   //   starbg = mix(\n//   //     starbg,\n//   //     vec3(0.8, 0.9, 1.0),\n//   //     smoothstep(0.99, 1.0, stars) * clamp(dot(vec3(0.0), rayDirection) + 0.75, 0.0, 1.0)\n//   //   );\n//   //   starbg = clamp(starbg, 0.0, 1.0);\n//   //   sum.xyz += stars;\n//   // }\n\n//   // TONEMAPPING\n//   debugColor = ToneMapFilmicALU(sum.xyz * 2.2);\n\n//   // debug noise\n//   // vec3 polar4 = cartesianToPolar(rayDirection.xzy);\n//   // polar4.x = u_scrollValue;\n//   // debugColor = vec3(\n//   //   map2(map(polar4) * 4.0, 0.0, 30.0, 0.0, 1.0)\n//   // );\n\n//   // // MY STARS\n//   vec3 polar1 = cartesianToPolar(rayDirection.xzy);\n//   vec3 polar2 = cartesianToPolar(rayDirection.xyz);\n//   R(rayDirection.yz, PI / 2.0);\n//   vec3 polar3 = cartesianToPolar(rayDirection.xyz);\n//   // TODO ::: try optimize\n//   debugColor += stars(polarNormalize(polar1).yz, 5.43141);\n//   debugColor += stars(polarNormalize(polar2).yz, 6.4324);\n//   debugColor += stars(polarNormalize(polar3).yz, 7.11231);\n  vec3 col = vec3(0.0);\n\n  // art of code' ro and rd\n  // vec3 rayOrigin = vec3(0.0, 2.0, -2.0);\n  // rayOrigin.yz *= Rot(-u_mouseY * mouseFactor * PI + 1.0);\n  // rayOrigin.xz *= Rot(-u_mouseX * mouseFactor * TAU);\n  // vec3 rayDirection = GetRayDir(uv, rayOrigin, vec3(0.0, 1.0, 0.0), 1.0);\n\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, 0.5 - u_scrollValue * 5.0);\n  R(rayDirection.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayDirection.xz, u_mouseX * mouseFactor * PI * 2.0);\n  R(rayOrigin.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayOrigin.xz, u_mouseX * mouseFactor * PI * 2.0);\n\n  float d = rayMarch(rayOrigin, rayDirection);\n\n  if(d<MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d;\n      vec3 n = GetNormal(p);\n      vec3 r = reflect(rayDirection, n);\n\n      float dif = dot(n, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n      col = vec3(dif);\n  }\n\n  d /= 6.0;\n\n  // debug noise\n\n  // FragColor = vec4(vec3(noise3d(vec3(uv.x, uv.y, 1.0) * 20.0)), 1.0);\n\n  FragColor = vec4(col, 1.0);\n}\n"},7437:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform sampler2D u_Sampler;\n\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n#define DITHERING\n#define BACKGROUND\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat rand(vec2 co)\n{\n\treturn fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, float radius, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - radius;\n  float delta = b * b - c;\n  if (delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n// assign color to the media\nvec3 computeColor( float density, float radius )\n{\n\t// color based on density alone, gives impression of occlusion within\n\t// the media\n\tvec3 result = mix(vec3(1.0, 0.2, 0.8), vec3(0.4, 0.15, 0.1), density);\n\n\t// color added to the media\n\tvec3 colCenter = 7.0 * vec3(0.8, 1.0, 1.0);\n\tvec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n\tresult *= mix(colCenter, colEdge, min((radius + 0.05) / 0.9, 1.15));\n\n\treturn result;\n}\n\nfloat densityFunction(vec3 point) {\n  // shift space by noise\n  float n = pbm_simplex_noise3(2.0 * point + vec3(u_time * 0.7));\n  point = point + 1.1345 * n;\n\n  // twist space\n  point = twistSpace(point.xyz, u_control3 * 2.0);\n\n  // plane\n  return length(\n    dot(point, vec3(1.0, 1.0, 1.0) + 3.0)\n   ) + 0.2;\n}\n\n\nvec3 addLight(vec3 pos, vec3 lightPos, vec3 lightColor) {\n  vec3 ldst = vec3(lightPos) - pos;\n  float lDist = max(length(ldst), 0.01);\n  return (lightColor / (pow(lDist, 2.0))) * 1.8;\n}\n\nvec3 nebulaMarch(vec3 rayOrigin, vec3 rayDirection) {\n  // DITHERING\n\tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n  vec3 lightPos1 = vec3 (\n    1.5 * sin(2.0 * u_control6 * u_time),\n    1.5 * cos(2.0 * u_control6 * u_time),\n    0.0\n  );\n  R(lightPos1.xy, 1.13523);\n  R(lightPos1.xz, 0.54325 + u_time);\n\n  vec3 lightPos2 = vec3 (\n    1.5 * sin(2.0 * u_control6 * u_time),\n    1.5 * cos(2.0 * u_control6 * u_time),\n    0.0\n  );\n  R(lightPos2.xy, 2.52352);\n  R(lightPos2.xz, -1.25356 + u_time);\n\n  vec3 lightPos3 = vec3 (\n    1.5 * sin(2.0 * u_control6 * u_time),\n    1.5 * cos(2.0 * u_control6 * u_time),\n    0.0\n  );\n  R(lightPos3.xy, 0.1557);\n  R(lightPos3.xz, -2.53251 + u_time);\n\n\t// w: weighting factor\n\tfloat localDensity = 0.0, totalDensity = 0.0, w = 0.0;\n\n\t// t: length of the ray\n\t// d: distance function\n\tfloat dist = 1.0;\n  float rayLength = 0.0;\n\n  float hitDist = 0.004; // tweak this smaller, gives volume\n\n\tvec4 sum = vec4(0.0);\n\n  float min_dist = 0.0;\n  float max_dist = 0.0;\n\n  // march ray to the sphere\n  if (RaySphereIntersect(rayOrigin, rayDirection, 2.5, min_dist, max_dist))\n  {\n    // if t < min_dist return 0\n    // if t >= min_dist return 1\n\t  rayLength = min_dist * step(rayLength, min_dist);\n\n    // raymarch loop\n    for (int i = 0; i < 56; i++)\n    {\n      vec3 pos = rayOrigin + rayLength * rayDirection;\n\n      // t > 10.0 - clipping\n      // d < 0.1 * rayLength - was mistake gets cutoff effect\n      if (totalDensity > 0.9 || rayLength > 10.0 || sum.a > 0.99 || rayLength > max_dist) {\n        break;\n      }\n\n      // evaluate distance function\n      // float pixelate = 100.0 * u_control7;\n      // dist = densityFunction(floor(pos * pixelate + 0.5) / pixelate);\n      dist = densityFunction(pos) * 0.1;\n\n      // change this string to control density\n      dist = max(dist, 0.5);\n\n      // star itself and bloom around the light\n      sum.rgb += addLight(pos, lightPos1, vec3(1.0, 0.3, 0.2)) * 0.02;\n      sum.rgb += addLight(pos, lightPos2, vec3(0.2, 1.0, 0.5)) * 0.02;\n      sum.rgb += addLight(pos, lightPos3, vec3(0.4, 0.1, 1.0)) * 0.02;\n\n      if (dist < hitDist)\n      {\n\n        // compute local density\n        localDensity = hitDist - dist;\n\n        // compute weighting factor\n        w = (1.0 - totalDensity) * localDensity;\n\n        // accumulate density\n        // totalDensity += w + 1.0 / (2.0); // minor effect\n        // float lDist = length(pos);\n        // vec4 col = vec4(computeColor(totalDensity, lDist), totalDensity);\n\n        // // uniform scale density\n        // col.a *= 0.005; // this shit is lower is better\n        // // colour by alpha\n        // col.rgb *= col.a;\n        // // alpha blend in contribution\n        // sum = sum + col * (1.0 - sum.a);\n      }\n\n      // still add density, even if not hit\n      // 40.0 is ok\n      // this is like fog\n      totalDensity += 1.0/(20.0) * (1.0 - length(pos));\n\n      // enforce minimum stepsize\n      // minor effect\n      // dist = max(dist, 0.5 * u_control8);\n\n      // DITHERING\n      dist = abs(dist) * (0.8 + 0.2 * rand(seed * vec2(i)));\n\n      // trying to optimize step size near the camera and near the light source\n      rayLength +=\n        max(\n          dist * 0.3 *\n            max(\n              length(rayOrigin),\n              1.0\n            ),\n          0.02\n        );\n    }\n    // simple scattering\n\t  sum *= 1.0 / exp(localDensity * 0.2) * 0.6;\n   \tsum = clamp(sum, 0.0, 1.0);\n\n    // // this make s it burn\n    // sum.a = totalDensity;\n    // sum.xyz = sum.xyz * sum.xyz * (3.0 - 2.0 * sum.xyz);\n\t}\n\n  return sum.xyz;\n}\n\nvoid main()\n{\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(-0.3, 0.5, -(0.1 + u_scrollValue * 2.0));\n\n  const float mouseFactor = 0.002;\n  R(rayDirection.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayDirection.xz, u_mouseX * mouseFactor * PI * 2.0);\n  R(rayOrigin.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayOrigin.xz, u_mouseX * mouseFactor * PI * 2.0);\n\n  vec3 col = nebulaMarch(rayOrigin, rayDirection);\n\n  FragColor = vec4(col, 1.0);\n}\n"},1863:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\nuniform sampler2D u_Sampler;\n\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n#define MAX_DIST 3.0\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n#define DITHERING\n#define BACKGROUND\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat rand(vec2 co)\n{\n\treturn fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, float radius, out float near, out float far)\n{\n  float b = dot(dir, org);\n  float c = dot(org, org) - radius;\n  float delta = b * b - c;\n  if (delta < 0.0){\n    return false;\n  }\n  float deltasqrt = sqrt(delta);\n  near = -b - deltasqrt;\n  far = -b + deltasqrt;\n  return far > 0.0;\n}\n\n// assign color to the media\nvec3 computeColor( float density, float radius )\n{\n\t// color based on density alone, gives impression of occlusion within\n\t// the media\n\tvec3 result = mix(vec3(1.0, 0.2, 0.8), vec3(0.4, 0.15, 0.1), density);\n\n\t// color added to the media\n\tvec3 colCenter = 7.0 * vec3(0.8, 1.0, 1.0);\n\tvec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n\tresult *= mix(colCenter, colEdge, min((radius + 0.05) / 0.9, 1.15));\n\n\treturn result;\n}\n\nfloat densityFunction(vec3 point) {\n  // shift space by noise\n  float n = pbm_simplex_noise3(point);\n  vec3 point2 = point + 1.1345 * n;\n\n  // twist space\n  point2 = twistSpace(point2.xyz, 2.0);\n\n  // plane\n  float dist = 2.0 - abs(dot(point2, vec3(1.0, 1.0, 1.0)));\n\n  return clamp(dist * (1.6 * 1.6 - dot(point, point)), 0.0, 1.0);\n}\n\n\nvec3 addLight(vec3 pos, vec3 lightPos, vec3 lightColor) {\n  vec3 ldst = vec3(lightPos) - pos;\n  float lDist = max(length(ldst), 0.01);\n  return (lightColor / (pow(lDist, 2.0))) * 1.8;\n}\n\nvec3 nebulaMarch(vec3 rayOrigin, vec3 rayDirection) {\n  // DITHERING\n\tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n  float totalTranslucency = 1.0;\n  float localTranslucency = 0.0;\n\n\t// t: length of the ray\n\t// d: distance function\n  float rayLength = 0.0;\n\n\tvec4 sum = vec4(vec3(0.0), 1.0);\n  float dist;\n\n  float min_dist = 0.0;\n  float max_dist = 0.0;\n  float rayStep = 0.05;\n\n  // march ray to the sphere\n  if (RaySphereIntersect(rayOrigin, rayDirection, 2.5, min_dist, max_dist))\n  {\n\n    // if t < min_dist return 0\n    // if t >= min_dist return 1\n\t  rayLength = min_dist;\n\n    // raymarch loop\n    for (int i = 0; i < 512; i++) {\n      vec3 pos = rayOrigin + rayLength * rayDirection;\n\n      if (totalTranslucency < 0.1 || rayLength > MAX_DIST || rayLength > max_dist) {\n        break;\n      }\n\n      dist = densityFunction(pos) * rayStep * 0.2;\n      totalTranslucency -= dist;\n      rayLength += rayStep;\n    }\n    sum.rgb = vec3(1.0, 1.0, 1.0) * (1.0 - totalTranslucency);\n  }\n  return sum.rgb;\n}\n\nvoid main()\n{\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(-0.3, 0.5, -(0.1 + u_scrollValue * 2.0));\n\n  const float mouseFactor = 0.002;\n  R(rayDirection.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayDirection.xz, u_mouseX * mouseFactor * PI * 2.0);\n  R(rayOrigin.yz, -u_mouseY * mouseFactor * PI * 2.0);\n  R(rayOrigin.xz, u_mouseX * mouseFactor * PI * 2.0);\n\n  vec3 col = nebulaMarch(rayOrigin, rayDirection);\n\n  FragColor = vec4(col, 1.0);\n\n  // FragColor = vec4(vec3(densityFunction(vec3(uv, 1.0))), 1.0);\n}\n"},5959:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\n#define MAX_STEPS 512\n#define MAX_DIST 8.0\n#define SURF_DIST 0.0000001 // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nvec4 orb;\n\nvec3 twistSpace(vec3 point) {\n  float angle = (1.0 - point.y) * (-PI + u_control5 * TAU);\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y * u_control3,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 point) {\n  vec3 n = vec3(\n    pbm_simplex_noise3(point * 1.0),\n    pbm_simplex_noise3(point * 1.0 + 1.251),\n    pbm_simplex_noise3(point * 1.0 + 2.1414)\n  );\n\n  point.x = point.x + point.x * cos(n.x * 3.0 * u_control1) * u_control2 - point.z * sin(n.x * 3.0 * u_control1) * u_control2;\n  point.z = point.z + point.x * sin(n.x * 3.0 * u_control1) * u_control2 + point.z * cos(n.x * 3.0 * u_control1) * u_control2;\n\n  return point;\n}\n\nfloat map(vec3 p)\n{\n\tfloat scale = 1.0;\n\torb = vec4(1000.0);\n\tfor( int i = 0; i < 9; i++ )\n\t{\n\t\tp = -1.0 + 2.0 * fract(0.5 * p + 0.5);\n\t\tfloat r2 = dot(p, p);\n    orb = min(orb, vec4(abs(p), r2));\n\t\tfloat k = 2.0 *  u_control1 / r2;\n\t\tp *= k;\n\t\tscale *= k;\n\t}\n\treturn 0.25 * abs(p.y) / scale;\n}\n\nfloat trace( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 30.0;\n    float t = 0.01;\n    for( int i=0; i<512; i++ )\n    {\n\t    float precis = 0.001 * t;\n\n\t    float h = map( ro+rd*t);\n        if( h<precis||t>maxd ) break;\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n    return t;\n}\n\n\nvec3 calcNormal(in vec3 pos, in float t)\n{\n    float precis = 0.001 * t;\n\n    vec2 e = vec2(1.0,-1.0)*precis;\n    return normalize( e.xyy*map( pos + e.xyy ) +\n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) +\n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) +\n                      e.xxx*map( pos + e.xxx ) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd)\n{\n  // trace\n  vec3 col = vec3(0.0);\n  float t = trace( ro, rd );\n  if( t>0.0 ) {\n    vec4 tra = orb;\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos, t );\n\n    // lighting\n    vec3  light1 = vec3(  0.577, 0.577, -0.577 );\n    vec3  light2 = vec3( -0.707, 0.000,  0.707 );\n    float key = clamp( dot( light1, nor ), 0.0, 1.0 );\n    float bac = clamp( 0.2 + 0.8*dot( light2, nor ), 0.0, 1.0 );\n    float amb = (0.7+0.3*nor.y);\n    float ao = pow( clamp(tra.w*2.0,0.0,1.0), 1.2 );\n\n    vec3 brdf  = 1.0*vec3(0.40,0.40,0.40)*amb*ao;\n    brdf += 1.0*vec3(1.00,1.00,1.00)*key*ao;\n    brdf += 1.0*vec3(0.40,0.40,0.40)*bac*ao;\n\n    // material\n    vec3 rgb = vec3(1.0);\n    rgb = mix( rgb, vec3(1.0,0.80,0.2), clamp(6.0*tra.y,0.0,1.0) );\n    rgb = mix( rgb, vec3(1.0,0.55,0.0), pow(clamp(1.0-2.0*tra.z,0.0,1.0),8.0) );\n\n    // color\n    col = rgb*brdf*exp(-0.2*t);\n  }\n\n  return sqrt(col);\n}\n\nfloat sceneDistance(vec3 point) {\n  // float box = sdBox(p - vec3(0.0, 1.0, 0.0), vec3(1.0));\n  point = twistSpace(point);\n  // point = pixelateSpace(point);\n\n  // float sphereDist = sdSphere(point, 1.0);\n  // float gyroid = sdGyroid(point, 5.0);\n  // float d = smin(sphereDist, gyroid * 0.9, 0.07);\n\n  return map(point);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -0.5 - u_scrollValue * 4.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n  vec3 col = render(rayOrigin, rayDirection);\n\n\n  // if(d < MAX_DIST) {\n  //     vec3 p = rayOrigin + rayDirection * d;\n  //     vec3 n = GetNormal(p);\n  //     vec3 r = reflect(rayDirection, n);\n\n  //     float dif = dot(n, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n  //     col = vec3(dif);\n  // }\n\n  FragColor = vec4(col, 1.0);\n}\n"},2024:n=>{n.exports="#version 300 es\n\nprecision mediump float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\nuniform mat4 u_MVP;\nuniform vec2 u_resolution;\n\n#define PI 3.14159265358\n#define TAU 6.28318530718\n#define EXP 2.71828\n#define MIN_STEP 0.3\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\nfloat chunkSpiralNoise3(vec3 p) {\n  const int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  float nudge = 0.739513;\t// size of perpendicular vector\n\n  for (int i = 0; i < OCTAVES; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    value += (1.0 - abs(sin(p.y / scale) + cos(p.x / scale))) * scale;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n\n    nudge = 1.23525 + sin(1.31231 * scale);\n\n    p.xy += vec2(p.y, -p.x) * nudge;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    normalize_vector += nudge;\n    scale /= (1.1234);\n  }\n\n  return value / normalize_vector + 0.3;\n}\n\nfloat rand(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rand2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453123);\n}\n\n\n#define MAX_STEPS 128\n#define MAX_DIST 20.0\n\n// can make huge hit distance for nice effect\n#define SURF_DIST 0.001  // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat smin3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\nfloat sceneDistance(vec3 p) {\n  vec3 p1 = fract(p * 2.0) - 0.5;\n\n  return abs(length(p1) - 0.2) * 0.1;\n}\n\nvec3 GetNormal(vec3 p) {\n  p = pixelateSpace(p, u_control1);\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarchCol(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  float col = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST && abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec3 colorize(float t) {\n\n  // stronger\n  // 1.0 - pow(t - 1.0, 2.0)\n  // 4.0 * pow(t - 0.5, 3.0) + 0.5\n  // pow(1.6 * t - 0.8, 3.0) + 0.5\n  // 2.0 * pow(t - 0.5, 3.0) + 0.25\n  // (exp(t) - 1.0) / (EXP - 1.0)\n  // (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n\n  // vec3 col = vec3(\n  //   (exp(t) - 1.0) / (EXP - 1.0),\n  //   2.0 * pow(t - 0.5, 3.0) + 0.25,\n  //   1.0 - pow(t - 1.0, 2.0)\n  // ) * vec3(\n  //   0.4,\n  //   0.3,\n  //   0.2\n  // );\n\n  // col += vec3(0.2, 1.0, 0.2) * smoothstep(0.95, 1.0, t * t);\n  // col += vec3(0.4, 0.5, 1.0) * smoothstep(0.96, 1.0, t);\n\n  vec3 col = vec3(t);\n\n  // t = clamp(t, 0.0, 1.0);\n\n  // vec3 col = mix(\n  //   vec3(0.1, 0.1, 0.6),\n  //   vec3(1.0, 0.8, 0.5),\n  //   pow(1.6 * t - 0.8, 3.0) + 0.5\n  // ) * mix(\n  //   vec3(0.1, 0.1, 0.0),\n  //   vec3(1.2, 0.8, 0.8),\n  //   (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n  // );\n\n  // col = vec3(\n  //   5.0 * pow(col.r, 1.2),\n  //   5.0 * pow(col.g, 1.6),\n  //   5.0 * pow(col.b, 1.6)\n  // );\n\n  return clamp(col, 0.0, 1.0);\n}\n\n// TODO ::: add RaySphere intersect\nvoid main() {\n  const float mouseFactor = 0.0005;\n  float resolution = u_resolution.y * u_MVP[0][0];\n\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.0 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  float d = rayMarchCol(rayOrigin, rayDirection);\n\n  vec3 col = vec3(0.0);\n\n  if(d < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d;\n      vec3 n = GetNormal(p);\n      vec3 r = reflect(rayDirection, n);\n\n      float dif = dot(n, normalize(vec3(1.0, 2.0, 3.0))) * 0.5 + 0.5;\n      col = vec3(dif);\n  }\n\n  FragColor = vec4(col, 1.0);\n}\n"},5406:n=>{n.exports="#version 300 es\n\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\nuniform float u_control1;\nuniform float u_control2;\nuniform float u_control3;\nuniform float u_control4;\nuniform float u_control5;\nuniform float u_control6;\nuniform float u_control7;\nuniform float u_control8;\n\n#define PI  3.14159265358\n#define TAU 6.28318530718\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\n\n#define MAX_STEPS 128\n#define MAX_DIST 20.0\n#define SURF_DIST 0.5  // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat min3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\nvec3 randomSpaceShift(vec3 p) {\n  p += pbm_simplex_noise3(p) * u_control5;\n  return p;\n}\n\nfloat mapDist(vec3 p) {\n  //vec3 p1 = shwistSpace(p.xyz, -0.2 + 0.4 * u_control4);\n  vec3 p1 = p;\n  // vec3 p1 = shwankSpace(p, u_control2);\n\n  // don't do this, trust me\n  // vec3 p1 = polarTocartesian(p);\n  // vec3 p1 = p;\n  // multiply spheres\n  // vec3 p1 = (-0.5 + fract(p / 8.0)) * 8.0;\n  // float d = length(p1) - 0.3;\n\n  // float d = length(vec2(p1.x, p1.y)) - 0.3;\n\n  // float s = sdSphere(p1, 4.0);\n  float g1 = sdGyroid2(p1, 0.5 + 1.0 * u_control1, 0.02);\n  float g2 = sdGyroid3(p1, 0.5, 0.02);\n  float d = smin(g1, g2, -0.1) * 0.5;\n  // d = smin(s, d, -0.1);\n\n  return d;\n}\n\nfloat sceneDistance(vec3 point) {\n  return mapDist(point);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec4 rayMarchCol(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  vec3 col = vec3(0.0);\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    col += smoothstep(5.0, 0.0, sqrt(dS)) * vec3(0.3, 0.1, 0.2);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return vec4(col, dO);\n}\n\nvoid main() {\n  const float mouseFactor = 0.0005;\n  vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.0 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n  vec4 d = rayMarchCol(rayOrigin, rayDirection);\n  vec3 col;\n\n  col += d.rgb * 0.1;\n\n  if(d.w < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d.w;\n      vec3 n = GetNormal(p);\n      //vec3 r = reflect(rayDirection, n);\n\n      //float dif = dot(n, normalize(vec3(0.0, 2.0, 0.0))) * 0.5 + 0.5;\n      col += vec3(0.1, 0.1, 0.0) * (1.0 - length(col));\n  }\n  col *= (1.9 - length(uv) * 0.8);\n\n  FragColor = vec4(col, 1.0);\n}\n"},7795:n=>{n.exports="#version 300 es\n\nprecision mediump float;\n\nout vec4 FragColor;\nin vec2 uv;\n\nuniform float u_time;\nuniform float u_mouseX;\nuniform float u_mouseY;\nuniform float u_scrollValue;\n\nuniform float u_quality;\n\nuniform float u_spiraNoise;\nuniform float u_gyroidOffset;\nuniform float u_pixelate;\n\n#define PI 3.14159265358\n#define TAU 6.28318530718\n#define EXP 2.71828\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map3(vec3 value, float min1, float max1, float min2, float max2) {\n  return vec3(\n    map(value.y, min1, max1, min2, max2),\n    map(value.x, min1, max1, min2, max2),\n    map(value.z, min1, max1, min2, max2)\n  );\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdGyroid2(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.yzx))) / scale - bias;\n}\n\nfloat sdGyroid3(vec3 p, float scale, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy))) / scale - bias;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float radius) {\n  return (length(p) - radius);\n}\n\nfloat sdSphere2(vec3 p, float radius, float bias) {\n  return abs((length(p) - radius)) - bias;\n}\n\nfloat Noise31(vec3 p){\n  p = fract(p * vec3(123.344314, 234.542341, 123.432423));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y * p.z);\n}\n\nfloat Noise21(vec2 p){\n  p = fract(p * vec2(123.344314, 234.542341));\n  p += dot(p, p + 23.4123);\n  return fract(p.x * p.y);\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat simplex_noise3(vec3 v) {\n  const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n// x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1.0 + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute(\n    permute(\n      permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n      i.y + vec4(0.0, i1.y, i2.y, 1.0)\n    ) + i.x + vec4(0.0, i1.x, i2.x, 1.0)\n  );\n\n// Gradients\n// (N * N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0 / 7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat pbm_simplex_noise3(vec3 point) {\n  int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nfloat pbm_simplex_noise3_q(vec3 point, float quality) {\n  int OCTAVES = 0;\n\n  if(0.0 <= quality && quality <= 0.125) {\n    OCTAVES = 0;\n  }\n\n  if(0.125 < quality && quality <= 0.25) {\n    OCTAVES = 1;\n  }\n\n  if(0.25 < quality && quality <= 0.375) {\n    OCTAVES = 2;\n  }\n\n  if(0.375 < quality && quality <= 0.5) {\n    OCTAVES = 3;\n  }\n\n  if(0.5 < quality && quality <= 0.625) {\n    OCTAVES = 4;\n  }\n\n  if(0.625 < quality && quality <= 0.75) {\n    OCTAVES = 5;\n  }\n\n  if(0.75 < quality && quality <= 0.875) {\n    OCTAVES = 6;\n  }\n\n  if(0.875 < quality && quality <= 1.0) {\n    OCTAVES = 7;\n  }\n\n  float normalize_vector = 0.0001;\n  float value = 0.0;\n  float scale = 0.5;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += simplex_noise3(point) * scale;\n    normalize_vector += scale;\n    point *= 2.0;\n    scale *= 0.5;\n  }\n\n  return value / normalize_vector;\n}\n\nvec3 cartesianToPolar (vec3 v)\n{\n\tvec3 polar;\n  float HALF_PI = PI / 2.0;\n\tpolar[0] = length(v);\n\n\tif (v[2] > 0.0f) {\n\t\tpolar[1] = atan(sqrt (v[0] * v[0]+ v[1] * v[1]) / v[2]);\n\t}\n\telse if (v[2] < 0.0f) {\n\t\tpolar[1] = atan(sqrt(v[0] * v[0]+ v[1] * v[1]) / v[2]) + PI;\n\t}\n\telse {\n\t\tpolar[1] = PI * 0.5f;\n\t}\n\tpolar[ 1 ] -= HALF_PI;\n\tif (v[0] != 0.0f) {\n        polar[2] = clamp(atan (v[1], v[0]), -PI, PI);\n    }\n\telse if (v[1] > 0.0) {\n\t\tpolar[2] = PI * 0.5f;\n\t}\n\telse {\n\t\tpolar[2] = -PI * 0.5;\n\t}\n\treturn polar;\n}\n\nvec3 twistSpace(vec3 point, float amount) {\n  float angle = point.y * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 polarTocartesian(vec3 point) {\n  vec3 pos = vec3(\n    point.x * sin(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * cos(point.y * PI + PI / 2.0) * cos(point.z * PI),\n    point.x * sin(point.z * PI)\n  );\n\n  return pos;\n}\n\nvec3 shwankSpace(vec3 p, float amount) {\n\n  // abs space\n  // return vec3(\n  //   abs(p.x) + length(p) * amount,\n  //   abs(p.y) + length(p) * amount,\n  //   abs(p.z) + length(p) * amount\n  // );\n\n  // abs space\n  // return vec3(\n  //   p.x / (1.0 + abs(p.z) * amount),\n  //   p.y / (1.0 + abs(p.x) * amount),\n  //   p.z / (1.0 + abs(p.y) * amount)\n  // );\n\n  return p;\n\n\n\n\n\n\n\n\n\n}\n\nvec3 shwistSpace(vec3 point, float amount) {\n  float angle = sin(point.y / 2.0) * PI * amount;\n\n  return vec3(\n    point.x * sin(angle) + point.z * cos(angle),\n    point.y,\n    point.x * - cos(angle) + point.z * sin(angle)\n  );\n}\n\nvec3 pixelateSpace(vec3 p, float scale) {\n  float sc = 10.0 * scale;\n  // multiply this by 2.0 to get cool diagonal lines\n  // return (floor((p - 0.5) * sc) + 0.5) / sc * 2.0;\n  return (floor((p - 0.5) * sc) + 0.5) / sc;\n}\n\nfloat chunkSpiralNoise3(vec3 p) {\n  const int OCTAVES = 5;\n\n  float normalize_vector = 0.0;\n  float value = 0.0;\n  float scale = 0.5;\n\n  float nudge = 0.739513;\t// size of perpendicular vector\n\n  for (int i = 0; i < OCTAVES; i++)\n  {\n    // add sin and cos scaled inverse with the frequency\n    value += (1.0 - abs(sin(p.y / scale) + cos(p.x / scale))) * scale;\t// abs for a ridged look\n    // rotate by adding perpendicular and scaling down\n\n    nudge = 1.23525 + sin(1.31231 * scale);\n\n    p.xy += vec2(p.y, -p.x) * nudge;\n    // rotate on other axis\n    p.xz += vec2(p.z, -p.x) * nudge;\n    normalize_vector += nudge;\n    scale /= (1.1234);\n  }\n\n  return value / normalize_vector + 0.3;\n}\n\nfloat rand(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rand2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453123);\n}\n\n\n#define MAX_STEPS 128\n#define MAX_DIST 20.0\n\n// can make huge hit distance for nice effect\n#define SURF_DIST 0.001  // hit distance\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\n\nfloat min3(float v1, float v2, float v3, float k) {\n  return smin(smin(v1, v2, k), v3, k);\n}\n\n  // vec3 randomSpaceShift(vec3 p) {\n  //   p += simplex_noise3(p, 0.01) * 0.2;\n  //   return p;\n  // }\n\nfloat mapDist(vec3 p) {\n  //vec3 p1 = shwistSpace(p.xyz, -0.2 + 0.4 * u_control4);\n  // vec3 p1 = randomSpaceShift(p);\n  vec3 p1;\n\n  p1 = pixelateSpace(p, u_pixelate);\n  p1 = p1 + (-2.5 + chunkSpiralNoise3(p1))* u_spiraNoise;\n  // vec3 p1 = shwankSpace(p, 0.5 * u_control5);\n\n  // don't do this, trust me\n  // vec3 p1 = polarTocartesian(p);\n  // vec3 p1 = p;\n  // multiply spheres\n  // vec3 p1 = (-0.5 + fract(p / 8.0)) * 8.0;\n  // float d = length(p1) - 0.3;\n\n  // float d = length(vec2(p1.x, p1.y)) - 0.3;\n\n  // float s = sdSphere(p1, 4.0);\n  float g1 = sdGyroid2(p1, 0.5 + 1.0 * u_gyroidOffset, 0.01);\n  float g2 = sdGyroid3(p1, 0.5, 0.01);\n  float d = smin(g1, g2, -0.1) * 0.5;\n  // d = smin(s, d, -0.1);\n\n  return d;\n}\n\nfloat sceneDistance(vec3 point) {\n  return mapDist(point);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = sceneDistance(p);\n  vec2 e = vec2(0.001, 0.0);\n  vec3 n = d - vec3(\n    sceneDistance(p - e.xyy),\n    sceneDistance(p - e.yxy),\n    sceneDistance(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return dO;\n}\n\nvec2 rayMarchCol(vec3 ro, vec3 rd) {\n  // DITHERING\n\tvec2 seed = fract(uv * 2.0) / 2.0 + sin(u_time / 2.0);\n\n  float dO = 0.0;\n\n  float col = 0.0;\n\n  for(int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = sceneDistance(p);\n    // DITHERING\n    dS = abs(dS) * (0.5 + 0.5 * rand(seed * vec2(i)));\n    col += smoothstep(3.0, 0.0, dS) * 0.09;\n    dO += dS;\n    if (dO > MAX_DIST || abs(dS) < SURF_DIST) {\n      break;\n    }\n  }\n\n  return vec2(col, dO);\n}\n\nvec3 colorize(float t) {\n\n  // 1.0 - pow(t - 1.0, 2.0)\n  // 4.0 * pow(t - 0.5, 3.0) + 0.5\n  // pow(1.6 * t - 0.8, 3.0) + 0.5\n  // 2.0 * pow(t - 0.5, 3.0) + 0.25\n  // (exp(t) - 1.0) / (EXP - 1.0)\n  // (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n\n  vec3 col = vec3(\n    1.0 - pow(t - 1.0, 2.0),\n    t * t,\n    (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n  );\n\n  col += vec3(1.0, 0.6, 0.2) * smoothstep(0.1, 1.0, (exp(t) - 1.0) / (EXP - 1.0)) ;\n\n  // t = clamp(t, 0.0, 1.0);\n\n  // vec3 col = mix(\n  //   vec3(0.1, 0.1, 0.6),\n  //   vec3(1.0, 0.8, 0.5),\n  //   pow(1.6 * t - 0.8, 3.0) + 0.5\n  // ) * mix(\n  //   vec3(0.1, 0.1, 0.0),\n  //   vec3(1.2, 0.8, 0.8),\n  //   (exp(3.0 * t) - 1.0) / (pow(EXP, 3.0) - 1.0)\n  // );\n\n  // col = vec3(\n  //   5.0 * pow(col.r, 1.2),\n  //   5.0 * pow(col.g, 1.6),\n  //   5.0 * pow(col.b, 1.6)\n  // );\n\n  return clamp(col * 1.1 - 0.1, 0.0, 1.0);\n}\n\n// TODO ::: add RaySphere intersect\nvoid main() {\n  const float mouseFactor = 0.0005;\n\n  vec2 uv1 = uv;\n  uv1.x += 0.005 * sin(uv.y * 100.0);\n\n  vec3 rayDirection = normalize(vec3(uv1.x, uv1.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.0 - u_scrollValue * 8.0);\n\n  vec2 rot = vec2(\n    u_mouseY * mouseFactor * PI * 2.0,\n    u_mouseX * mouseFactor * PI * 2.0\n  );\n\n  R(rayDirection.yz, -rot.x);\n  R(rayDirection.xz, rot.y);\n  R(rayOrigin.yz, -rot.x);\n  R(rayOrigin.xz, rot.y);\n\n  vec2 d = rayMarchCol(rayOrigin, rayDirection);\n\n  float t = clamp(d[0] * 0.1, 0.0, 1.0) ;\n  t *= (1.9 - length(uv) * 0.8);\n  // t = clamp(t, 0.0, 1.0);\n  vec3 col = colorize(t) * (1.0 - 0.2 * sin(uv.y * 900.0));\n\n  if(d[1] < MAX_DIST) {\n      vec3 p = rayOrigin + rayDirection * d[1];\n      vec3 n = GetNormal(p);\n      //vec3 r = reflect(rayDirection, n);\n\n      //float dif = dot(n, normalize(vec3(0.0, 2.0, 0.0))) * 0.5 + 0.5;\n      col += vec3(1.0, 1.0, 1.0) * (1.0 - t);\n  }\n\n  FragColor = vec4(col, 1.0);\n}\n"},1726:(n,e,t)=>{"use strict";n.exports=t.p+"38be798b3a835d761dac.jpg"},6333:(n,e,t)=>{"use strict";n.exports=t.p+"a25c444cca91cead4c72.jpg"},8685:(n,e,t)=>{"use strict";n.exports=t.p+"c3470ee4c7acc4032829.jpg"},8453:(n,e,t)=>{"use strict";n.exports=t.p+"afdb0627440df41311e2.jpg"},7134:(n,e,t)=>{"use strict";n.exports=t.p+"5a2f66998f134e56274a.jpg"},4199:(n,e,t)=>{"use strict";n.exports=t.p+"845defc5c776e0befa84.jpg"},8510:(n,e,t)=>{"use strict";n.exports=t.p+"89d89f81b88f1293505f.jpg"}},e={};function t(a){var r=e[a];if(void 0!==r)return r.exports;var o=e[a]={exports:{}};return n[a](o,o.exports,t),o.exports}t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{"use strict";var n=r(t(7294)),e=t(745),a=r(t(1198));function r(n){return n&&n.__esModule?n:{default:n}}t(3928),t(6253),t(8369),t(1752),(0,e.createRoot)(document.querySelector("#app")).render(n.default.createElement(a.default,null))})()})();
//# sourceMappingURL=bundle.js.map